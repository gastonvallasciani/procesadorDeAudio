
MisProyectos/procesadorDeAudio/out/procesadorDeAudio.elf:     file format elf32-littlearm
MisProyectos/procesadorDeAudio/out/procesadorDeAudio.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a0019cd

Program Header:
0x70000001 off    0x00012c2c vaddr 0x1a002c2c paddr 0x1a002c2c align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x0000228c flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00002c34 memsz 0x00002c34 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a002c34 align 2**16
         filesz 0x000000e4 memsz 0x000000e4 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c2c  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e4  10000000  1a002c34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200e4  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200e4  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200e4  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200e4  2**2
                  CONTENTS
  6 .bss          000021a4  100000e8  100000e8  000000e8  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200e4  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200e4  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200e4  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200e4  2**2
                  CONTENTS
 11 .ARM.exidx    00000008  1a002c2c  1a002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 12 .uninit_RESERVED 00000000  10000000  10000000  000200e4  2**2
                  CONTENTS
 13 .noinit_RAM2  00000000  10080000  10080000  000200e4  2**2
                  CONTENTS
 14 .noinit_RAM3  00000000  20000000  20000000  000200e4  2**2
                  CONTENTS
 15 .noinit_RAM4  00000000  20008000  20008000  000200e4  2**2
                  CONTENTS
 16 .noinit_RAM5  00000000  2000c000  2000c000  000200e4  2**2
                  CONTENTS
 17 .noinit       00000000  1000228c  1000228c  000200e4  2**2
                  CONTENTS
 18 .debug_info   0001a3e1  00000000  00000000  000200e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_abbrev 0000451d  00000000  00000000  0003a4c5  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_loc    00009822  00000000  00000000  0003e9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_aranges 00000c10  00000000  00000000  00048208  2**3
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_ranges 00000b88  00000000  00000000  00048e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_macro  0000dc97  00000000  00000000  000499a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_line   00011383  00000000  00000000  00057637  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_str    00024ee3  00000000  00000000  000689ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .comment      00000070  00000000  00000000  0008d89d  2**0
                  CONTENTS, READONLY
 27 .ARM.attributes 00000039  00000000  00000000  0008d90d  2**0
                  CONTENTS, READONLY
 28 .debug_frame  00001bcc  00000000  00000000  0008d948  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000e8 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a002c2c l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000228c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 cr_startup_lpc43xx.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 ADC_proxyClient.c
00000000 l    df *ABS*	00000000 DAC_hardwareProxy.c
100000e8 l     O .bss	000007d0 bufferTx
100008b8 l     O .bss	00000002 indexWriteTx
100008ba l     O .bss	00000002 indexReadTx
00000000 l    df *ABS*	00000000 ADC_hardwareProxy.c
100008be l     O .bss	00000002 dataAcquired
100008c0 l     O .bss	00000008 ADCSetup
00000000 l    df *ABS*	00000000 main.c
100008cc l     O .bss	00000001 debugPrint
00000000 l    df *ABS*	00000000 filterManager.c
100008d0 l     O .bss	00000024 xBuffer
00000000 l    df *ABS*	00000000 board.c
1a000b28 l     F .text	00000040 Board_LED_Init
1a000b68 l     F .text	0000003c Board_TEC_Init
1a000ba4 l     F .text	0000003c Board_GPIO_Init
1a000be0 l     F .text	00000038 Board_SPI_Init
1a000c18 l     F .text	00000024 Board_I2C_Init
1a000c3c l     F .text	00000030 Board_ADC_Init
1a0028fc l     O .text	00000012 GpioPorts
1a002918 l     O .text	00000008 GpioButtons
1a002920 l     O .text	0000000c GpioLeds
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 board_sysinit.c
1a00292c l     O .text	00000004 InitClkStates
1a002930 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 fpu_init.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
1000001c l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a000e50 l     F .text	0000002c Chip_UART_GetIndex
1a0029a4 l     O .text	00000008 UART_BClock
1a0029ac l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000ff4 l     F .text	00000014 Chip_ADC_GetClockIndex
1a001008 l     F .text	00000030 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0011ac l     F .text	000000a8 pll_calc_divs
1a001254 l     F .text	00000104 pll_get_frac
1a001358 l     F .text	00000048 Chip_Clock_FindBaseClock
1a0015c4 l     F .text	00000022 Chip_Clock_GetDivRate
100008f4 l     O .bss	00000008 audio_usb_pll_freq
1a0029c0 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a00172c l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a002a2c l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001914 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001928 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000058 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a002a74 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_tick.c
100008fc l     O .bss	00000004 tickHookFunction
10000900 l     O .bss	00000008 tickCounter
10000908 l     O .bss	00000004 callBackFuncParams
00000000 l    df *ABS*	00000000 sapi_timer.c
1a001c18 l     F .text	00000002 errorOcurred
1a001c1c l     F .text	00000002 doNothing
1a002abc l     O .text	00000030 timer_sd
1000005c l     O .data	00000040 timer_dd
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a001e30 l     F .text	0000002c gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
1000090c l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_print.c
00000000 l    df *ABS*	00000000 sapi_ultrasonic_hcsr04.c
1a002258 l     F .text	00000010 clearInterrupt
1a002268 l     F .text	00000060 serveInterrupt
1000009c l     O .data	00000048 ultrasonicSensors
1a002c28 l     O .text	00000003 ultrasonicSensorsIrqMap
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 bpabi.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
00000000 l       *UND*	00000000 USB_StringDescriptor
00000000 l       *UND*	00000000 USB_DeviceDescriptor
00000000 l       *UND*	00000000 Keyboard_ReportDescSize
1a002c2c l       .bss_RAM5	00000000 __init_array_end
00000000 l       *UND*	00000000 Keyboard_ReportDescriptor
00000000 l       *UND*	00000000 USB_DeviceQualifier
1a002c2c l       .bss_RAM5	00000000 __preinit_array_end
00000000 l       *UND*	00000000 USB_HsConfigDescriptor
00000000 l       *UND*	00000000 USB_FsConfigDescriptor
1a002c2c l       .bss_RAM5	00000000 __init_array_start
1a002c2c l       .bss_RAM5	00000000 __preinit_array_start
1a0013ec g     F .text	0000001c Chip_Clock_GetDividerSource
1a00234c g     F .text	0000002e .hidden __gnu_uldivmod_helper
1a001db0 g     F .text	00000040 TIMER2_IRQHandler
1a000190  w    F .text	00000002 DebugMon_Handler
1a00019c  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a00019c  w    F .text	00000002 ADCHS_IRQHandler
1a002380 g     F .text	0000029c .hidden __divdi3
1a000114 g       .text	00000000 __section_table_start
1a00019c  w    F .text	00000002 FLASH_EEPROM_IRQHandler
10000004 g     O .data	00000018 lpf15Khz
1a00019c  w    F .text	00000002 I2C0_IRQHandler
1a0004b4 g     F .text	00000050 DACPROXYCLIENT_mutate
10000ab0 g     O .bss	000003e8 secondOutputBuffer
1a0021f0 g     F .text	0000003e delayRead
1a00017c  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a001154 g     F .text	0000000c Chip_ADC_SetResolution
1a000a80 g     F .text	00000022 eliminateContinous
1a001bec g     F .text	0000002c SysTick_Handler
1a000ed0 g     F .text	00000040 Chip_UART_SetBaud
1a002240 g     F .text	00000008 printString
1a00019c  w    F .text	00000002 SDIO_IRQHandler
1a000794 g     F .text	00000064 tickTimerHandler
1a00019c  w    F .text	00000002 ATIMER_IRQHandler
1a000194  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a002c34 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a00019c  w    F .text	00000002 I2C1_IRQHandler
1a00019c  w    F .text	00000002 UART1_IRQHandler
1a00019c  w    F .text	00000002 GPIO5_IRQHandler
1a00019c  w    F .text	00000002 CAN1_IRQHandler
100008cd g     O .bss	00000001 bufferPtr
1a0007f8 g     F .text	00000058 tickTimerDacHandler
53ff5eae g       *ABS*	00000000 __valid_user_code_checksum
1a002c34 g       .ARM.exidx	00000000 _etext
100008ce g     O .bss	00000002 currentSample
1a00019c  w    F .text	00000002 USB1_IRQHandler
1a0009f0 g     F .text	0000001e shiftDelayLine
1a00019c  w    F .text	00000002 I2S0_IRQHandler
1a001df0 g     F .text	00000040 TIMER3_IRQHandler
1a001650 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a00019c  w    F .text	00000002 UART0_IRQHandler
1a0001bc g     F .text	00000012 bss_init
1a001764 g     F .text	00000018 Chip_TIMER_Reset
1a00019c  w    F .text	00000002 SGPIO_IRQHandler
100008bc g     O .bss	00000001 adcDataReadyFlag
1a0022ec g     F .text	00000000 .hidden __aeabi_uldivmod
1000228c g       .noinit	00000000 _noinit
1a001b34 g     F .text	00000018 uartWriteString
10002278 g     O .bss	00000004 SystemCoreClock
10000e98 g     O .bss	00000004 audioChannel
1a000e7c g     F .text	00000054 Chip_UART_Init
1a00177c g     F .text	00000010 Chip_DAC_UpdateValue
1a000590 g     F .text	00000020 ADC0_IRQHandler
1a001048 g     F .text	00000018 readAdcVal
10000e9c g     O .bss	000003e8 outVector
1a000188  w    F .text	00000002 UsageFault_Handler
1a0016cc g     F .text	0000004c Chip_Clock_GetRate
1a00019c  w    F .text	00000002 GPIO6_IRQHandler
1a002230 g     F .text	0000000e printInitUart
1a0005b0 g     F .text	0000015c adcChannelEnable
1a000458 g     F .text	0000005c DACHARDWAREPROXY_marshal
1a000d0c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000ae8 g     F .text	00000040 filterVectorProcessor
1a002914 g     O .text	00000004 ExtRateIn
1a00019c  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
10001288 g     O .bss	00000018 waitDelay
100012a0 g     O .bss	00000008 lpf
1a0022d4 g     F .text	0000000a GPIO1_IRQHandler
1a00019c  w    F .text	00000002 SSP0_IRQHandler
1a002c2c g       .ARM.exidx	00000000 __exidx_start
100012a8 g     O .bss	00000004 activeBuffer
1a0002fc g     O .text	00000004 CRP_WORD
1a001038 g     F .text	0000000e setStartMode
1a002888 g     F .text	0000004c __libc_init_array
1a00261c g     F .text	0000026a .hidden __udivdi3
10000910 g     O .bss	00000190 bufferRx
1a00019c  w    F .text	00000002 ADC1_IRQHandler
1a000c90 g     F .text	0000002c Board_Init
1a001a50 g     F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a00019c  w    F .text	00000002 RTC_IRQHandler
1000228c g       .bss	00000000 _ebss
1a001160 g     F .text	00000026 Chip_ADC_EnableChannel
1a001d34 g     F .text	0000003c TIMER0_IRQHandler
1a001b70 g     F .text	0000007c tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a00019c  w    F .text	00000002 SPI_IRQHandler
1a000e20 g     F .text	00000030 Chip_I2C_SetClockRate
1a00019c  w    F .text	00000002 LCD_IRQHandler
1a0013a0 g     F .text	0000004c Chip_Clock_EnableCrystal
10000aa0 g     O .bss	00000008 adcStruct
1a0010a0 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a0001a0 g     F .text	0000001a data_init
100012ac g     O .bss	00000004 backBuffer
1a000504 g     F .text	00000010 adcInitialize
1a00042c g     F .text	00000010 DACHARDWAREPROXY_initialize
100008c8 g     O .bss	00000001 captureActive
1a001100 g     F .text	00000020 Chip_ADC_SetStartMode
1a001d70 g     F .text	00000040 TIMER1_IRQHandler
10000aa8 g     O .bss	00000002 indexWriteRx
1a000dfc g     F .text	00000024 Chip_I2C_Init
1a00019c  w    F .text	00000002 UART2_IRQHandler
1a002248 g     F .text	00000010 printEnter
1a00155c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a002aec g     O .text	00000136 gpioPinsInit
1a000aa4 g     F .text	00000022 sumContinous
1a001b18 g     F .text	0000001a uartWriteByte
1a001940 g     F .text	00000012 Chip_SSP_SetClockRate
1a0020a8 g     F .text	00000016 gpioToggle
1a0022e0 g     F .text	0000000a GPIO2_IRQHandler
1a001c20 g     F .text	0000010c Timer_Init
1a001d2c g     F .text	00000008 Timer_microsecondsToTicks
1a00162c g     F .text	00000024 Chip_Clock_GetBaseClock
100000e8 g       .bss	00000000 _bss
1a0010a8 g     F .text	00000038 Chip_ADC_ReadStatus
1a0017a4 g     F .text	0000001a Chip_DAC_Init
1a001120 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0021d0 g     F .text	00000020 delayInit
100012b0 g     O .bss	000003e8 audioBuffer1
1a00019c  w    F .text	00000002 I2S1_IRQHandler
1a001954 g     F .text	0000003e Chip_SSP_SetBitRate
10000000 g     O .data	00000001 transmissionStatus
10001698 g     O .bss	00000021 buffer
1a0017c0 g     F .text	00000002 Chip_GPIO_Init
1a002910 g     O .text	00000004 OscRateIn
1a001a9c g     F .text	0000007c uartInit
1000228c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00019c  w    F .text	00000002 SSP1_IRQHandler
1a001758 g     F .text	0000000c Chip_TIMER_Init
1a000178 g       .text	00000000 __bss_section_table_end
1a001e5c g     F .text	0000019c gpioInit
1a00237c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0020c0 g     F .text	0000001c USB0_IRQHandler
1a00019c  w    F .text	00000002 GPIO3_IRQHandler
1a00019c  w    F .text	00000002 SCT_IRQHandler
1a000328 g     F .text	00000024 configAqcuisition
1a001408 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a0028d4 g     F .text	00000010 memset
1a000180  w    F .text	00000002 MemManage_Handler
1a000850 g     F .text	000001a0 main
100008ca g     O .bss	00000002 currentTransmissionSample
1a00043c g     F .text	0000001c DACHARDWAREPROXY_config
1a00019c  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000300 g     F .text	00000028 initAqcuisition
1a00018c  w    F .text	00000002 SVC_Handler
10000054 g     O .data	00000004 DWT_CTRL
1a001a70 g     F .text	00000018 uartTxReady
1a00019c  w    F .text	00000002 GPIO7_IRQHandler
1a00165c g     F .text	0000003c Chip_Clock_EnableOpts
1a001424 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000d84 g     F .text	00000058 fpuInit
1a0014dc g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a000cbc g     F .text	0000001c SystemInit
1a00019c  w    F .text	00000002 SPIFI_IRQHandler
1a00019c  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001ff8 g     F .text	00000058 gpioWrite
1a00034c g     F .text	000000e0 dataAqcuisition
1a001060 g     F .text	00000040 Chip_ADC_Init
10002288 g     O .bss	00000004 g_pUsbApi
1a000cd8 g     F .text	00000034 Board_SetupMuxing
1a000f10 g     F .text	000000e4 Chip_UART_SetBaudFDR
1a001b4c g     F .text	0000000c tickRead
10002280 g     O .bss	00000008 tickRateMS
1a001188 g     F .text	00000022 Chip_ADC_SetBurstCmd
1a000ac8 g     F .text	00000020 continousFilterGain
1a00019c  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001a88 g     F .text	00000014 uartTxWrite
1a00019c  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a000a10 g     F .text	00000070 filterProcessor
1000228c g       .bss	00000000 _pvHeapStart
100016bc g     O .bss	00000004 transmitBuffer
1a000178 g       .text	00000000 __section_table_end
1a001994 g     F .text	00000038 Chip_SSP_Init
1a00019c  w    F .text	00000002 GINT0_IRQHandler
1a00178c g     F .text	00000016 Chip_DAC_SetBias
1a00019c  w    F .text	00000002 DAC_IRQHandler
1a000c6c g     F .text	00000024 Board_Debug_Init
10000001 g     O .data	00000001 LED
10000aaa g     O .bss	00000002 indexReadRx
1a0010e0 g     F .text	0000001e Chip_ADC_Int_SetChannelCmd
100000e4 g       .data	00000000 _edata
1a00070c g     F .text	00000088 adcConfiguration
1a000ddc g     F .text	00000020 Chip_I2C_EventHandler
1a00019c  w    F .text	00000002 M0SUB_IRQHandler
100016c0 g     O .bss	000003e8 inpVector
1a0017c4 g     F .text	00000150 Chip_SetupCoreClock
1a0022c8 g     F .text	0000000a GPIO0_IRQHandler
1a000000 g     O .text	00000114 g_pfnVectors
1a0019cc g     F .text	00000084 ResetISR
1a001718 g     F .text	00000014 SystemCoreClockUpdate
1a00019c  w    F .text	00000002 DMA_IRQHandler
1a00019c  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a00237c  w    F .text	00000002 .hidden __aeabi_idiv0
1a000514 g     F .text	0000007c adcReadData
10001aa8 g     O .bss	000003e8 firstOutputBuffer
1a000184  w    F .text	00000002 BusFault_Handler
1a001698 g     F .text	00000034 Chip_Clock_Enable
1a00019c  w    F .text	00000002 UART3_IRQHandler
1a00019c  w    F .text	00000002 MCPWM_IRQHandler
1a00231c g     F .text	0000002e .hidden __gnu_ldivmod_helper
1a00019c  w    F .text	00000002 M0APP_IRQHandler
1a002050 g     F .text	00000058 gpioRead
1a0020dc g     F .text	000000f4 boardInit
1a00019c  w    F .text	00000002 GINT1_IRQHandler
1a001b58 g     F .text	00000018 tickPowerSet
10001e90 g     O .bss	000003e8 audioBuffer2
1a0015e8 g     F .text	00000044 Chip_Clock_SetBaseClock
1a001a54 g     F .text	0000001c cyclesCounterInit
1a00019c  w    F .text	00000002 GPIO4_IRQHandler
1a000d78 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 cd 19 00 1a 79 01 00 1a 7d 01 00 1a     ........y...}...
1a000010:	81 01 00 1a 85 01 00 1a 89 01 00 1a ae 5e ff 53     .............^.S
	...
1a00002c:	8d 01 00 1a 91 01 00 1a 00 00 00 00 95 01 00 1a     ................
1a00003c:	ed 1b 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00004c:	00 00 00 00 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00005c:	9d 01 00 1a c1 20 00 1a 9d 01 00 1a 9d 01 00 1a     ..... ..........
1a00006c:	9d 01 00 1a 35 1d 00 1a 71 1d 00 1a b1 1d 00 1a     ....5...q.......
1a00007c:	f1 1d 00 1a 9d 01 00 1a 91 05 00 1a 9d 01 00 1a     ................
1a00008c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a00009c:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ac:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000bc:	9d 01 00 1a c9 22 00 1a d5 22 00 1a e1 22 00 1a     ....."..."..."..
1a0000cc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000dc:	9d 01 00 1a 9d 01 00 1a 9d 01 00 1a 9d 01 00 1a     ................
1a0000ec:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a0000fc:	9d 01 00 1a 00 00 00 00 9d 01 00 1a 9d 01 00 1a     ................
1a00010c:	9d 01 00 1a 9d 01 00 1a                             ........

1a000114 <__data_section_table>:
1a000114:	1a002c34 	.word	0x1a002c34
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000e4 	.word	0x000000e4
1a000120:	1a002c34 	.word	0x1a002c34
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a002c34 	.word	0x1a002c34
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a002c34 	.word	0x1a002c34
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a002c34 	.word	0x1a002c34
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000e8 	.word	0x100000e8
1a000154:	000021a4 	.word	0x000021a4
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
// handler routines in your application code.
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
    }
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>
1a00017a:	bf00      	nop

1a00017c <HardFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
    }
1a00017c:	e7fe      	b.n	1a00017c <HardFault_Handler>
1a00017e:	bf00      	nop

1a000180 <MemManage_Handler>:
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
    }
1a000180:	e7fe      	b.n	1a000180 <MemManage_Handler>
1a000182:	bf00      	nop

1a000184 <BusFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
    }
1a000184:	e7fe      	b.n	1a000184 <BusFault_Handler>
1a000186:	bf00      	nop

1a000188 <UsageFault_Handler>:
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
    }
1a000188:	e7fe      	b.n	1a000188 <UsageFault_Handler>
1a00018a:	bf00      	nop

1a00018c <SVC_Handler>:
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
    }
1a00018c:	e7fe      	b.n	1a00018c <SVC_Handler>
1a00018e:	bf00      	nop

1a000190 <DebugMon_Handler>:
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
    }
1a000190:	e7fe      	b.n	1a000190 <DebugMon_Handler>
1a000192:	bf00      	nop

1a000194 <PendSV_Handler>:
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
    }
1a000194:	e7fe      	b.n	1a000194 <PendSV_Handler>
1a000196:	bf00      	nop
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
    }
1a000198:	e7fe      	b.n	1a000198 <PendSV_Handler+0x4>
1a00019a:	bf00      	nop

1a00019c <ADC1_IRQHandler>:
//
//*****************************************************************************
__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
    }
1a00019c:	e7fe      	b.n	1a00019c <ADC1_IRQHandler>
1a00019e:	bf00      	nop

1a0001a0 <data_init>:
// ResetISR() function in order to cope with MCUs with multiple banks of
// memory.
//*****************************************************************************
        __attribute__((section(".after_vectors"
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a0001a0:	b410      	push	{r4}
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a2:	2300      	movs	r3, #0
1a0001a4:	e004      	b.n	1a0001b0 <data_init+0x10>
        *pulDest++ = *pulSrc++;
1a0001a6:	6804      	ldr	r4, [r0, #0]
1a0001a8:	600c      	str	r4, [r1, #0]
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001aa:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a0001ac:	3004      	adds	r0, #4
1a0001ae:	3104      	adds	r1, #4
)))
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int *pulSrc = (unsigned int*) romstart;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	4293      	cmp	r3, r2
1a0001b2:	d3f8      	bcc.n	1a0001a6 <data_init+0x6>
        *pulDest++ = *pulSrc++;
}
1a0001b4:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001b8:	4770      	bx	lr
1a0001ba:	bf00      	nop

1a0001bc <bss_init>:

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001bc:	2300      	movs	r3, #0
1a0001be:	e003      	b.n	1a0001c8 <bss_init+0xc>
        *pulDest++ = 0;
1a0001c0:	2200      	movs	r2, #0
1a0001c2:	6002      	str	r2, [r0, #0]

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c4:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001c6:	3004      	adds	r0, #4

__attribute__ ((section(".after_vectors")))
void bss_init(unsigned int start, unsigned int len) {
    unsigned int *pulDest = (unsigned int*) start;
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
1a0001c8:	428b      	cmp	r3, r1
1a0001ca:	d3f9      	bcc.n	1a0001c0 <bss_init+0x4>
        *pulDest++ = 0;
}
1a0001cc:	4770      	bx	lr
1a0001ce:	bf00      	nop
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <initAqcuisition>:
* 		 Default: Fs = 400KHz, Resolucion = 10bits
* 		 Canal Izquierdo ADC_CH1.
* 		 Canal Drecho = ADC_CH2.
* @return none
*/
void initAqcuisition(void){
1a000300:	b508      	push	{r3, lr}
	adcInitialize(CHANNEL0);
1a000302:	4806      	ldr	r0, [pc, #24]	; (1a00031c <initAqcuisition+0x1c>)
1a000304:	f000 f8fe 	bl	1a000504 <adcInitialize>
	adcStruct.adcSampleRate = AUDIO_SAMPLE_RATE;
1a000308:	4b05      	ldr	r3, [pc, #20]	; (1a000320 <initAqcuisition+0x20>)
1a00030a:	4a06      	ldr	r2, [pc, #24]	; (1a000324 <initAqcuisition+0x24>)
1a00030c:	601a      	str	r2, [r3, #0]
	adcStruct.adcResolution = ADC_10BITS;
1a00030e:	2200      	movs	r2, #0
1a000310:	719a      	strb	r2, [r3, #6]
	adcStruct.adcRightChannel = ADC_CH1;
1a000312:	2201      	movs	r2, #1
1a000314:	715a      	strb	r2, [r3, #5]
	adcStruct.adcLeftChannel = ADC_CH2;
1a000316:	2202      	movs	r2, #2
1a000318:	711a      	strb	r2, [r3, #4]
1a00031a:	bd08      	pop	{r3, pc}
1a00031c:	400e3000 	.word	0x400e3000
1a000320:	10000aa0 	.word	0x10000aa0
1a000324:	00061a80 	.word	0x00061a80

1a000328 <configAqcuisition>:
}
/**
* @brief Funcion publica de configuracion de la adquisicion de datos
* @return none
*/
void configAqcuisition(void){
1a000328:	b500      	push	{lr}
1a00032a:	b083      	sub	sp, #12
	adcConfiguration(CHANNEL0, BURST_MODE, adcStruct.adcRightChannel,
1a00032c:	4905      	ldr	r1, [pc, #20]	; (1a000344 <configAqcuisition+0x1c>)
1a00032e:	794a      	ldrb	r2, [r1, #5]
1a000330:	680b      	ldr	r3, [r1, #0]
1a000332:	7989      	ldrb	r1, [r1, #6]
1a000334:	9100      	str	r1, [sp, #0]
1a000336:	4804      	ldr	r0, [pc, #16]	; (1a000348 <configAqcuisition+0x20>)
1a000338:	2100      	movs	r1, #0
1a00033a:	f000 f9e7 	bl	1a00070c <adcConfiguration>
					 adcStruct.adcSampleRate, adcStruct.adcResolution);
}
1a00033e:	b003      	add	sp, #12
1a000340:	f85d fb04 	ldr.w	pc, [sp], #4
1a000344:	10000aa0 	.word	0x10000aa0
1a000348:	400e3000 	.word	0x400e3000

1a00034c <dataAqcuisition>:
* @param dataAcquired puntero al dato adquirido
* @return estado de la operacion
*/
uint8_t dataAqcuisition(accessAction_t  action,
						aqcuisitionType_t aqcuisitionType,
						uint16_t *dataAcquired){
1a00034c:	b530      	push	{r4, r5, lr}
1a00034e:	b083      	sub	sp, #12
1a000350:	460c      	mov	r4, r1
	uint16_t dataAqcuire = 0;
1a000352:	2300      	movs	r3, #0
1a000354:	f8ad 3006 	strh.w	r3, [sp, #6]
	switch(action){
1a000358:	b118      	cbz	r0, 1a000362 <dataAqcuisition+0x16>
1a00035a:	4615      	mov	r5, r2
1a00035c:	2801      	cmp	r0, #1
1a00035e:	d025      	beq.n	1a0003ac <dataAqcuisition+0x60>
1a000360:	e04e      	b.n	1a000400 <dataAqcuisition+0xb4>
	case adcUpdateValue:
		adcReadData(CHANNEL0, BURST_MODE, adcStruct.adcRightChannel, &dataAqcuire);
1a000362:	482c      	ldr	r0, [pc, #176]	; (1a000414 <dataAqcuisition+0xc8>)
1a000364:	2100      	movs	r1, #0
1a000366:	4b2c      	ldr	r3, [pc, #176]	; (1a000418 <dataAqcuisition+0xcc>)
1a000368:	795a      	ldrb	r2, [r3, #5]
1a00036a:	f10d 0306 	add.w	r3, sp, #6
1a00036e:	f000 f8d1 	bl	1a000514 <adcReadData>
		if(aqcuisitionType == circularBuffer){
1a000372:	b9c4      	cbnz	r4, 1a0003a6 <dataAqcuisition+0x5a>
			if( (indexWriteRx+1)%RX_BUFFER_LENGTH_ADC == indexReadRx ){
1a000374:	4b29      	ldr	r3, [pc, #164]	; (1a00041c <dataAqcuisition+0xd0>)
1a000376:	8818      	ldrh	r0, [r3, #0]
1a000378:	1c42      	adds	r2, r0, #1
1a00037a:	4b29      	ldr	r3, [pc, #164]	; (1a000420 <dataAqcuisition+0xd4>)
1a00037c:	fb83 3102 	smull	r3, r1, r3, r2
1a000380:	17d3      	asrs	r3, r2, #31
1a000382:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a000386:	21c8      	movs	r1, #200	; 0xc8
1a000388:	fb01 2313 	mls	r3, r1, r3, r2
1a00038c:	4a25      	ldr	r2, [pc, #148]	; (1a000424 <dataAqcuisition+0xd8>)
1a00038e:	8812      	ldrh	r2, [r2, #0]
1a000390:	4293      	cmp	r3, r2
1a000392:	d037      	beq.n	1a000404 <dataAqcuisition+0xb8>
				return bufferLleno; // condicion de buffer lleno
			}
			else{
				bufferRx[indexWriteRx] = dataAqcuire;
1a000394:	f8bd 1006 	ldrh.w	r1, [sp, #6]
1a000398:	4a23      	ldr	r2, [pc, #140]	; (1a000428 <dataAqcuisition+0xdc>)
1a00039a:	f822 1010 	strh.w	r1, [r2, r0, lsl #1]
				indexWriteRx=(indexWriteRx+1)%RX_BUFFER_LENGTH_ADC;
1a00039e:	4a1f      	ldr	r2, [pc, #124]	; (1a00041c <dataAqcuisition+0xd0>)
1a0003a0:	8013      	strh	r3, [r2, #0]
				return bufferActualizado; // buffer actualizado
1a0003a2:	2000      	movs	r0, #0
1a0003a4:	e033      	b.n	1a00040e <dataAqcuisition+0xc2>
			}
		}
		else if(aqcuisitionType == pingPongBuffer){
1a0003a6:	2c01      	cmp	r4, #1
1a0003a8:	d129      	bne.n	1a0003fe <dataAqcuisition+0xb2>
1a0003aa:	e02d      	b.n	1a000408 <dataAqcuisition+0xbc>
			return 0;

		}
		break;
	case adcGetValue:
		if(aqcuisitionType == circularBuffer){
1a0003ac:	b9c1      	cbnz	r1, 1a0003e0 <dataAqcuisition+0x94>
			if (indexReadRx == indexWriteRx)
1a0003ae:	4b1d      	ldr	r3, [pc, #116]	; (1a000424 <dataAqcuisition+0xd8>)
1a0003b0:	881b      	ldrh	r3, [r3, #0]
1a0003b2:	4a1a      	ldr	r2, [pc, #104]	; (1a00041c <dataAqcuisition+0xd0>)
1a0003b4:	8812      	ldrh	r2, [r2, #0]
1a0003b6:	4293      	cmp	r3, r2
1a0003b8:	d028      	beq.n	1a00040c <dataAqcuisition+0xc0>
					return bufferVacio; // Buffer vacio
			else {
					*dataAcquired = bufferRx[indexReadRx];
1a0003ba:	4a1b      	ldr	r2, [pc, #108]	; (1a000428 <dataAqcuisition+0xdc>)
1a0003bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
1a0003c0:	802b      	strh	r3, [r5, #0]
					indexReadRx = (indexReadRx+1)%RX_BUFFER_LENGTH_ADC;
1a0003c2:	4818      	ldr	r0, [pc, #96]	; (1a000424 <dataAqcuisition+0xd8>)
1a0003c4:	8802      	ldrh	r2, [r0, #0]
1a0003c6:	3201      	adds	r2, #1
1a0003c8:	4b15      	ldr	r3, [pc, #84]	; (1a000420 <dataAqcuisition+0xd4>)
1a0003ca:	fb83 3102 	smull	r3, r1, r3, r2
1a0003ce:	17d3      	asrs	r3, r2, #31
1a0003d0:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a0003d4:	21c8      	movs	r1, #200	; 0xc8
1a0003d6:	fb01 2313 	mls	r3, r1, r3, r2
1a0003da:	8003      	strh	r3, [r0, #0]
					return datoAdquirido; // valor del adc adquirido
1a0003dc:	2003      	movs	r0, #3
1a0003de:	e016      	b.n	1a00040e <dataAqcuisition+0xc2>
			}
		}
		else if(aqcuisitionType == pingPongBuffer){
1a0003e0:	2901      	cmp	r1, #1
1a0003e2:	d10c      	bne.n	1a0003fe <dataAqcuisition+0xb2>
			adcReadData(CHANNEL0, BURST_MODE, adcStruct.adcRightChannel, &dataAqcuire);
1a0003e4:	480b      	ldr	r0, [pc, #44]	; (1a000414 <dataAqcuisition+0xc8>)
1a0003e6:	2100      	movs	r1, #0
1a0003e8:	4b0b      	ldr	r3, [pc, #44]	; (1a000418 <dataAqcuisition+0xcc>)
1a0003ea:	795a      	ldrb	r2, [r3, #5]
1a0003ec:	f10d 0306 	add.w	r3, sp, #6
1a0003f0:	f000 f890 	bl	1a000514 <adcReadData>
			*dataAcquired = dataAqcuire;
1a0003f4:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a0003f8:	802b      	strh	r3, [r5, #0]
			return 3;
1a0003fa:	2003      	movs	r0, #3
1a0003fc:	e007      	b.n	1a00040e <dataAqcuisition+0xc2>
1a0003fe:	e006      	b.n	1a00040e <dataAqcuisition+0xc2>
		}
		break;
	default:
		return 1;
1a000400:	2001      	movs	r0, #1
1a000402:	e004      	b.n	1a00040e <dataAqcuisition+0xc2>
	switch(action){
	case adcUpdateValue:
		adcReadData(CHANNEL0, BURST_MODE, adcStruct.adcRightChannel, &dataAqcuire);
		if(aqcuisitionType == circularBuffer){
			if( (indexWriteRx+1)%RX_BUFFER_LENGTH_ADC == indexReadRx ){
				return bufferLleno; // condicion de buffer lleno
1a000404:	2001      	movs	r0, #1
1a000406:	e002      	b.n	1a00040e <dataAqcuisition+0xc2>
				indexWriteRx=(indexWriteRx+1)%RX_BUFFER_LENGTH_ADC;
				return bufferActualizado; // buffer actualizado
			}
		}
		else if(aqcuisitionType == pingPongBuffer){
			return 0;
1a000408:	2000      	movs	r0, #0
1a00040a:	e000      	b.n	1a00040e <dataAqcuisition+0xc2>
		}
		break;
	case adcGetValue:
		if(aqcuisitionType == circularBuffer){
			if (indexReadRx == indexWriteRx)
					return bufferVacio; // Buffer vacio
1a00040c:	2002      	movs	r0, #2
		break;
	default:
		return 1;
		break;
	}
}
1a00040e:	b003      	add	sp, #12
1a000410:	bd30      	pop	{r4, r5, pc}
1a000412:	bf00      	nop
1a000414:	400e3000 	.word	0x400e3000
1a000418:	10000aa0 	.word	0x10000aa0
1a00041c:	10000aa8 	.word	0x10000aa8
1a000420:	51eb851f 	.word	0x51eb851f
1a000424:	10000aaa 	.word	0x10000aaa
1a000428:	10000910 	.word	0x10000910

1a00042c <DACHARDWAREPROXY_initialize>:

/*==================[internal functions definition]==========================*/

/*==================[external functions definition]==========================*/

void DACHARDWAREPROXY_initialize(void){
1a00042c:	b508      	push	{r3, lr}
	Chip_DAC_Init(DAC_CHANNEL);		//Enable DAC channel
1a00042e:	4802      	ldr	r0, [pc, #8]	; (1a000438 <DACHARDWAREPROXY_initialize+0xc>)
1a000430:	f001 f9b8 	bl	1a0017a4 <Chip_DAC_Init>
1a000434:	bd08      	pop	{r3, pc}
1a000436:	bf00      	nop
1a000438:	400e1000 	.word	0x400e1000

1a00043c <DACHARDWAREPROXY_config>:
}

void DACHARDWAREPROXY_config(void){
1a00043c:	b508      	push	{r3, lr}
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a00043e:	4805      	ldr	r0, [pc, #20]	; (1a000454 <DACHARDWAREPROXY_config+0x18>)
1a000440:	6843      	ldr	r3, [r0, #4]
1a000442:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a000446:	f043 0308 	orr.w	r3, r3, #8
1a00044a:	6043      	str	r3, [r0, #4]
	/* Enables the DMA operation and controls DMA timer */
	Chip_DAC_ConfigDAConverterControl(DAC_CHANNEL, DAC_DMA_ENA);
	/* DCAR DMA access */
	/* Update value to DAC buffer*/
	Chip_DAC_UpdateValue(DAC_CHANNEL, 1);
1a00044c:	2101      	movs	r1, #1
1a00044e:	f001 f995 	bl	1a00177c <Chip_DAC_UpdateValue>
1a000452:	bd08      	pop	{r3, pc}
1a000454:	400e1000 	.word	0x400e1000

1a000458 <DACHARDWAREPROXY_marshal>:

void DACHARDWAREPROXY_disable(void){
	Chip_DAC_DeInit( DAC_CHANNEL );
}

uint8_t DACHARDWAREPROXY_marshal(void){
1a000458:	b508      	push	{r3, lr}

	uint16_t dacData;

	if (indexReadTx == indexWriteTx)
1a00045a:	4b11      	ldr	r3, [pc, #68]	; (1a0004a0 <DACHARDWAREPROXY_marshal+0x48>)
1a00045c:	881b      	ldrh	r3, [r3, #0]
1a00045e:	4a11      	ldr	r2, [pc, #68]	; (1a0004a4 <DACHARDWAREPROXY_marshal+0x4c>)
1a000460:	8812      	ldrh	r2, [r2, #0]
1a000462:	4293      	cmp	r3, r2
1a000464:	d01a      	beq.n	1a00049c <DACHARDWAREPROXY_marshal+0x44>
		return 0; // Buffer vacio
	else {
		dacData = bufferTx[indexReadTx];
1a000466:	4a10      	ldr	r2, [pc, #64]	; (1a0004a8 <DACHARDWAREPROXY_marshal+0x50>)
1a000468:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
		if( dacData > 1023 ){
1a00046c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1a000470:	d301      	bcc.n	1a000476 <DACHARDWAREPROXY_marshal+0x1e>
			dacData = 1023;
1a000472:	f240 31ff 	movw	r1, #1023	; 0x3ff
		}
		else if(dacData<0){
			dacData = 0;
		}
		Chip_DAC_UpdateValue( DAC_CHANNEL, dacData ); // escribe en el DAC
1a000476:	480d      	ldr	r0, [pc, #52]	; (1a0004ac <DACHARDWAREPROXY_marshal+0x54>)
1a000478:	f001 f980 	bl	1a00177c <Chip_DAC_UpdateValue>
		indexReadTx = (indexReadTx+1)%DAC_TX_BUFFER_LENGTH;
1a00047c:	4808      	ldr	r0, [pc, #32]	; (1a0004a0 <DACHARDWAREPROXY_marshal+0x48>)
1a00047e:	8802      	ldrh	r2, [r0, #0]
1a000480:	3201      	adds	r2, #1
1a000482:	4b0b      	ldr	r3, [pc, #44]	; (1a0004b0 <DACHARDWAREPROXY_marshal+0x58>)
1a000484:	fb83 3102 	smull	r3, r1, r3, r2
1a000488:	17d3      	asrs	r3, r2, #31
1a00048a:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a00048e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a000492:	fb01 2313 	mls	r3, r1, r3, r2
1a000496:	8003      	strh	r3, [r0, #0]
		return 1;
1a000498:	2001      	movs	r0, #1
1a00049a:	bd08      	pop	{r3, pc}
uint8_t DACHARDWAREPROXY_marshal(void){

	uint16_t dacData;

	if (indexReadTx == indexWriteTx)
		return 0; // Buffer vacio
1a00049c:	2000      	movs	r0, #0
		Chip_DAC_UpdateValue( DAC_CHANNEL, dacData ); // escribe en el DAC
		indexReadTx = (indexReadTx+1)%DAC_TX_BUFFER_LENGTH;
		return 1;
	}

}
1a00049e:	bd08      	pop	{r3, pc}
1a0004a0:	100008ba 	.word	0x100008ba
1a0004a4:	100008b8 	.word	0x100008b8
1a0004a8:	100000e8 	.word	0x100000e8
1a0004ac:	400e1000 	.word	0x400e1000
1a0004b0:	10624dd3 	.word	0x10624dd3

1a0004b4 <DACPROXYCLIENT_mutate>:

uint8_t DACPROXYCLIENT_mutate(uint16_t dacData){
1a0004b4:	b510      	push	{r4, lr}

	 if( (indexWriteTx+1)%DAC_TX_BUFFER_LENGTH == indexReadTx )
1a0004b6:	4b0f      	ldr	r3, [pc, #60]	; (1a0004f4 <DACPROXYCLIENT_mutate+0x40>)
1a0004b8:	881c      	ldrh	r4, [r3, #0]
1a0004ba:	1c62      	adds	r2, r4, #1
1a0004bc:	4b0e      	ldr	r3, [pc, #56]	; (1a0004f8 <DACPROXYCLIENT_mutate+0x44>)
1a0004be:	fb83 3102 	smull	r3, r1, r3, r2
1a0004c2:	17d3      	asrs	r3, r2, #31
1a0004c4:	ebc3 13a1 	rsb	r3, r3, r1, asr #6
1a0004c8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
1a0004cc:	fb01 2313 	mls	r3, r1, r3, r2
1a0004d0:	4a0a      	ldr	r2, [pc, #40]	; (1a0004fc <DACPROXYCLIENT_mutate+0x48>)
1a0004d2:	8812      	ldrh	r2, [r2, #0]
1a0004d4:	4293      	cmp	r3, r2
1a0004d6:	d009      	beq.n	1a0004ec <DACPROXYCLIENT_mutate+0x38>
		 // Buffer Lleno (error)
			 return 0;
		 else{
			 bufferTx[indexWriteTx] = dacData;
1a0004d8:	4a09      	ldr	r2, [pc, #36]	; (1a000500 <DACPROXYCLIENT_mutate+0x4c>)
1a0004da:	f822 0014 	strh.w	r0, [r2, r4, lsl #1]
			 indexWriteTx =(indexWriteTx+1)%DAC_TX_BUFFER_LENGTH;
1a0004de:	4a05      	ldr	r2, [pc, #20]	; (1a0004f4 <DACPROXYCLIENT_mutate+0x40>)
1a0004e0:	8013      	strh	r3, [r2, #0]
			 if(DACHARDWAREPROXY_marshal()){
1a0004e2:	f7ff ffb9 	bl	1a000458 <DACHARDWAREPROXY_marshal>
1a0004e6:	b118      	cbz	r0, 1a0004f0 <DACPROXYCLIENT_mutate+0x3c>
				 return 1; // dato escrito en el DAC
1a0004e8:	2001      	movs	r0, #1
1a0004ea:	bd10      	pop	{r4, pc}

uint8_t DACPROXYCLIENT_mutate(uint16_t dacData){

	 if( (indexWriteTx+1)%DAC_TX_BUFFER_LENGTH == indexReadTx )
		 // Buffer Lleno (error)
			 return 0;
1a0004ec:	2000      	movs	r0, #0
1a0004ee:	bd10      	pop	{r4, pc}
			 bufferTx[indexWriteTx] = dacData;
			 indexWriteTx =(indexWriteTx+1)%DAC_TX_BUFFER_LENGTH;
			 if(DACHARDWAREPROXY_marshal()){
				 return 1; // dato escrito en el DAC
			 }else{
				 return 2; // Buffer Vacio (error)
1a0004f0:	2002      	movs	r0, #2
			 }
		 }

}
1a0004f2:	bd10      	pop	{r4, pc}
1a0004f4:	100008b8 	.word	0x100008b8
1a0004f8:	10624dd3 	.word	0x10624dd3
1a0004fc:	100008ba 	.word	0x100008ba
1a000500:	100000e8 	.word	0x100000e8

1a000504 <adcInitialize>:
* @brief Funcion que permite inicializar el periferico del ADC.
*
* @param channel puntero al canal de adquisicion del ADC
* @return none
*/
void adcInitialize(LPC_ADC_T *channel){
1a000504:	b508      	push	{r3, lr}
	Chip_ADC_Init( channel, &ADCSetup );
1a000506:	4902      	ldr	r1, [pc, #8]	; (1a000510 <adcInitialize+0xc>)
1a000508:	f000 fdaa 	bl	1a001060 <Chip_ADC_Init>
1a00050c:	bd08      	pop	{r3, pc}
1a00050e:	bf00      	nop
1a000510:	100008c0 	.word	0x100008c0

1a000514 <adcReadData>:
		break;
	}
}

/* Funcion utilizada para adquirir datos del ADC y guardarlos en el buffer de recepcion*/
uint8_t adcReadData(LPC_ADC_T *channel, adcHardwareProxyConfigMode_t mode, ADC_CHANNEL_T adcMultiplexedChannel, uint16_t *adcData){
1a000514:	b570      	push	{r4, r5, r6, lr}
1a000516:	b082      	sub	sp, #8
	uint16_t adcDataRead = 0;
1a000518:	2400      	movs	r4, #0
1a00051a:	f8ad 4006 	strh.w	r4, [sp, #6]
	switch(mode){
1a00051e:	b111      	cbz	r1, 1a000526 <adcReadData+0x12>
1a000520:	2902      	cmp	r1, #2
1a000522:	d00c      	beq.n	1a00053e <adcReadData+0x2a>
1a000524:	e02c      	b.n	1a000580 <adcReadData+0x6c>
	case BURST_MODE:
		if (adcDataReadyFlag == TRUE){
1a000526:	4a18      	ldr	r2, [pc, #96]	; (1a000588 <adcReadData+0x74>)
1a000528:	7812      	ldrb	r2, [r2, #0]
1a00052a:	b2d2      	uxtb	r2, r2
1a00052c:	2a01      	cmp	r2, #1
1a00052e:	d127      	bne.n	1a000580 <adcReadData+0x6c>
			adcDataReadyFlag = FALSE;
1a000530:	2100      	movs	r1, #0
1a000532:	4a15      	ldr	r2, [pc, #84]	; (1a000588 <adcReadData+0x74>)
1a000534:	7011      	strb	r1, [r2, #0]
			*adcData = dataAcquired;
1a000536:	4a15      	ldr	r2, [pc, #84]	; (1a00058c <adcReadData+0x78>)
1a000538:	8812      	ldrh	r2, [r2, #0]
1a00053a:	801a      	strh	r2, [r3, #0]
1a00053c:	e020      	b.n	1a000580 <adcReadData+0x6c>
1a00053e:	461e      	mov	r6, r3
1a000540:	4615      	mov	r5, r2
1a000542:	4604      	mov	r4, r0
		}
		break;
	case DMA_MODE:
		break;
	case NORMAL_MODE:
		Chip_ADC_EnableChannel(channel, adcMultiplexedChannel, ENABLE);
1a000544:	4611      	mov	r1, r2
1a000546:	2201      	movs	r2, #1
1a000548:	f000 fe0a 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_SetStartMode(channel, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a00054c:	4620      	mov	r0, r4
1a00054e:	2101      	movs	r1, #1
1a000550:	2200      	movs	r2, #0
1a000552:	f000 fdd5 	bl	1a001100 <Chip_ADC_SetStartMode>
		while(
			(Chip_ADC_ReadStatus( channel, adcMultiplexedChannel, ADC_DR_DONE_STAT) != SET)
1a000556:	4620      	mov	r0, r4
1a000558:	4629      	mov	r1, r5
1a00055a:	2200      	movs	r2, #0
1a00055c:	f000 fda4 	bl	1a0010a8 <Chip_ADC_ReadStatus>
	case DMA_MODE:
		break;
	case NORMAL_MODE:
		Chip_ADC_EnableChannel(channel, adcMultiplexedChannel, ENABLE);
		Chip_ADC_SetStartMode(channel, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
		while(
1a000560:	2801      	cmp	r0, #1
1a000562:	d1f8      	bne.n	1a000556 <adcReadData+0x42>
			(Chip_ADC_ReadStatus( channel, adcMultiplexedChannel, ADC_DR_DONE_STAT) != SET)
		);
		Chip_ADC_ReadValue( channel, adcMultiplexedChannel, &adcDataRead );
1a000564:	4620      	mov	r0, r4
1a000566:	4629      	mov	r1, r5
1a000568:	f10d 0206 	add.w	r2, sp, #6
1a00056c:	f000 fd98 	bl	1a0010a0 <Chip_ADC_ReadValue>
		*adcData = adcDataRead;
1a000570:	f8bd 3006 	ldrh.w	r3, [sp, #6]
1a000574:	8033      	strh	r3, [r6, #0]
		Chip_ADC_EnableChannel( channel, adcMultiplexedChannel, DISABLE );
1a000576:	4620      	mov	r0, r4
1a000578:	4629      	mov	r1, r5
1a00057a:	2200      	movs	r2, #0
1a00057c:	f000 fdf0 	bl	1a001160 <Chip_ADC_EnableChannel>
		break;
	default:
		break;
	}
	return 1;
}
1a000580:	2001      	movs	r0, #1
1a000582:	b002      	add	sp, #8
1a000584:	bd70      	pop	{r4, r5, r6, pc}
1a000586:	bf00      	nop
1a000588:	100008bc 	.word	0x100008bc
1a00058c:	100008be 	.word	0x100008be

1a000590 <ADC0_IRQHandler>:

void ADC0_IRQHandler(void){
1a000590:	b508      	push	{r3, lr}
	adcDataReadyFlag = TRUE;
1a000592:	2101      	movs	r1, #1
1a000594:	4b03      	ldr	r3, [pc, #12]	; (1a0005a4 <ADC0_IRQHandler+0x14>)
1a000596:	7019      	strb	r1, [r3, #0]
	Chip_ADC_ReadValue(LPC_ADC0, ADC_CH1, &dataAcquired);
1a000598:	4803      	ldr	r0, [pc, #12]	; (1a0005a8 <ADC0_IRQHandler+0x18>)
1a00059a:	4a04      	ldr	r2, [pc, #16]	; (1a0005ac <ADC0_IRQHandler+0x1c>)
1a00059c:	f000 fd80 	bl	1a0010a0 <Chip_ADC_ReadValue>
1a0005a0:	bd08      	pop	{r3, pc}
1a0005a2:	bf00      	nop
1a0005a4:	100008bc 	.word	0x100008bc
1a0005a8:	400e3000 	.word	0x400e3000
1a0005ac:	100008be 	.word	0x100008be

1a0005b0 <adcChannelEnable>:
}

void adcChannelEnable(ADC_CHANNEL_T adcMultiplexedChannel,LPC_ADC_T *channel){
1a0005b0:	b510      	push	{r4, lr}
1a0005b2:	460c      	mov	r4, r1
	switch (adcMultiplexedChannel){
1a0005b4:	3801      	subs	r0, #1
1a0005b6:	2803      	cmp	r0, #3
1a0005b8:	f200 80a7 	bhi.w	1a00070a <adcChannelEnable+0x15a>
1a0005bc:	e8df f000 	tbb	[pc, r0]
1a0005c0:	7d542b02 	.word	0x7d542b02
	case ADC_CH1:
		/* Enable channel*/
		Chip_ADC_EnableChannel( channel,ADC_CH1, ENABLE );
1a0005c4:	4608      	mov	r0, r1
1a0005c6:	2101      	movs	r1, #1
1a0005c8:	460a      	mov	r2, r1
1a0005ca:	f000 fdc9 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH1, ENABLE ); // habilita la interrupcion de conversion para el channel
1a0005ce:	4620      	mov	r0, r4
1a0005d0:	2101      	movs	r1, #1
1a0005d2:	460a      	mov	r2, r1
1a0005d4:	f000 fd84 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		/* Disable the rest off the channels */
		Chip_ADC_EnableChannel( channel, ADC_CH2, DISABLE );
1a0005d8:	4620      	mov	r0, r4
1a0005da:	2102      	movs	r1, #2
1a0005dc:	2200      	movs	r2, #0
1a0005de:	f000 fdbf 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH2, DISABLE );
1a0005e2:	4620      	mov	r0, r4
1a0005e4:	2102      	movs	r1, #2
1a0005e6:	2200      	movs	r2, #0
1a0005e8:	f000 fd7a 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH3, DISABLE );
1a0005ec:	4620      	mov	r0, r4
1a0005ee:	2103      	movs	r1, #3
1a0005f0:	2200      	movs	r2, #0
1a0005f2:	f000 fdb5 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH3, DISABLE );
1a0005f6:	4620      	mov	r0, r4
1a0005f8:	2103      	movs	r1, #3
1a0005fa:	2200      	movs	r2, #0
1a0005fc:	f000 fd70 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH4, DISABLE );
1a000600:	4620      	mov	r0, r4
1a000602:	2104      	movs	r1, #4
1a000604:	2200      	movs	r2, #0
1a000606:	f000 fdab 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH4, DISABLE );
1a00060a:	4620      	mov	r0, r4
1a00060c:	2104      	movs	r1, #4
1a00060e:	2200      	movs	r2, #0
1a000610:	f000 fd66 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>
		break;
1a000614:	bd10      	pop	{r4, pc}
	case ADC_CH2:
		/* Enable channel*/
		Chip_ADC_EnableChannel( channel,ADC_CH2, ENABLE );
1a000616:	4608      	mov	r0, r1
1a000618:	2102      	movs	r1, #2
1a00061a:	2201      	movs	r2, #1
1a00061c:	f000 fda0 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH2, ENABLE ); // habilita la interrupcion de conversion para el channel
1a000620:	4620      	mov	r0, r4
1a000622:	2102      	movs	r1, #2
1a000624:	2201      	movs	r2, #1
1a000626:	f000 fd5b 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		/* Disable the rest off the channels */
		Chip_ADC_EnableChannel( channel, ADC_CH1, DISABLE );
1a00062a:	4620      	mov	r0, r4
1a00062c:	2101      	movs	r1, #1
1a00062e:	2200      	movs	r2, #0
1a000630:	f000 fd96 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH1, DISABLE );
1a000634:	4620      	mov	r0, r4
1a000636:	2101      	movs	r1, #1
1a000638:	2200      	movs	r2, #0
1a00063a:	f000 fd51 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH3, DISABLE );
1a00063e:	4620      	mov	r0, r4
1a000640:	2103      	movs	r1, #3
1a000642:	2200      	movs	r2, #0
1a000644:	f000 fd8c 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH3, DISABLE );
1a000648:	4620      	mov	r0, r4
1a00064a:	2103      	movs	r1, #3
1a00064c:	2200      	movs	r2, #0
1a00064e:	f000 fd47 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH4, DISABLE );
1a000652:	4620      	mov	r0, r4
1a000654:	2104      	movs	r1, #4
1a000656:	2200      	movs	r2, #0
1a000658:	f000 fd82 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH4, DISABLE );
1a00065c:	4620      	mov	r0, r4
1a00065e:	2104      	movs	r1, #4
1a000660:	2200      	movs	r2, #0
1a000662:	f000 fd3d 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>
		break;
1a000666:	bd10      	pop	{r4, pc}
	case ADC_CH3:
		/* Enable channel*/
		Chip_ADC_EnableChannel( channel,ADC_CH3, ENABLE );
1a000668:	4608      	mov	r0, r1
1a00066a:	2103      	movs	r1, #3
1a00066c:	2201      	movs	r2, #1
1a00066e:	f000 fd77 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH3, ENABLE ); // habilita la interrupcion de conversion para el channel
1a000672:	4620      	mov	r0, r4
1a000674:	2103      	movs	r1, #3
1a000676:	2201      	movs	r2, #1
1a000678:	f000 fd32 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		/* Disable the rest off the channels */
		Chip_ADC_EnableChannel( channel, ADC_CH2, DISABLE );
1a00067c:	4620      	mov	r0, r4
1a00067e:	2102      	movs	r1, #2
1a000680:	2200      	movs	r2, #0
1a000682:	f000 fd6d 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH2, DISABLE );
1a000686:	4620      	mov	r0, r4
1a000688:	2102      	movs	r1, #2
1a00068a:	2200      	movs	r2, #0
1a00068c:	f000 fd28 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH1, DISABLE );
1a000690:	4620      	mov	r0, r4
1a000692:	2101      	movs	r1, #1
1a000694:	2200      	movs	r2, #0
1a000696:	f000 fd63 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH1, DISABLE );
1a00069a:	4620      	mov	r0, r4
1a00069c:	2101      	movs	r1, #1
1a00069e:	2200      	movs	r2, #0
1a0006a0:	f000 fd1e 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH4, DISABLE );
1a0006a4:	4620      	mov	r0, r4
1a0006a6:	2104      	movs	r1, #4
1a0006a8:	2200      	movs	r2, #0
1a0006aa:	f000 fd59 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH4, DISABLE );
1a0006ae:	4620      	mov	r0, r4
1a0006b0:	2104      	movs	r1, #4
1a0006b2:	2200      	movs	r2, #0
1a0006b4:	f000 fd14 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>
		break;
1a0006b8:	bd10      	pop	{r4, pc}
	case ADC_CH4:
		/* Enable channel*/
		Chip_ADC_EnableChannel( channel,ADC_CH4, ENABLE );
1a0006ba:	4608      	mov	r0, r1
1a0006bc:	2104      	movs	r1, #4
1a0006be:	2201      	movs	r2, #1
1a0006c0:	f000 fd4e 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH4, ENABLE ); // habilita la interrupcion de conversion para el channel
1a0006c4:	4620      	mov	r0, r4
1a0006c6:	2104      	movs	r1, #4
1a0006c8:	2201      	movs	r2, #1
1a0006ca:	f000 fd09 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		/* Disable the rest off the channels */
		Chip_ADC_EnableChannel( channel, ADC_CH2, DISABLE );
1a0006ce:	4620      	mov	r0, r4
1a0006d0:	2102      	movs	r1, #2
1a0006d2:	2200      	movs	r2, #0
1a0006d4:	f000 fd44 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH2, DISABLE );
1a0006d8:	4620      	mov	r0, r4
1a0006da:	2102      	movs	r1, #2
1a0006dc:	2200      	movs	r2, #0
1a0006de:	f000 fcff 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH3, DISABLE );
1a0006e2:	4620      	mov	r0, r4
1a0006e4:	2103      	movs	r1, #3
1a0006e6:	2200      	movs	r2, #0
1a0006e8:	f000 fd3a 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH3, DISABLE );
1a0006ec:	4620      	mov	r0, r4
1a0006ee:	2103      	movs	r1, #3
1a0006f0:	2200      	movs	r2, #0
1a0006f2:	f000 fcf5 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>

		Chip_ADC_EnableChannel( channel, ADC_CH1, DISABLE );
1a0006f6:	4620      	mov	r0, r4
1a0006f8:	2101      	movs	r1, #1
1a0006fa:	2200      	movs	r2, #0
1a0006fc:	f000 fd30 	bl	1a001160 <Chip_ADC_EnableChannel>
		Chip_ADC_Int_SetChannelCmd( channel, ADC_CH1, DISABLE );
1a000700:	4620      	mov	r0, r4
1a000702:	2101      	movs	r1, #1
1a000704:	2200      	movs	r2, #0
1a000706:	f000 fceb 	bl	1a0010e0 <Chip_ADC_Int_SetChannelCmd>
1a00070a:	bd10      	pop	{r4, pc}

1a00070c <adcConfiguration>:
* @param channel puntero al canal de adquisicion del ADC
*
* @return none
*/

void adcConfiguration(LPC_ADC_T *channel,adcHardwareProxyConfigMode_t mode,ADC_CHANNEL_T adcMultiplexedChannel,uint32_t adcSampleRate, uint8_t resolution){
1a00070c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000710:	4604      	mov	r4, r0
1a000712:	4615      	mov	r5, r2
1a000714:	461f      	mov	r7, r3
1a000716:	f89d 6018 	ldrb.w	r6, [sp, #24]

	switch(mode){
1a00071a:	b119      	cbz	r1, 1a000724 <adcConfiguration+0x18>
1a00071c:	2902      	cmp	r1, #2
1a00071e:	d01a      	beq.n	1a000756 <adcConfiguration+0x4a>
1a000720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

		case BURST_MODE:
			/* Enable burst mode */
			Chip_ADC_SetBurstCmd( channel, ENABLE );
1a000724:	2101      	movs	r1, #1
1a000726:	f000 fd2f 	bl	1a001188 <Chip_ADC_SetBurstCmd>
			/* Set sample rate to 44KHz */
			Chip_ADC_SetSampleRate( channel, &ADCSetup, adcSampleRate );
1a00072a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1a000790 <adcConfiguration+0x84>
1a00072e:	4620      	mov	r0, r4
1a000730:	4641      	mov	r1, r8
1a000732:	463a      	mov	r2, r7
1a000734:	f000 fcf4 	bl	1a001120 <Chip_ADC_SetSampleRate>
			Chip_ADC_SetResolution( channel, &ADCSetup, resolution);
1a000738:	4620      	mov	r0, r4
1a00073a:	4641      	mov	r1, r8
1a00073c:	4632      	mov	r2, r6
1a00073e:	f000 fd09 	bl	1a001154 <Chip_ADC_SetResolution>
			/* Enable channel 1, disable the rest */
			adcChannelEnable(adcMultiplexedChannel,channel);
1a000742:	4628      	mov	r0, r5
1a000744:	4621      	mov	r1, r4
1a000746:	f7ff ff33 	bl	1a0005b0 <adcChannelEnable>
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a00074a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
1a00074e:	4b0f      	ldr	r3, [pc, #60]	; (1a00078c <adcConfiguration+0x80>)
1a000750:	601a      	str	r2, [r3, #0]
1a000752:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			break;
		case DMA_MODE:
			break;
		case NORMAL_MODE:
			/* Enable burst mode */
			Chip_ADC_SetBurstCmd( channel, DISABLE );
1a000756:	2100      	movs	r1, #0
1a000758:	f000 fd16 	bl	1a001188 <Chip_ADC_SetBurstCmd>
			/* Set sample rate to 44KHz */
			Chip_ADC_SetSampleRate( channel, &ADCSetup, adcSampleRate );
1a00075c:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1a000790 <adcConfiguration+0x84>
1a000760:	4620      	mov	r0, r4
1a000762:	4641      	mov	r1, r8
1a000764:	463a      	mov	r2, r7
1a000766:	f000 fcdb 	bl	1a001120 <Chip_ADC_SetSampleRate>
			Chip_ADC_SetResolution( channel, &ADCSetup, resolution);
1a00076a:	4620      	mov	r0, r4
1a00076c:	4641      	mov	r1, r8
1a00076e:	4632      	mov	r2, r6
1a000770:	f000 fcf0 	bl	1a001154 <Chip_ADC_SetResolution>
			/* Enable channel 1, disable the rest */
			adcChannelEnable(adcMultiplexedChannel,channel);
1a000774:	4628      	mov	r0, r5
1a000776:	4621      	mov	r1, r4
1a000778:	f7ff ff1a 	bl	1a0005b0 <adcChannelEnable>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* disable interrupt */
1a00077c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
1a000780:	4b02      	ldr	r3, [pc, #8]	; (1a00078c <adcConfiguration+0x80>)
1a000782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
1a000786:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00078a:	bf00      	nop
1a00078c:	e000e100 	.word	0xe000e100
1a000790:	100008c0 	.word	0x100008c0

1a000794 <tickTimerHandler>:
 * frecuencia de interrupcion 44khz
 */
void tickTimerHandler( void *ptr ){
	uint16_t data;

	if(captureActive){
1a000794:	4b15      	ldr	r3, [pc, #84]	; (1a0007ec <tickTimerHandler+0x58>)
1a000796:	781b      	ldrb	r3, [r3, #0]
1a000798:	f013 0fff 	tst.w	r3, #255	; 0xff
1a00079c:	d021      	beq.n	1a0007e2 <tickTimerHandler+0x4e>
		if(currentSample<VECTOR_SIZE){
1a00079e:	4b14      	ldr	r3, [pc, #80]	; (1a0007f0 <tickTimerHandler+0x5c>)
1a0007a0:	881b      	ldrh	r3, [r3, #0]
1a0007a2:	b29b      	uxth	r3, r3
1a0007a4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a0007a8:	d215      	bcs.n	1a0007d6 <tickTimerHandler+0x42>
/*==================[definiciones de funciones internas]=====================*/
/**
 * Handler del TIMER1, maneja la adquisicion de datos con el ADC
 * frecuencia de interrupcion 44khz
 */
void tickTimerHandler( void *ptr ){
1a0007aa:	b500      	push	{lr}
1a0007ac:	b083      	sub	sp, #12
	uint16_t data;

	if(captureActive){
		if(currentSample<VECTOR_SIZE){
			dataAqcuisition(adcGetValue, pingPongBuffer, &data);
1a0007ae:	2001      	movs	r0, #1
1a0007b0:	4601      	mov	r1, r0
1a0007b2:	f10d 0206 	add.w	r2, sp, #6
1a0007b6:	f7ff fdc9 	bl	1a00034c <dataAqcuisition>
			backBuffer[currentSample]= data;
1a0007ba:	4a0d      	ldr	r2, [pc, #52]	; (1a0007f0 <tickTimerHandler+0x5c>)
1a0007bc:	8813      	ldrh	r3, [r2, #0]
1a0007be:	b29b      	uxth	r3, r3
1a0007c0:	490c      	ldr	r1, [pc, #48]	; (1a0007f4 <tickTimerHandler+0x60>)
1a0007c2:	6809      	ldr	r1, [r1, #0]
1a0007c4:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a0007c8:	f821 0013 	strh.w	r0, [r1, r3, lsl #1]
			currentSample++;
1a0007cc:	8813      	ldrh	r3, [r2, #0]
1a0007ce:	3301      	adds	r3, #1
1a0007d0:	b29b      	uxth	r3, r3
1a0007d2:	8013      	strh	r3, [r2, #0]
1a0007d4:	e006      	b.n	1a0007e4 <tickTimerHandler+0x50>
		}
		else{
			currentSample=0;
1a0007d6:	2300      	movs	r3, #0
1a0007d8:	4a05      	ldr	r2, [pc, #20]	; (1a0007f0 <tickTimerHandler+0x5c>)
1a0007da:	8013      	strh	r3, [r2, #0]
			captureActive=0;
1a0007dc:	4a03      	ldr	r2, [pc, #12]	; (1a0007ec <tickTimerHandler+0x58>)
1a0007de:	7013      	strb	r3, [r2, #0]
1a0007e0:	4770      	bx	lr
1a0007e2:	4770      	bx	lr
		}
	}
}
1a0007e4:	b003      	add	sp, #12
1a0007e6:	f85d fb04 	ldr.w	pc, [sp], #4
1a0007ea:	bf00      	nop
1a0007ec:	100008c8 	.word	0x100008c8
1a0007f0:	100008ce 	.word	0x100008ce
1a0007f4:	100012ac 	.word	0x100012ac

1a0007f8 <tickTimerDacHandler>:
/**
 * Handler del TIMER1, maneja la transmision de datos por el DAC
 * frecuencia de interrupcion 44khz
 */
void tickTimerDacHandler( void *ptr ){
		if(transmissionStatus == INIT){
1a0007f8:	4b12      	ldr	r3, [pc, #72]	; (1a000844 <tickTimerDacHandler+0x4c>)
1a0007fa:	781b      	ldrb	r3, [r3, #0]
1a0007fc:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000800:	d11e      	bne.n	1a000840 <tickTimerDacHandler+0x48>
		if(currentTransmissionSample<VECTOR_SIZE){
1a000802:	4b11      	ldr	r3, [pc, #68]	; (1a000848 <tickTimerDacHandler+0x50>)
1a000804:	881b      	ldrh	r3, [r3, #0]
1a000806:	b29b      	uxth	r3, r3
1a000808:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
1a00080c:	d211      	bcs.n	1a000832 <tickTimerDacHandler+0x3a>
}
/**
 * Handler del TIMER1, maneja la transmision de datos por el DAC
 * frecuencia de interrupcion 44khz
 */
void tickTimerDacHandler( void *ptr ){
1a00080e:	b510      	push	{r4, lr}
		if(transmissionStatus == INIT){
		if(currentTransmissionSample<VECTOR_SIZE){
			DACPROXYCLIENT_mutate(transmitBuffer[currentTransmissionSample]);
1a000810:	4c0d      	ldr	r4, [pc, #52]	; (1a000848 <tickTimerDacHandler+0x50>)
1a000812:	8823      	ldrh	r3, [r4, #0]
1a000814:	b29b      	uxth	r3, r3
1a000816:	4a0d      	ldr	r2, [pc, #52]	; (1a00084c <tickTimerDacHandler+0x54>)
1a000818:	6812      	ldr	r2, [r2, #0]
1a00081a:	f832 0013 	ldrh.w	r0, [r2, r3, lsl #1]
1a00081e:	b280      	uxth	r0, r0
1a000820:	f7ff fe48 	bl	1a0004b4 <DACPROXYCLIENT_mutate>
			DACHARDWAREPROXY_marshal();
1a000824:	f7ff fe18 	bl	1a000458 <DACHARDWAREPROXY_marshal>
			currentTransmissionSample++;
1a000828:	8823      	ldrh	r3, [r4, #0]
1a00082a:	3301      	adds	r3, #1
1a00082c:	b29b      	uxth	r3, r3
1a00082e:	8023      	strh	r3, [r4, #0]
1a000830:	bd10      	pop	{r4, pc}
		}
		else{
			transmissionStatus = COMPLETE;
1a000832:	2201      	movs	r2, #1
1a000834:	4b03      	ldr	r3, [pc, #12]	; (1a000844 <tickTimerDacHandler+0x4c>)
1a000836:	701a      	strb	r2, [r3, #0]
			currentTransmissionSample = 0;
1a000838:	2200      	movs	r2, #0
1a00083a:	4b03      	ldr	r3, [pc, #12]	; (1a000848 <tickTimerDacHandler+0x50>)
1a00083c:	801a      	strh	r2, [r3, #0]
1a00083e:	4770      	bx	lr
1a000840:	4770      	bx	lr
1a000842:	bf00      	nop
1a000844:	10000000 	.word	0x10000000
1a000848:	100008ca 	.word	0x100008ca
1a00084c:	100016bc 	.word	0x100016bc

1a000850 <main>:
/*==================[declaraciones de funciones internas]====================*/
void tickTimerHandler( void *ptr );
void tickTimerDacHandler( void *ptr );
/*==================[declaraciones de funciones externas]====================*/
/*==================[funcion principal]======================================*/
int main( void ){
1a000850:	b500      	push	{lr}
1a000852:	b083      	sub	sp, #12
   /// Inicializacion y configuracion de la plataforma
   boardConfig();
1a000854:	f001 fc42 	bl	1a0020dc <boardInit>
   /// Inicializacion de UART_USB como salida de consola de debug
   debugPrintConfigUart( UART_USB, 115200 );
1a000858:	4c4f      	ldr	r4, [pc, #316]	; (1a000998 <main+0x148>)
1a00085a:	4620      	mov	r0, r4
1a00085c:	2103      	movs	r1, #3
1a00085e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
1a000862:	f001 fce5 	bl	1a002230 <printInitUart>
   debugPrintlnString( "UART_USB configurada.\n\r" );
1a000866:	7820      	ldrb	r0, [r4, #0]
1a000868:	494c      	ldr	r1, [pc, #304]	; (1a00099c <main+0x14c>)
1a00086a:	f001 fce9 	bl	1a002240 <printString>
1a00086e:	7820      	ldrb	r0, [r4, #0]
1a000870:	f001 fcea 	bl	1a002248 <printEnter>
   ///Inicializacion y configuracion del conversor digital-analogico DAC
   DACHARDWAREPROXY_initialize();
1a000874:	f7ff fdda 	bl	1a00042c <DACHARDWAREPROXY_initialize>
   DACHARDWAREPROXY_config();
1a000878:	f7ff fde0 	bl	1a00043c <DACHARDWAREPROXY_config>
   ///Inicializacion de la esctructura de manejo del ADC
   adcStruct.adcSampleRate = AUDIO_SAMPLE_RATE;
1a00087c:	4b48      	ldr	r3, [pc, #288]	; (1a0009a0 <main+0x150>)
1a00087e:	4a49      	ldr	r2, [pc, #292]	; (1a0009a4 <main+0x154>)
1a000880:	601a      	str	r2, [r3, #0]
   adcStruct.adcResolution = ADC_10BITS;
1a000882:	2500      	movs	r5, #0
1a000884:	719d      	strb	r5, [r3, #6]
   adcStruct.adcRightChannel = ADC_CH1;
1a000886:	2401      	movs	r4, #1
1a000888:	715c      	strb	r4, [r3, #5]
   adcStruct.adcLeftChannel = ADC_CH2;
1a00088a:	2602      	movs	r6, #2
1a00088c:	711e      	strb	r6, [r3, #4]
   //Inicializo la adquisicion de datos por el ADC
   initAqcuisition();
1a00088e:	f7ff fd37 	bl	1a000300 <initAqcuisition>
   configAqcuisition();
1a000892:	f7ff fd49 	bl	1a000328 <configAqcuisition>
   /// Led de debug
   gpioWrite(LED2,ON); // Board Alive
1a000896:	202c      	movs	r0, #44	; 0x2c
1a000898:	4621      	mov	r1, r4
1a00089a:	f001 fbad 	bl	1a001ff8 <gpioWrite>
   /// Inicializacion TIMER 1  y TIMER 2 desborde con una frecuencia de 44.1KHz
    Timer_Init( TIMER1 , ACQUISITION_FRECUENCY_44100HZ(), tickTimerHandler );
1a00089e:	2016      	movs	r0, #22
1a0008a0:	f001 fa44 	bl	1a001d2c <Timer_microsecondsToTicks>
1a0008a4:	4601      	mov	r1, r0
1a0008a6:	4620      	mov	r0, r4
1a0008a8:	4a3f      	ldr	r2, [pc, #252]	; (1a0009a8 <main+0x158>)
1a0008aa:	f001 f9b9 	bl	1a001c20 <Timer_Init>
    Timer_Init( TIMER2 , ACQUISITION_FRECUENCY_44100HZ(), tickTimerDacHandler );
1a0008ae:	2016      	movs	r0, #22
1a0008b0:	f001 fa3c 	bl	1a001d2c <Timer_microsecondsToTicks>
1a0008b4:	4601      	mov	r1, r0
1a0008b6:	4630      	mov	r0, r6
1a0008b8:	4a3c      	ldr	r2, [pc, #240]	; (1a0009ac <main+0x15c>)
1a0008ba:	f001 f9b1 	bl	1a001c20 <Timer_Init>
/**
 * Inicializacion del PING-PONG-BUFFER
 */
   bufferPtr = 0;
1a0008be:	4b3c      	ldr	r3, [pc, #240]	; (1a0009b0 <main+0x160>)
1a0008c0:	701d      	strb	r5, [r3, #0]
   activeBuffer = audioBuffer1;
1a0008c2:	4a3c      	ldr	r2, [pc, #240]	; (1a0009b4 <main+0x164>)
1a0008c4:	4b3c      	ldr	r3, [pc, #240]	; (1a0009b8 <main+0x168>)
1a0008c6:	601a      	str	r2, [r3, #0]
   backBuffer = audioBuffer2;
1a0008c8:	4a3c      	ldr	r2, [pc, #240]	; (1a0009bc <main+0x16c>)
1a0008ca:	4b3d      	ldr	r3, [pc, #244]	; (1a0009c0 <main+0x170>)
1a0008cc:	601a      	str	r2, [r3, #0]
   currentSample = 0;
1a0008ce:	4b3d      	ldr	r3, [pc, #244]	; (1a0009c4 <main+0x174>)
1a0008d0:	801d      	strh	r5, [r3, #0]
   captureActive = 1; ///Habilito la captura del ADC
1a0008d2:	4b3d      	ldr	r3, [pc, #244]	; (1a0009c8 <main+0x178>)
1a0008d4:	701c      	strb	r4, [r3, #0]
/**
 * Calculo de la cantidad de elementos del filtro y de la ganancai de continua
 */
   lpf.filterSize = sizeof(lpf15Khz)/sizeof(int16_t);
1a0008d6:	4c3d      	ldr	r4, [pc, #244]	; (1a0009cc <main+0x17c>)
1a0008d8:	200c      	movs	r0, #12
1a0008da:	7020      	strb	r0, [r4, #0]
   lpf.filterGain = continousFilterGain(lpf.filterSize, &lpf15Khz[0]);
1a0008dc:	493c      	ldr	r1, [pc, #240]	; (1a0009d0 <main+0x180>)
1a0008de:	f000 f8f3 	bl	1a000ac8 <continousFilterGain>
1a0008e2:	6060      	str	r0, [r4, #4]

   while( TRUE ){

	   ///Led loco para debug
	   if (!waitDelay.running){
1a0008e4:	4b3b      	ldr	r3, [pc, #236]	; (1a0009d4 <main+0x184>)
1a0008e6:	7c1b      	ldrb	r3, [r3, #16]
1a0008e8:	b943      	cbnz	r3, 1a0008fc <main+0xac>
			delayConfig(&waitDelay,WAIT_DELAY);
1a0008ea:	4c3a      	ldr	r4, [pc, #232]	; (1a0009d4 <main+0x184>)
1a0008ec:	4620      	mov	r0, r4
1a0008ee:	2232      	movs	r2, #50	; 0x32
1a0008f0:	2300      	movs	r3, #0
1a0008f2:	f001 fc6d 	bl	1a0021d0 <delayInit>
			delayRead(&waitDelay);
1a0008f6:	4620      	mov	r0, r4
1a0008f8:	f001 fc7a 	bl	1a0021f0 <delayRead>
		}
	   if (delayRead(&waitDelay)){
1a0008fc:	4835      	ldr	r0, [pc, #212]	; (1a0009d4 <main+0x184>)
1a0008fe:	f001 fc77 	bl	1a0021f0 <delayRead>
1a000902:	b118      	cbz	r0, 1a00090c <main+0xbc>
	   gpioToggle( LED );
1a000904:	4b34      	ldr	r3, [pc, #208]	; (1a0009d8 <main+0x188>)
1a000906:	7818      	ldrb	r0, [r3, #0]
1a000908:	f001 fbce 	bl	1a0020a8 <gpioToggle>
	   }
	   ///Se elimina el valor de continua del vector adquirido
	   eliminateContinous(VECTOR_SIZE, &activeBuffer[0], &firstOutputBuffer[0]);
1a00090c:	4c33      	ldr	r4, [pc, #204]	; (1a0009dc <main+0x18c>)
1a00090e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000912:	4b29      	ldr	r3, [pc, #164]	; (1a0009b8 <main+0x168>)
1a000914:	6819      	ldr	r1, [r3, #0]
1a000916:	4622      	mov	r2, r4
1a000918:	f000 f8b2 	bl	1a000a80 <eliminateContinous>

	   ///Se procesa el vector con el filtro definido
	   filterVectorProcessor(lpf.filterSize, lpf.filterGain, &lpf15Khz[0],VECTOR_SIZE,
1a00091c:	4b2b      	ldr	r3, [pc, #172]	; (1a0009cc <main+0x17c>)
1a00091e:	7818      	ldrb	r0, [r3, #0]
1a000920:	6859      	ldr	r1, [r3, #4]
1a000922:	9400      	str	r4, [sp, #0]
1a000924:	4c2e      	ldr	r4, [pc, #184]	; (1a0009e0 <main+0x190>)
1a000926:	9401      	str	r4, [sp, #4]
1a000928:	4a29      	ldr	r2, [pc, #164]	; (1a0009d0 <main+0x180>)
1a00092a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
1a00092e:	f000 f8db 	bl	1a000ae8 <filterVectorProcessor>
			   	   	   	     &firstOutputBuffer[0], &secondOutputBuffer[0]);

	   ///Se suma el nivel de continua
	   sumContinous(VECTOR_SIZE, &secondOutputBuffer[0], &outVector[0]);
1a000932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a000936:	4621      	mov	r1, r4
1a000938:	4a2a      	ldr	r2, [pc, #168]	; (1a0009e4 <main+0x194>)
1a00093a:	f000 f8b3 	bl	1a000aa4 <sumContinous>

	   ///Si la transmision previa del DAC fue completada se inicia una nueva
	   /// ya que se termino de procesar el vector posterior
	   if (transmissionStatus == COMPLETE){
1a00093e:	4b2a      	ldr	r3, [pc, #168]	; (1a0009e8 <main+0x198>)
1a000940:	781b      	ldrb	r3, [r3, #0]
1a000942:	b2db      	uxtb	r3, r3
1a000944:	2b01      	cmp	r3, #1
1a000946:	d105      	bne.n	1a000954 <main+0x104>
		   transmissionStatus = INIT;
1a000948:	2200      	movs	r2, #0
1a00094a:	4b27      	ldr	r3, [pc, #156]	; (1a0009e8 <main+0x198>)
1a00094c:	701a      	strb	r2, [r3, #0]
		   transmitBuffer = outVector;
1a00094e:	4a25      	ldr	r2, [pc, #148]	; (1a0009e4 <main+0x194>)
1a000950:	4b26      	ldr	r3, [pc, #152]	; (1a0009ec <main+0x19c>)
1a000952:	601a      	str	r2, [r3, #0]
	   }

	   /// Mientras se estan adquiriendo datos no se hace el PING-PONG

	   while(captureActive==1){
1a000954:	4b1c      	ldr	r3, [pc, #112]	; (1a0009c8 <main+0x178>)
1a000956:	781b      	ldrb	r3, [r3, #0]
1a000958:	b2db      	uxtb	r3, r3
1a00095a:	2b01      	cmp	r3, #1
1a00095c:	d0fa      	beq.n	1a000954 <main+0x104>
	   }

	   /// Se ejecuta la conmutacion de los buffer. PING-PONG!!
	   if(bufferPtr==0){
1a00095e:	4b14      	ldr	r3, [pc, #80]	; (1a0009b0 <main+0x160>)
1a000960:	781b      	ldrb	r3, [r3, #0]
1a000962:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000966:	d109      	bne.n	1a00097c <main+0x12c>
		   bufferPtr=1;
1a000968:	2201      	movs	r2, #1
1a00096a:	4b11      	ldr	r3, [pc, #68]	; (1a0009b0 <main+0x160>)
1a00096c:	701a      	strb	r2, [r3, #0]
		   activeBuffer=audioBuffer2;
1a00096e:	4a13      	ldr	r2, [pc, #76]	; (1a0009bc <main+0x16c>)
1a000970:	4b11      	ldr	r3, [pc, #68]	; (1a0009b8 <main+0x168>)
1a000972:	601a      	str	r2, [r3, #0]
		   backBuffer=audioBuffer1;
1a000974:	4a0f      	ldr	r2, [pc, #60]	; (1a0009b4 <main+0x164>)
1a000976:	4b12      	ldr	r3, [pc, #72]	; (1a0009c0 <main+0x170>)
1a000978:	601a      	str	r2, [r3, #0]
1a00097a:	e008      	b.n	1a00098e <main+0x13e>
	   }
	   else{
		   bufferPtr=0;
1a00097c:	2200      	movs	r2, #0
1a00097e:	4b0c      	ldr	r3, [pc, #48]	; (1a0009b0 <main+0x160>)
1a000980:	701a      	strb	r2, [r3, #0]
		   activeBuffer=audioBuffer1;
1a000982:	4a0c      	ldr	r2, [pc, #48]	; (1a0009b4 <main+0x164>)
1a000984:	4b0c      	ldr	r3, [pc, #48]	; (1a0009b8 <main+0x168>)
1a000986:	601a      	str	r2, [r3, #0]
		   backBuffer=audioBuffer2;
1a000988:	4a0c      	ldr	r2, [pc, #48]	; (1a0009bc <main+0x16c>)
1a00098a:	4b0d      	ldr	r3, [pc, #52]	; (1a0009c0 <main+0x170>)
1a00098c:	601a      	str	r2, [r3, #0]
	   }

	   /// Se inicia una nueva adquisicion de datos
	   captureActive = 1;
1a00098e:	2201      	movs	r2, #1
1a000990:	4b0d      	ldr	r3, [pc, #52]	; (1a0009c8 <main+0x178>)
1a000992:	701a      	strb	r2, [r3, #0]
   }
1a000994:	e7a6      	b.n	1a0008e4 <main+0x94>
1a000996:	bf00      	nop
1a000998:	100008cc 	.word	0x100008cc
1a00099c:	1a0028e4 	.word	0x1a0028e4
1a0009a0:	10000aa0 	.word	0x10000aa0
1a0009a4:	00061a80 	.word	0x00061a80
1a0009a8:	1a000795 	.word	0x1a000795
1a0009ac:	1a0007f9 	.word	0x1a0007f9
1a0009b0:	100008cd 	.word	0x100008cd
1a0009b4:	100012b0 	.word	0x100012b0
1a0009b8:	100012a8 	.word	0x100012a8
1a0009bc:	10001e90 	.word	0x10001e90
1a0009c0:	100012ac 	.word	0x100012ac
1a0009c4:	100008ce 	.word	0x100008ce
1a0009c8:	100008c8 	.word	0x100008c8
1a0009cc:	100012a0 	.word	0x100012a0
1a0009d0:	10000004 	.word	0x10000004
1a0009d4:	10001288 	.word	0x10001288
1a0009d8:	10000001 	.word	0x10000001
1a0009dc:	10001aa8 	.word	0x10001aa8
1a0009e0:	10000ab0 	.word	0x10000ab0
1a0009e4:	10000e9c 	.word	0x10000e9c
1a0009e8:	10000000 	.word	0x10000000
1a0009ec:	100016bc 	.word	0x100016bc

1a0009f0 <shiftDelayLine>:
* @param x puntero al vector de entradas del filtro FIR
* @return none
*/
void shiftDelayLine(uint8_t htaps, int16_t *x){
	uint8_t i;
	for(i = htaps-1; i>0; i--){
1a0009f0:	3801      	subs	r0, #1
1a0009f2:	b2c0      	uxtb	r0, r0
1a0009f4:	e008      	b.n	1a000a08 <shiftDelayLine+0x18>
		x[i]=x[i-1];
1a0009f6:	f100 4300 	add.w	r3, r0, #2147483648	; 0x80000000
1a0009fa:	3b01      	subs	r3, #1
1a0009fc:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
1a000a00:	f821 3010 	strh.w	r3, [r1, r0, lsl #1]
* @param x puntero al vector de entradas del filtro FIR
* @return none
*/
void shiftDelayLine(uint8_t htaps, int16_t *x){
	uint8_t i;
	for(i = htaps-1; i>0; i--){
1a000a04:	3801      	subs	r0, #1
1a000a06:	b2c0      	uxtb	r0, r0
1a000a08:	2800      	cmp	r0, #0
1a000a0a:	d1f4      	bne.n	1a0009f6 <shiftDelayLine+0x6>
		x[i]=x[i-1];
	}
}
1a000a0c:	4770      	bx	lr
1a000a0e:	bf00      	nop

1a000a10 <filterProcessor>:
* @param h puntero al vector de coeficientes del filtro FIR
* @param inValue valor de entrada a ser filtrado
* @return valor filtrado
*/
int16_t filterProcessor(uint8_t htaps, int32_t continousGain,
						int16_t *x, int16_t *h, int16_t inValue){
1a000a10:	b570      	push	{r4, r5, r6, lr}
1a000a12:	ed2d 8b02 	vpush	{d8}
1a000a16:	b082      	sub	sp, #8
1a000a18:	4605      	mov	r5, r0
1a000a1a:	ee08 1a10 	vmov	s16, r1
1a000a1e:	4614      	mov	r4, r2
1a000a20:	461e      	mov	r6, r3
	uint8_t i;
	float impulseResponse = 0, filterAcumulator = 0, input = 0;
	shiftDelayLine(htaps,&x[0]);
1a000a22:	4611      	mov	r1, r2
1a000a24:	f7ff ffe4 	bl	1a0009f0 <shiftDelayLine>
	x[0] = inValue;
1a000a28:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
1a000a2c:	8023      	strh	r3, [r4, #0]
* @return valor filtrado
*/
int16_t filterProcessor(uint8_t htaps, int32_t continousGain,
						int16_t *x, int16_t *h, int16_t inValue){
	uint8_t i;
	float impulseResponse = 0, filterAcumulator = 0, input = 0;
1a000a2e:	eddf 6a13 	vldr	s13, [pc, #76]	; 1a000a7c <filterProcessor+0x6c>
	shiftDelayLine(htaps,&x[0]);
	x[0] = inValue;

	for(i=0; i<htaps; i++){
1a000a32:	2300      	movs	r3, #0
1a000a34:	e015      	b.n	1a000a62 <filterProcessor+0x52>
		input = (float)(x[i]);
1a000a36:	f934 2013 	ldrsh.w	r2, [r4, r3, lsl #1]
1a000a3a:	ee07 2a90 	vmov	s15, r2
1a000a3e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
		impulseResponse = (float)(h[i])/(float)(continousGain);
1a000a42:	f936 2013 	ldrsh.w	r2, [r6, r3, lsl #1]
1a000a46:	ee07 2a90 	vmov	s15, r2
1a000a4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000a4e:	eeb8 6ac8 	vcvt.f32.s32	s12, s16
1a000a52:	eec7 7a86 	vdiv.f32	s15, s15, s12
		filterAcumulator += input*impulseResponse;
1a000a56:	ee67 7a27 	vmul.f32	s15, s14, s15
1a000a5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
	uint8_t i;
	float impulseResponse = 0, filterAcumulator = 0, input = 0;
	shiftDelayLine(htaps,&x[0]);
	x[0] = inValue;

	for(i=0; i<htaps; i++){
1a000a5e:	3301      	adds	r3, #1
1a000a60:	b2db      	uxtb	r3, r3
1a000a62:	42ab      	cmp	r3, r5
1a000a64:	d3e7      	bcc.n	1a000a36 <filterProcessor+0x26>
		input = (float)(x[i]);
		impulseResponse = (float)(h[i])/(float)(continousGain);
		filterAcumulator += input*impulseResponse;
	}
	return (((int16_t)(filterAcumulator)));
1a000a66:	eefd 6ae6 	vcvt.s32.f32	s13, s13
}
1a000a6a:	edcd 6a01 	vstr	s13, [sp, #4]
1a000a6e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
1a000a72:	b002      	add	sp, #8
1a000a74:	ecbd 8b02 	vpop	{d8}
1a000a78:	bd70      	pop	{r4, r5, r6, pc}
1a000a7a:	bf00      	nop
1a000a7c:	00000000 	.word	0x00000000

1a000a80 <eliminateContinous>:
* @param inputVector puntero al primer byte de los elementos del vector de entrada
* @param outputVector puntero al primer byte de los elementos del vector de salida
* @return 1 cuando se completa el procesamiento del vector
*/
uint8_t eliminateContinous(uint16_t inputLength, uint16_t *inputVector,
						   int16_t *outputVector){
1a000a80:	b410      	push	{r4}
	uint16_t counter;
	for(counter = 0; counter < inputLength; counter++){
1a000a82:	2300      	movs	r3, #0
1a000a84:	e007      	b.n	1a000a96 <eliminateContinous+0x16>
		outputVector[counter] = ((int16_t)(inputVector[counter]))-512;
1a000a86:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
1a000a8a:	f5a4 7400 	sub.w	r4, r4, #512	; 0x200
1a000a8e:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
* @return 1 cuando se completa el procesamiento del vector
*/
uint8_t eliminateContinous(uint16_t inputLength, uint16_t *inputVector,
						   int16_t *outputVector){
	uint16_t counter;
	for(counter = 0; counter < inputLength; counter++){
1a000a92:	3301      	adds	r3, #1
1a000a94:	b29b      	uxth	r3, r3
1a000a96:	4283      	cmp	r3, r0
1a000a98:	d3f5      	bcc.n	1a000a86 <eliminateContinous+0x6>
		outputVector[counter] = ((int16_t)(inputVector[counter]))-512;
			}
	return 1;
}
1a000a9a:	2001      	movs	r0, #1
1a000a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000aa0:	4770      	bx	lr
1a000aa2:	bf00      	nop

1a000aa4 <sumContinous>:
* @param inputVector puntero al primer byte de los elementos del vector de entrada
* @param outputVector puntero al primer byte de los elementos del vector de salida
* @return 1 cuando se completa el procesamiento del vector
*/
uint8_t sumContinous(uint16_t inputLength, uint16_t *inputVector,
						   int16_t *outputVector){
1a000aa4:	b410      	push	{r4}
	uint16_t counter;
	for(counter = 0; counter < inputLength; counter++){
1a000aa6:	2300      	movs	r3, #0
1a000aa8:	e007      	b.n	1a000aba <sumContinous+0x16>
		outputVector[counter] = ((int16_t)(inputVector[counter]))+512;
1a000aaa:	f831 4013 	ldrh.w	r4, [r1, r3, lsl #1]
1a000aae:	f504 7400 	add.w	r4, r4, #512	; 0x200
1a000ab2:	f822 4013 	strh.w	r4, [r2, r3, lsl #1]
* @return 1 cuando se completa el procesamiento del vector
*/
uint8_t sumContinous(uint16_t inputLength, uint16_t *inputVector,
						   int16_t *outputVector){
	uint16_t counter;
	for(counter = 0; counter < inputLength; counter++){
1a000ab6:	3301      	adds	r3, #1
1a000ab8:	b29b      	uxth	r3, r3
1a000aba:	4283      	cmp	r3, r0
1a000abc:	d3f5      	bcc.n	1a000aaa <sumContinous+0x6>
		outputVector[counter] = ((int16_t)(inputVector[counter]))+512;
			}
	return 1;
}
1a000abe:	2001      	movs	r0, #1
1a000ac0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ac4:	4770      	bx	lr
1a000ac6:	bf00      	nop

1a000ac8 <continousFilterGain>:
* @brief Funcion que calcula la ganancia de continua del filtro FIR
* @param filterLength cantidad de elementos del filtro FIR
* @param coeffVector puntero al vector de coeficientes del filtro FIR
* @return filterAcumulator ganancia de continua del filtro
*/
int32_t continousFilterGain(uint8_t filterLength,int16_t *coeffVector){
1a000ac8:	b410      	push	{r4}
	int32_t filterAcumulator = 0;
	uint16_t filterCounter = 0;
	for(filterCounter = 0; filterCounter < filterLength; filterCounter++){
1a000aca:	2300      	movs	r3, #0
* @param filterLength cantidad de elementos del filtro FIR
* @param coeffVector puntero al vector de coeficientes del filtro FIR
* @return filterAcumulator ganancia de continua del filtro
*/
int32_t continousFilterGain(uint8_t filterLength,int16_t *coeffVector){
	int32_t filterAcumulator = 0;
1a000acc:	461a      	mov	r2, r3
	uint16_t filterCounter = 0;
	for(filterCounter = 0; filterCounter < filterLength; filterCounter++){
1a000ace:	e004      	b.n	1a000ada <continousFilterGain+0x12>
		filterAcumulator += coeffVector[filterCounter];
1a000ad0:	f931 4013 	ldrsh.w	r4, [r1, r3, lsl #1]
1a000ad4:	4422      	add	r2, r4
* @return filterAcumulator ganancia de continua del filtro
*/
int32_t continousFilterGain(uint8_t filterLength,int16_t *coeffVector){
	int32_t filterAcumulator = 0;
	uint16_t filterCounter = 0;
	for(filterCounter = 0; filterCounter < filterLength; filterCounter++){
1a000ad6:	3301      	adds	r3, #1
1a000ad8:	b29b      	uxth	r3, r3
1a000ada:	b284      	uxth	r4, r0
1a000adc:	429c      	cmp	r4, r3
1a000ade:	d8f7      	bhi.n	1a000ad0 <continousFilterGain+0x8>
		filterAcumulator += coeffVector[filterCounter];
			}
	return filterAcumulator;
}
1a000ae0:	4610      	mov	r0, r2
1a000ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ae6:	4770      	bx	lr

1a000ae8 <filterVectorProcessor>:
* @param outputVector  vector de salida filtrado
* @return 1 cuando se termina el procesamiento del vector de entrada
*/
uint8_t filterVectorProcessor(uint8_t filterLength, int32_t continousGain,
							  int16_t *coeffVector, uint16_t inputLength,
							  int16_t *inputVector, int16_t *outputVector){
1a000ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a000aec:	b082      	sub	sp, #8
1a000aee:	4682      	mov	sl, r0
1a000af0:	4689      	mov	r9, r1
1a000af2:	4690      	mov	r8, r2
1a000af4:	461d      	mov	r5, r3
1a000af6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
1a000af8:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
	uint16_t i;

	for (i=0; i<inputLength ;i++){
1a000afa:	2400      	movs	r4, #0
1a000afc:	e00c      	b.n	1a000b18 <filterVectorProcessor+0x30>
		outputVector[i] = filterProcessor(filterLength, continousGain, &xBuffer[0],
1a000afe:	f937 3014 	ldrsh.w	r3, [r7, r4, lsl #1]
1a000b02:	9300      	str	r3, [sp, #0]
1a000b04:	4650      	mov	r0, sl
1a000b06:	4649      	mov	r1, r9
1a000b08:	4a06      	ldr	r2, [pc, #24]	; (1a000b24 <filterVectorProcessor+0x3c>)
1a000b0a:	4643      	mov	r3, r8
1a000b0c:	f7ff ff80 	bl	1a000a10 <filterProcessor>
1a000b10:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
uint8_t filterVectorProcessor(uint8_t filterLength, int32_t continousGain,
							  int16_t *coeffVector, uint16_t inputLength,
							  int16_t *inputVector, int16_t *outputVector){
	uint16_t i;

	for (i=0; i<inputLength ;i++){
1a000b14:	3401      	adds	r4, #1
1a000b16:	b2a4      	uxth	r4, r4
1a000b18:	42ac      	cmp	r4, r5
1a000b1a:	d3f0      	bcc.n	1a000afe <filterVectorProcessor+0x16>
		outputVector[i] = filterProcessor(filterLength, continousGain, &xBuffer[0],
						  &coeffVector[0], inputVector[i]);
	}
	return 1;
}
1a000b1c:	2001      	movs	r0, #1
1a000b1e:	b002      	add	sp, #8
1a000b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a000b24:	100008d0 	.word	0x100008d0

1a000b28 <Board_LED_Init>:
#define GPIO_BUTTONS_SIZE   (sizeof(GpioButtons) / sizeof(struct gpio_t))
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
1a000b28:	b470      	push	{r4, r5, r6}
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000b2a:	2200      	movs	r2, #0
1a000b2c:	e014      	b.n	1a000b58 <Board_LED_Init+0x30>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a000b2e:	4b0c      	ldr	r3, [pc, #48]	; (1a000b60 <Board_LED_Init+0x38>)
1a000b30:	f813 4012 	ldrb.w	r4, [r3, r2, lsl #1]
1a000b34:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a000b38:	7859      	ldrb	r1, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a000b3a:	480a      	ldr	r0, [pc, #40]	; (1a000b64 <Board_LED_Init+0x3c>)
1a000b3c:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a000b40:	f850 6025 	ldr.w	r6, [r0, r5, lsl #2]
1a000b44:	2301      	movs	r3, #1
1a000b46:	408b      	lsls	r3, r1
1a000b48:	4333      	orrs	r3, r6
1a000b4a:	f840 3025 	str.w	r3, [r0, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a000b4e:	eb01 1144 	add.w	r1, r1, r4, lsl #5
1a000b52:	2300      	movs	r3, #0
1a000b54:	5443      	strb	r3, [r0, r1]
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
    for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a000b56:	3201      	adds	r2, #1
1a000b58:	2a05      	cmp	r2, #5
1a000b5a:	d9e8      	bls.n	1a000b2e <Board_LED_Init+0x6>
        const struct gpio_t *io = &GpioLeds[i];
        Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
        Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
    }
}
1a000b5c:	bc70      	pop	{r4, r5, r6}
1a000b5e:	4770      	bx	lr
1a000b60:	1a002920 	.word	0x1a002920
1a000b64:	400f4000 	.word	0x400f4000

1a000b68 <Board_TEC_Init>:


static void Board_TEC_Init()
{
1a000b68:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000b6a:	2300      	movs	r3, #0
1a000b6c:	e011      	b.n	1a000b92 <Board_TEC_Init+0x2a>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000b6e:	490b      	ldr	r1, [pc, #44]	; (1a000b9c <Board_TEC_Init+0x34>)
1a000b70:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000b74:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000b78:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000b7a:	4c09      	ldr	r4, [pc, #36]	; (1a000ba0 <Board_TEC_Init+0x38>)
1a000b7c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000b80:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000b84:	2101      	movs	r1, #1
1a000b86:	40a9      	lsls	r1, r5
1a000b88:	ea20 0101 	bic.w	r1, r0, r1
1a000b8c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_TEC_Init()
{
    for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000b90:	3301      	adds	r3, #1
1a000b92:	2b03      	cmp	r3, #3
1a000b94:	d9eb      	bls.n	1a000b6e <Board_TEC_Init+0x6>
        const struct gpio_t *io = &GpioButtons[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000b96:	bc30      	pop	{r4, r5}
1a000b98:	4770      	bx	lr
1a000b9a:	bf00      	nop
1a000b9c:	1a002918 	.word	0x1a002918
1a000ba0:	400f4000 	.word	0x400f4000

1a000ba4 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
1a000ba4:	b430      	push	{r4, r5}
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000ba6:	2300      	movs	r3, #0
1a000ba8:	e011      	b.n	1a000bce <Board_GPIO_Init+0x2a>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000baa:	490b      	ldr	r1, [pc, #44]	; (1a000bd8 <Board_GPIO_Init+0x34>)
1a000bac:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000bb0:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000bb4:	784d      	ldrb	r5, [r1, #1]
1a000bb6:	4c09      	ldr	r4, [pc, #36]	; (1a000bdc <Board_GPIO_Init+0x38>)
1a000bb8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000bbc:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
1a000bc0:	2101      	movs	r1, #1
1a000bc2:	40a9      	lsls	r1, r5
1a000bc4:	ea20 0101 	bic.w	r1, r0, r1
1a000bc8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
}


static void Board_GPIO_Init()
{
    for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000bcc:	3301      	adds	r3, #1
1a000bce:	2b08      	cmp	r3, #8
1a000bd0:	d9eb      	bls.n	1a000baa <Board_GPIO_Init+0x6>
        const struct gpio_t *io = &GpioPorts[i];
        Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
    }
}
1a000bd2:	bc30      	pop	{r4, r5}
1a000bd4:	4770      	bx	lr
1a000bd6:	bf00      	nop
1a000bd8:	1a0028fc 	.word	0x1a0028fc
1a000bdc:	400f4000 	.word	0x400f4000

1a000be0 <Board_SPI_Init>:
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
}


static void Board_SPI_Init()
{
1a000be0:	b510      	push	{r4, lr}
    Chip_SSP_Init(LPC_SSP1);
1a000be2:	4c0b      	ldr	r4, [pc, #44]	; (1a000c10 <Board_SPI_Init+0x30>)
1a000be4:	4620      	mov	r0, r4
1a000be6:	f000 fed5 	bl	1a001994 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000bea:	6863      	ldr	r3, [r4, #4]
1a000bec:	f023 0304 	bic.w	r3, r3, #4
1a000bf0:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000bf2:	6823      	ldr	r3, [r4, #0]
1a000bf4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a000bf8:	f043 0307 	orr.w	r3, r3, #7
1a000bfc:	6023      	str	r3, [r4, #0]
    Chip_SSP_Set_Mode(LPC_SSP1, BOARD_SPI_MODE);
    Chip_SSP_SetFormat(LPC_SSP1, BOARD_SPI_BITS, BOARD_SPI_FORMAT,
                       BOARD_SPI_POLARITY);
    Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a000bfe:	4620      	mov	r0, r4
1a000c00:	4904      	ldr	r1, [pc, #16]	; (1a000c14 <Board_SPI_Init+0x34>)
1a000c02:	f000 fea7 	bl	1a001954 <Chip_SSP_SetBitRate>
 * @param	pSSP		: The base of SSP peripheral on the chip
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Enable(LPC_SSP_T *pSSP)
{
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a000c06:	6863      	ldr	r3, [r4, #4]
1a000c08:	f043 0302 	orr.w	r3, r3, #2
1a000c0c:	6063      	str	r3, [r4, #4]
1a000c0e:	bd10      	pop	{r4, pc}
1a000c10:	400c5000 	.word	0x400c5000
1a000c14:	000186a0 	.word	0x000186a0

1a000c18 <Board_I2C_Init>:
    }
}


static void Board_I2C_Init()
{
1a000c18:	b508      	push	{r3, lr}
    Chip_I2C_Init(I2C0);
1a000c1a:	2000      	movs	r0, #0
1a000c1c:	f000 f8ee 	bl	1a000dfc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a000c20:	f640 0208 	movw	r2, #2056	; 0x808
1a000c24:	4b03      	ldr	r3, [pc, #12]	; (1a000c34 <Board_I2C_Init+0x1c>)
1a000c26:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
    Chip_SCU_I2C0PinConfig(BOARD_I2C_MODE);
    Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000c2a:	2000      	movs	r0, #0
1a000c2c:	4902      	ldr	r1, [pc, #8]	; (1a000c38 <Board_I2C_Init+0x20>)
1a000c2e:	f000 f8f7 	bl	1a000e20 <Chip_I2C_SetClockRate>
1a000c32:	bd08      	pop	{r3, pc}
1a000c34:	40086000 	.word	0x40086000
1a000c38:	000f4240 	.word	0x000f4240

1a000c3c <Board_ADC_Init>:
    Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000c3c:	b510      	push	{r4, lr}
1a000c3e:	b082      	sub	sp, #8
    ADC_CLOCK_SETUP_T cs;

    Chip_ADC_Init(LPC_ADC0, &cs);
1a000c40:	4c08      	ldr	r4, [pc, #32]	; (1a000c64 <Board_ADC_Init+0x28>)
1a000c42:	4620      	mov	r0, r4
1a000c44:	4669      	mov	r1, sp
1a000c46:	f000 fa0b 	bl	1a001060 <Chip_ADC_Init>
    Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000c4a:	4620      	mov	r0, r4
1a000c4c:	4669      	mov	r1, sp
1a000c4e:	4a06      	ldr	r2, [pc, #24]	; (1a000c68 <Board_ADC_Init+0x2c>)
1a000c50:	f000 fa66 	bl	1a001120 <Chip_ADC_SetSampleRate>
    Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000c54:	4620      	mov	r0, r4
1a000c56:	4669      	mov	r1, sp
1a000c58:	2200      	movs	r2, #0
1a000c5a:	f000 fa7b 	bl	1a001154 <Chip_ADC_SetResolution>
}
1a000c5e:	b002      	add	sp, #8
1a000c60:	bd10      	pop	{r4, pc}
1a000c62:	bf00      	nop
1a000c64:	400e3000 	.word	0x400e3000
1a000c68:	00061a80 	.word	0x00061a80

1a000c6c <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000c6c:	b510      	push	{r4, lr}
    Chip_UART_Init(DEBUG_UART);
1a000c6e:	4c07      	ldr	r4, [pc, #28]	; (1a000c8c <Board_Debug_Init+0x20>)
1a000c70:	4620      	mov	r0, r4
1a000c72:	f000 f903 	bl	1a000e7c <Chip_UART_Init>
    Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000c76:	4620      	mov	r0, r4
1a000c78:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000c7c:	f000 f948 	bl	1a000f10 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000c80:	2303      	movs	r3, #3
1a000c82:	60e3      	str	r3, [r4, #12]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a000c84:	2301      	movs	r3, #1
1a000c86:	65e3      	str	r3, [r4, #92]	; 0x5c
1a000c88:	bd10      	pop	{r4, pc}
1a000c8a:	bf00      	nop
1a000c8c:	400c1000 	.word	0x400c1000

1a000c90 <Board_Init>:
    Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000c90:	b508      	push	{r3, lr}
   DEBUGINIT();
1a000c92:	f7ff ffeb 	bl	1a000c6c <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000c96:	4808      	ldr	r0, [pc, #32]	; (1a000cb8 <Board_Init+0x28>)
1a000c98:	f000 fd92 	bl	1a0017c0 <Chip_GPIO_Init>

   Board_LED_Init();
1a000c9c:	f7ff ff44 	bl	1a000b28 <Board_LED_Init>
   Board_TEC_Init();
1a000ca0:	f7ff ff62 	bl	1a000b68 <Board_TEC_Init>
   Board_SPI_Init();
1a000ca4:	f7ff ff9c 	bl	1a000be0 <Board_SPI_Init>
   Board_GPIO_Init();
1a000ca8:	f7ff ff7c 	bl	1a000ba4 <Board_GPIO_Init>
   Board_I2C_Init();
1a000cac:	f7ff ffb4 	bl	1a000c18 <Board_I2C_Init>
   Board_ADC_Init();
1a000cb0:	f7ff ffc4 	bl	1a000c3c <Board_ADC_Init>
1a000cb4:	bd08      	pop	{r3, pc}
1a000cb6:	bf00      	nop
1a000cb8:	400f4000 	.word	0x400f4000

1a000cbc <SystemInit>:
 * Public functions
 ****************************************************************************/

/* Set up and initialize hardware prior to call to main */
void SystemInit(void)
{
1a000cbc:	b508      	push	{r3, lr}
   unsigned int *pSCB_VTOR = (unsigned int *) 0xE000ED08;

   extern void *g_pfnVectors;

   *pSCB_VTOR = (unsigned int) &g_pfnVectors;
1a000cbe:	4b04      	ldr	r3, [pc, #16]	; (1a000cd0 <SystemInit+0x14>)
1a000cc0:	4a04      	ldr	r2, [pc, #16]	; (1a000cd4 <SystemInit+0x18>)
1a000cc2:	601a      	str	r2, [r3, #0]

#if defined(__FPU_PRESENT) && __FPU_PRESENT == 1
   fpuInit();
1a000cc4:	f000 f85e 	bl	1a000d84 <fpuInit>
#endif

   /* Board specific SystemInit */
   Board_SystemInit();
1a000cc8:	f000 f856 	bl	1a000d78 <Board_SystemInit>
1a000ccc:	bd08      	pop	{r3, pc}
1a000cce:	bf00      	nop
1a000cd0:	e000ed08 	.word	0xe000ed08
1a000cd4:	1a000000 	.word	0x1a000000

1a000cd8 <Board_SetupMuxing>:
    #endif
};


void Board_SetupMuxing(void)
{
1a000cd8:	b410      	push	{r4}
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000cda:	2300      	movs	r3, #0
1a000cdc:	e00c      	b.n	1a000cf8 <Board_SetupMuxing+0x20>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000cde:	4a09      	ldr	r2, [pc, #36]	; (1a000d04 <Board_SetupMuxing+0x2c>)
1a000ce0:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a000ce4:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a000ce8:	784a      	ldrb	r2, [r1, #1]
1a000cea:	8848      	ldrh	r0, [r1, #2]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000cec:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a000cf0:	4905      	ldr	r1, [pc, #20]	; (1a000d08 <Board_SetupMuxing+0x30>)
1a000cf2:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000cf6:	3301      	adds	r3, #1
1a000cf8:	2b1c      	cmp	r3, #28
1a000cfa:	d9f0      	bls.n	1a000cde <Board_SetupMuxing+0x6>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000cfc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000d00:	4770      	bx	lr
1a000d02:	bf00      	nop
1a000d04:	1a002930 	.word	0x1a002930
1a000d08:	40086000 	.word	0x40086000

1a000d0c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a000d0c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a000d0e:	4a17      	ldr	r2, [pc, #92]	; (1a000d6c <Board_SetupClocking+0x60>)
1a000d10:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d18:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d1c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a000d20:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a000d24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000d28:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000d2c:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000d30:	2006      	movs	r0, #6
1a000d32:	490f      	ldr	r1, [pc, #60]	; (1a000d70 <Board_SetupClocking+0x64>)
1a000d34:	2201      	movs	r2, #1
1a000d36:	f000 fd45 	bl	1a0017c4 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000d3a:	2400      	movs	r4, #0
1a000d3c:	e00a      	b.n	1a000d54 <Board_SetupClocking+0x48>
    {
        const struct CLK_BASE_STATES *c = &InitClkStates[i];
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a000d3e:	4a0d      	ldr	r2, [pc, #52]	; (1a000d74 <Board_SetupClocking+0x68>)
1a000d40:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a000d44:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a000d48:	7859      	ldrb	r1, [r3, #1]
1a000d4a:	789a      	ldrb	r2, [r3, #2]
1a000d4c:	2301      	movs	r3, #1
1a000d4e:	f000 fc4b 	bl	1a0015e8 <Chip_Clock_SetBaseClock>
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000d52:	3401      	adds	r4, #1
1a000d54:	2c00      	cmp	r4, #0
1a000d56:	d0f2      	beq.n	1a000d3e <Board_SetupClocking+0x32>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000d58:	4b04      	ldr	r3, [pc, #16]	; (1a000d6c <Board_SetupClocking+0x60>)
1a000d5a:	685a      	ldr	r2, [r3, #4]
1a000d5c:	f022 020c 	bic.w	r2, r2, #12
1a000d60:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000d62:	685a      	ldr	r2, [r3, #4]
1a000d64:	f042 0203 	orr.w	r2, r2, #3
1a000d68:	605a      	str	r2, [r3, #4]
1a000d6a:	bd10      	pop	{r4, pc}
1a000d6c:	40043000 	.word	0x40043000
1a000d70:	0c28cb00 	.word	0x0c28cb00
1a000d74:	1a00292c 	.word	0x1a00292c

1a000d78 <Board_SystemInit>:
}


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000d78:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000d7a:	f7ff ffad 	bl	1a000cd8 <Board_SetupMuxing>
    Board_SetupClocking();
1a000d7e:	f7ff ffc5 	bl	1a000d0c <Board_SetupClocking>
1a000d82:	bd08      	pop	{r3, pc}

1a000d84 <fpuInit>:
 * Public functions
 ****************************************************************************/

/* Early initialization of the FPU */
void fpuInit(void)
{
1a000d84:	b084      	sub	sp, #16
	volatile uint32_t Cpacr;
	volatile uint32_t Mvfr0;
	volatile uint32_t Mvfr1;
	char vfpPresent = 0;

	Mvfr0 = *regMvfr0;
1a000d86:	4b10      	ldr	r3, [pc, #64]	; (1a000dc8 <fpuInit+0x44>)
1a000d88:	681b      	ldr	r3, [r3, #0]
1a000d8a:	9302      	str	r3, [sp, #8]
	Mvfr1 = *regMvfr1;
1a000d8c:	4b0f      	ldr	r3, [pc, #60]	; (1a000dcc <fpuInit+0x48>)
1a000d8e:	681b      	ldr	r3, [r3, #0]
1a000d90:	9301      	str	r3, [sp, #4]

	vfpPresent = ((SCB_MVFR0_RESET == Mvfr0) && (SCB_MVFR1_RESET == Mvfr1));
1a000d92:	9a02      	ldr	r2, [sp, #8]
1a000d94:	4b0e      	ldr	r3, [pc, #56]	; (1a000dd0 <fpuInit+0x4c>)
1a000d96:	429a      	cmp	r2, r3
1a000d98:	d105      	bne.n	1a000da6 <fpuInit+0x22>
1a000d9a:	9a01      	ldr	r2, [sp, #4]
1a000d9c:	4b0d      	ldr	r3, [pc, #52]	; (1a000dd4 <fpuInit+0x50>)
1a000d9e:	429a      	cmp	r2, r3
1a000da0:	d003      	beq.n	1a000daa <fpuInit+0x26>
1a000da2:	2300      	movs	r3, #0
1a000da4:	e002      	b.n	1a000dac <fpuInit+0x28>
1a000da6:	2300      	movs	r3, #0
1a000da8:	e000      	b.n	1a000dac <fpuInit+0x28>
1a000daa:	2301      	movs	r3, #1

	if (vfpPresent) {
1a000dac:	f013 0fff 	tst.w	r3, #255	; 0xff
1a000db0:	d008      	beq.n	1a000dc4 <fpuInit+0x40>
		Cpacr = *regCpacr;
1a000db2:	4a09      	ldr	r2, [pc, #36]	; (1a000dd8 <fpuInit+0x54>)
1a000db4:	6813      	ldr	r3, [r2, #0]
1a000db6:	9303      	str	r3, [sp, #12]
		Cpacr |= (0xF << 20);
1a000db8:	9b03      	ldr	r3, [sp, #12]
1a000dba:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a000dbe:	9303      	str	r3, [sp, #12]
		*regCpacr = Cpacr;	// enable CP10 and CP11 for full access
1a000dc0:	9b03      	ldr	r3, [sp, #12]
1a000dc2:	6013      	str	r3, [r2, #0]
	}
#endif /* __FPU_PRESENT != 0 */
}
1a000dc4:	b004      	add	sp, #16
1a000dc6:	4770      	bx	lr
1a000dc8:	e000ef40 	.word	0xe000ef40
1a000dcc:	e000ef44 	.word	0xe000ef44
1a000dd0:	10110021 	.word	0x10110021
1a000dd4:	11000011 	.word	0x11000011
1a000dd8:	e000ed88 	.word	0xe000ed88

1a000ddc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000ddc:	2901      	cmp	r1, #1
1a000dde:	d109      	bne.n	1a000df4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000de0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000de4:	0080      	lsls	r0, r0, #2
1a000de6:	4b04      	ldr	r3, [pc, #16]	; (1a000df8 <Chip_I2C_EventHandler+0x1c>)
1a000de8:	4418      	add	r0, r3
1a000dea:	6902      	ldr	r2, [r0, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000dec:	7d13      	ldrb	r3, [r2, #20]
1a000dee:	b2db      	uxtb	r3, r3
1a000df0:	2b04      	cmp	r3, #4
1a000df2:	d0fb      	beq.n	1a000dec <Chip_I2C_EventHandler+0x10>
1a000df4:	4770      	bx	lr
1a000df6:	bf00      	nop
1a000df8:	1000001c 	.word	0x1000001c

1a000dfc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000dfc:	b570      	push	{r4, r5, r6, lr}
1a000dfe:	4605      	mov	r5, r0
 * Private functions
 ****************************************************************************/

STATIC INLINE void enableClk(I2C_ID_T id)
{
	Chip_Clock_Enable(i2c[id].clk);
1a000e00:	4e06      	ldr	r6, [pc, #24]	; (1a000e1c <Chip_I2C_Init+0x20>)
1a000e02:	00c4      	lsls	r4, r0, #3
1a000e04:	1a23      	subs	r3, r4, r0
1a000e06:	009b      	lsls	r3, r3, #2
1a000e08:	4433      	add	r3, r6
1a000e0a:	8898      	ldrh	r0, [r3, #4]
1a000e0c:	f000 fc44 	bl	1a001698 <Chip_Clock_Enable>
void Chip_I2C_Init(I2C_ID_T id)
{
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000e10:	1b60      	subs	r0, r4, r5
1a000e12:	0080      	lsls	r0, r0, #2
1a000e14:	5833      	ldr	r3, [r6, r0]
1a000e16:	226c      	movs	r2, #108	; 0x6c
1a000e18:	619a      	str	r2, [r3, #24]
1a000e1a:	bd70      	pop	{r4, r5, r6, pc}
1a000e1c:	1000001c 	.word	0x1000001c

1a000e20 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000e24:	460c      	mov	r4, r1
}

/* Get the ADC Clock Rate */
STATIC INLINE uint32_t getClkRate(I2C_ID_T id)
{
	return Chip_Clock_GetRate(i2c[id].clk);
1a000e26:	4f09      	ldr	r7, [pc, #36]	; (1a000e4c <Chip_I2C_SetClockRate+0x2c>)
1a000e28:	00c5      	lsls	r5, r0, #3
1a000e2a:	1a2e      	subs	r6, r5, r0
1a000e2c:	00b6      	lsls	r6, r6, #2
1a000e2e:	19bb      	adds	r3, r7, r6
1a000e30:	8898      	ldrh	r0, [r3, #4]
1a000e32:	f000 fc4b 	bl	1a0016cc <Chip_Clock_GetRate>
/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000e36:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000e3a:	59bb      	ldr	r3, [r7, r6]
1a000e3c:	0842      	lsrs	r2, r0, #1
1a000e3e:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000e40:	59bb      	ldr	r3, [r7, r6]
1a000e42:	691a      	ldr	r2, [r3, #16]
1a000e44:	1a80      	subs	r0, r0, r2
1a000e46:	6158      	str	r0, [r3, #20]
1a000e48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000e4c:	1000001c 	.word	0x1000001c

1a000e50 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a000e50:	4b09      	ldr	r3, [pc, #36]	; (1a000e78 <Chip_UART_GetIndex+0x28>)
1a000e52:	4298      	cmp	r0, r3
1a000e54:	d009      	beq.n	1a000e6a <Chip_UART_GetIndex+0x1a>
1a000e56:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a000e5a:	4298      	cmp	r0, r3
1a000e5c:	d007      	beq.n	1a000e6e <Chip_UART_GetIndex+0x1e>
1a000e5e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a000e62:	4298      	cmp	r0, r3
1a000e64:	d005      	beq.n	1a000e72 <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a000e66:	2000      	movs	r0, #0
1a000e68:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a000e6a:	2002      	movs	r0, #2
1a000e6c:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a000e6e:	2003      	movs	r0, #3
1a000e70:	4770      	bx	lr
	uint32_t base = (uint32_t) pUART;
	switch(base) {
		case LPC_USART0_BASE:
			return 0;
		case LPC_UART1_BASE:
			return 1;
1a000e72:	2001      	movs	r0, #1
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a000e74:	4770      	bx	lr
1a000e76:	bf00      	nop
1a000e78:	400c1000 	.word	0x400c1000

1a000e7c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a000e7c:	b510      	push	{r4, lr}
1a000e7e:	b082      	sub	sp, #8
1a000e80:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a000e82:	f7ff ffe5 	bl	1a000e50 <Chip_UART_GetIndex>
1a000e86:	4b10      	ldr	r3, [pc, #64]	; (1a000ec8 <Chip_UART_Init+0x4c>)
1a000e88:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000e8c:	2101      	movs	r1, #1
1a000e8e:	460a      	mov	r2, r1
1a000e90:	460b      	mov	r3, r1
1a000e92:	f000 fbe3 	bl	1a00165c <Chip_Clock_EnableOpts>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a000e96:	2307      	movs	r3, #7
1a000e98:	60a3      	str	r3, [r4, #8]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXDisable(LPC_USART_T *pUART)
{
    pUART->TER2 = 0;
1a000e9a:	2300      	movs	r3, #0
1a000e9c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a000e9e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a000ea0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a000ea2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a000ea4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a000ea6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a000ea8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a000eaa:	4b08      	ldr	r3, [pc, #32]	; (1a000ecc <Chip_UART_Init+0x50>)
1a000eac:	429c      	cmp	r4, r3
1a000eae:	d103      	bne.n	1a000eb8 <Chip_UART_Init+0x3c>
		/* Set Modem Control to default state */
		pUART->MCR = 0;
1a000eb0:	2300      	movs	r3, #0
1a000eb2:	6123      	str	r3, [r4, #16]
		/*Dummy Reading to Clear Status */
		tmp = pUART->MSR;
1a000eb4:	69a3      	ldr	r3, [r4, #24]
1a000eb6:	9301      	str	r3, [sp, #4]
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000eb8:	2303      	movs	r3, #3
1a000eba:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a000ebc:	2310      	movs	r3, #16
1a000ebe:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a000ec0:	9b01      	ldr	r3, [sp, #4]
}
1a000ec2:	b002      	add	sp, #8
1a000ec4:	bd10      	pop	{r4, pc}
1a000ec6:	bf00      	nop
1a000ec8:	1a0029ac 	.word	0x1a0029ac
1a000ecc:	40082000 	.word	0x40082000

1a000ed0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a000ed0:	b538      	push	{r3, r4, r5, lr}
1a000ed2:	4605      	mov	r5, r0
1a000ed4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000ed6:	f7ff ffbb 	bl	1a000e50 <Chip_UART_GetIndex>
1a000eda:	4b0c      	ldr	r3, [pc, #48]	; (1a000f0c <Chip_UART_SetBaud+0x3c>)
1a000edc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000ee0:	f000 fbf4 	bl	1a0016cc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a000ee4:	0124      	lsls	r4, r4, #4
1a000ee6:	fbb0 f3f4 	udiv	r3, r0, r4
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000eea:	68ea      	ldr	r2, [r5, #12]
1a000eec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a000ef0:	60ea      	str	r2, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000ef2:	b2da      	uxtb	r2, r3
1a000ef4:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a000ef6:	f3c3 2207 	ubfx	r2, r3, #8, #8
1a000efa:	606a      	str	r2, [r5, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000efc:	68ea      	ldr	r2, [r5, #12]
1a000efe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a000f02:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a000f04:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a000f08:	0900      	lsrs	r0, r0, #4
1a000f0a:	bd38      	pop	{r3, r4, r5, pc}
1a000f0c:	1a0029a4 	.word	0x1a0029a4

1a000f10 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a000f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000f14:	b083      	sub	sp, #12
1a000f16:	4683      	mov	fp, r0
1a000f18:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a000f1a:	f7ff ff99 	bl	1a000e50 <Chip_UART_GetIndex>
1a000f1e:	4b34      	ldr	r3, [pc, #208]	; (1a000ff0 <Chip_UART_SetBaudFDR+0xe0>)
1a000f20:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a000f24:	f000 fbd2 	bl	1a0016cc <Chip_Clock_GetRate>
1a000f28:	4606      	mov	r6, r0
/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */
1a000f2a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f2e:	2401      	movs	r4, #1
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a000f30:	2300      	movs	r3, #0
1a000f32:	9301      	str	r3, [sp, #4]
1a000f34:	46a2      	mov	sl, r4
1a000f36:	4699      	mov	r9, r3

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f38:	e029      	b.n	1a000f8e <Chip_UART_SetBaudFDR+0x7e>
		for (d = 0; d < m; d++) {
			uint32_t diff, div;
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a000f3a:	2300      	movs	r3, #0
1a000f3c:	0932      	lsrs	r2, r6, #4
1a000f3e:	0730      	lsls	r0, r6, #28
1a000f40:	fba0 0104 	umull	r0, r1, r0, r4
1a000f44:	fb04 1102 	mla	r1, r4, r2, r1
1a000f48:	1962      	adds	r2, r4, r5
1a000f4a:	fb08 f202 	mul.w	r2, r8, r2
1a000f4e:	f001 f9cd 	bl	1a0022ec <__aeabi_uldivmod>

			/* Lower 32-bit of dval has diff */
			diff = (uint32_t) dval;
1a000f52:	4603      	mov	r3, r0
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);
1a000f54:	460a      	mov	r2, r1

			/* Closer to next div */
			if ((int)diff < 0) {
1a000f56:	2800      	cmp	r0, #0
1a000f58:	da01      	bge.n	1a000f5e <Chip_UART_SetBaudFDR+0x4e>
				diff = -diff;
1a000f5a:	4243      	negs	r3, r0
				div ++;
1a000f5c:	1c4a      	adds	r2, r1, #1
			}

			/* Check if new value is worse than old or out of range */
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a000f5e:	429f      	cmp	r7, r3
1a000f60:	d30a      	bcc.n	1a000f78 <Chip_UART_SetBaudFDR+0x68>
1a000f62:	b14a      	cbz	r2, 1a000f78 <Chip_UART_SetBaudFDR+0x68>
1a000f64:	0c11      	lsrs	r1, r2, #16
1a000f66:	d107      	bne.n	1a000f78 <Chip_UART_SetBaudFDR+0x68>
1a000f68:	2a02      	cmp	r2, #2
1a000f6a:	d800      	bhi.n	1a000f6e <Chip_UART_SetBaudFDR+0x5e>
1a000f6c:	b925      	cbnz	r5, 1a000f78 <Chip_UART_SetBaudFDR+0x68>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a000f6e:	b14b      	cbz	r3, 1a000f84 <Chip_UART_SetBaudFDR+0x74>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a000f70:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000f72:	9501      	str	r5, [sp, #4]
			sm = m;
1a000f74:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000f76:	4691      	mov	r9, r2
	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
		for (d = 0; d < m; d++) {
1a000f78:	3501      	adds	r5, #1
1a000f7a:	e000      	b.n	1a000f7e <Chip_UART_SetBaudFDR+0x6e>
1a000f7c:	2500      	movs	r5, #0
1a000f7e:	42a5      	cmp	r5, r4
1a000f80:	d3db      	bcc.n	1a000f3a <Chip_UART_SetBaudFDR+0x2a>
1a000f82:	e003      	b.n	1a000f8c <Chip_UART_SetBaudFDR+0x7c>

			/* Store the new better values */
			sdiv = div;
			sd = d;
			sm = m;
			odiff = diff;
1a000f84:	461f      	mov	r7, r3
				continue;
			}

			/* Store the new better values */
			sdiv = div;
			sd = d;
1a000f86:	9501      	str	r5, [sp, #4]
			sm = m;
1a000f88:	46a2      	mov	sl, r4
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
				continue;
			}

			/* Store the new better values */
			sdiv = div;
1a000f8a:	4691      	mov	r9, r2

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a000f8c:	3401      	adds	r4, #1
1a000f8e:	b10f      	cbz	r7, 1a000f94 <Chip_UART_SetBaudFDR+0x84>
1a000f90:	2c0f      	cmp	r4, #15
1a000f92:	d9f3      	bls.n	1a000f7c <Chip_UART_SetBaudFDR+0x6c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a000f94:	f1b9 0f00 	cmp.w	r9, #0
1a000f98:	d026      	beq.n	1a000fe8 <Chip_UART_SetBaudFDR+0xd8>
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a000f9a:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000f9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a000fa2:	f8cb 300c 	str.w	r3, [fp, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a000fa6:	fa5f f389 	uxtb.w	r3, r9
1a000faa:	f8cb 3000 	str.w	r3, [fp]
	pUART->DLM = (uint32_t) dlm;
1a000fae:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a000fb2:	f8cb 3004 	str.w	r3, [fp, #4]
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_DisableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a000fb6:	f8db 300c 	ldr.w	r3, [fp, #12]
1a000fba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a000fbe:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a000fc2:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a000fc6:	b2da      	uxtb	r2, r3
1a000fc8:	9901      	ldr	r1, [sp, #4]
1a000fca:	f001 030f 	and.w	r3, r1, #15
1a000fce:	4313      	orrs	r3, r2
1a000fd0:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a000fd4:	0933      	lsrs	r3, r6, #4
1a000fd6:	fb0a f303 	mul.w	r3, sl, r3
1a000fda:	eb0a 0001 	add.w	r0, sl, r1
1a000fde:	fb09 f000 	mul.w	r0, r9, r0
1a000fe2:	fbb3 f0f0 	udiv	r0, r3, r0
1a000fe6:	e000      	b.n	1a000fea <Chip_UART_SetBaudFDR+0xda>
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
		return 0;
1a000fe8:	2000      	movs	r0, #0
	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
}
1a000fea:	b003      	add	sp, #12
1a000fec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a000ff0:	1a0029a4 	.word	0x1a0029a4

1a000ff4 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000ff4:	4b03      	ldr	r3, [pc, #12]	; (1a001004 <Chip_ADC_GetClockIndex+0x10>)
1a000ff6:	4298      	cmp	r0, r3
1a000ff8:	d101      	bne.n	1a000ffe <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
1a000ffa:	2004      	movs	r0, #4
1a000ffc:	4770      	bx	lr
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000ffe:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a001000:	4770      	bx	lr
1a001002:	bf00      	nop
1a001004:	400e4000 	.word	0x400e4000

1a001008 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a001008:	b570      	push	{r4, r5, r6, lr}
1a00100a:	460d      	mov	r5, r1
1a00100c:	4614      	mov	r4, r2
1a00100e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a001010:	f7ff fff0 	bl	1a000ff4 <Chip_ADC_GetClockIndex>
1a001014:	f000 fb5a 	bl	1a0016cc <Chip_Clock_GetRate>
	if (burstMode) {
1a001018:	b115      	cbz	r5, 1a001020 <getClkDiv+0x18>
		fullAdcRate = adcRate * clks;
1a00101a:	fb04 f406 	mul.w	r4, r4, r6
1a00101e:	e003      	b.n	1a001028 <getClkDiv+0x20>
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a001020:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001024:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a001028:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00102c:	0064      	lsls	r4, r4, #1
1a00102e:	fbb0 f4f4 	udiv	r4, r0, r4
1a001032:	1e60      	subs	r0, r4, #1
	return div;
}
1a001034:	b2c0      	uxtb	r0, r0
1a001036:	bd70      	pop	{r4, r5, r6, pc}

1a001038 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a001038:	6803      	ldr	r3, [r0, #0]
1a00103a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a00103e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a001042:	6001      	str	r1, [r0, #0]
1a001044:	4770      	bx	lr
1a001046:	bf00      	nop

1a001048 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a001048:	3104      	adds	r1, #4
1a00104a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a00104e:	2b00      	cmp	r3, #0
1a001050:	da04      	bge.n	1a00105c <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a001052:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a001056:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a001058:	2001      	movs	r0, #1
1a00105a:	4770      	bx	lr
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
	if (!ADC_DR_DONE(temp)) {
		return ERROR;
1a00105c:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a00105e:	4770      	bx	lr

1a001060 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a001060:	b538      	push	{r3, r4, r5, lr}
1a001062:	4605      	mov	r5, r0
1a001064:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a001066:	f7ff ffc5 	bl	1a000ff4 <Chip_ADC_GetClockIndex>
1a00106a:	2101      	movs	r1, #1
1a00106c:	460a      	mov	r2, r1
1a00106e:	460b      	mov	r3, r1
1a001070:	f000 faf4 	bl	1a00165c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a001074:	2100      	movs	r1, #0
1a001076:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a001078:	4a08      	ldr	r2, [pc, #32]	; (1a00109c <Chip_ADC_Init+0x3c>)
1a00107a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00107c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00107e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a001080:	4628      	mov	r0, r5
1a001082:	230b      	movs	r3, #11
1a001084:	f7ff ffc0 	bl	1a001008 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001088:	0200      	lsls	r0, r0, #8
1a00108a:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00108e:	7920      	ldrb	r0, [r4, #4]
1a001090:	f000 0007 	and.w	r0, r0, #7
1a001094:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
	pADC->CR = cr;
1a001098:	6028      	str	r0, [r5, #0]
1a00109a:	bd38      	pop	{r3, r4, r5, pc}
1a00109c:	00061a80 	.word	0x00061a80

1a0010a0 <Chip_ADC_ReadValue>:
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a0010a0:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a0010a2:	f7ff ffd1 	bl	1a001048 <readAdcVal>
}
1a0010a6:	bd08      	pop	{r3, pc}

1a0010a8 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a0010a8:	2a01      	cmp	r2, #1
1a0010aa:	d009      	beq.n	1a0010c0 <Chip_ADC_ReadStatus+0x18>
1a0010ac:	b112      	cbz	r2, 1a0010b4 <Chip_ADC_ReadStatus+0xc>
1a0010ae:	2a02      	cmp	r2, #2
1a0010b0:	d00e      	beq.n	1a0010d0 <Chip_ADC_ReadStatus+0x28>
1a0010b2:	e013      	b.n	1a0010dc <Chip_ADC_ReadStatus+0x34>
	case ADC_DR_DONE_STAT:
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0010b4:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0010b6:	40c8      	lsrs	r0, r1
1a0010b8:	f000 0001 	and.w	r0, r0, #1
1a0010bc:	b2c0      	uxtb	r0, r0
1a0010be:	4770      	bx	lr

	case ADC_DR_OVERRUN_STAT:
		channel += 8;
1a0010c0:	3108      	adds	r1, #8
1a0010c2:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0010c4:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0010c6:	40c8      	lsrs	r0, r1
1a0010c8:	f000 0001 	and.w	r0, r0, #1
1a0010cc:	b2c0      	uxtb	r0, r0
1a0010ce:	4770      	bx	lr

	case ADC_DR_ADINT_STAT:
		return pADC->STAT >> 16 ? SET : RESET;
1a0010d0:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0010d2:	0c1b      	lsrs	r3, r3, #16
1a0010d4:	bf14      	ite	ne
1a0010d6:	2001      	movne	r0, #1
1a0010d8:	2000      	moveq	r0, #0
1a0010da:	4770      	bx	lr

	default:
		break;
	}
	return RESET;
1a0010dc:	2000      	movs	r0, #0
}
1a0010de:	4770      	bx	lr

1a0010e0 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a0010e0:	2a01      	cmp	r2, #1
1a0010e2:	d105      	bne.n	1a0010f0 <Chip_ADC_Int_SetChannelCmd+0x10>
		pADC->INTEN |= (1UL << channel);
1a0010e4:	68c2      	ldr	r2, [r0, #12]
1a0010e6:	2301      	movs	r3, #1
1a0010e8:	408b      	lsls	r3, r1
1a0010ea:	4313      	orrs	r3, r2
1a0010ec:	60c3      	str	r3, [r0, #12]
1a0010ee:	4770      	bx	lr
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a0010f0:	68c2      	ldr	r2, [r0, #12]
1a0010f2:	2301      	movs	r3, #1
1a0010f4:	408b      	lsls	r3, r1
1a0010f6:	ea22 0303 	bic.w	r3, r2, r3
1a0010fa:	60c3      	str	r3, [r0, #12]
1a0010fc:	4770      	bx	lr
1a0010fe:	bf00      	nop

1a001100 <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a001100:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a001102:	2901      	cmp	r1, #1
1a001104:	d909      	bls.n	1a00111a <Chip_ADC_SetStartMode+0x1a>
		if (EdgeOption) {
1a001106:	b122      	cbz	r2, 1a001112 <Chip_ADC_SetStartMode+0x12>
			pADC->CR |= ADC_CR_EDGE;
1a001108:	6803      	ldr	r3, [r0, #0]
1a00110a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a00110e:	6003      	str	r3, [r0, #0]
1a001110:	e003      	b.n	1a00111a <Chip_ADC_SetStartMode+0x1a>
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a001112:	6803      	ldr	r3, [r0, #0]
1a001114:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a001118:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a00111a:	f7ff ff8d 	bl	1a001038 <setStartMode>
1a00111e:	bd08      	pop	{r3, pc}

1a001120 <Chip_ADC_SetSampleRate>:
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a001120:	b570      	push	{r4, r5, r6, lr}
1a001122:	4606      	mov	r6, r0
1a001124:	460d      	mov	r5, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a001126:	6804      	ldr	r4, [r0, #0]
1a001128:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a00112c:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a001130:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a001132:	790b      	ldrb	r3, [r1, #4]
1a001134:	f1c3 030b 	rsb	r3, r3, #11
1a001138:	7949      	ldrb	r1, [r1, #5]
1a00113a:	b2db      	uxtb	r3, r3
1a00113c:	f7ff ff64 	bl	1a001008 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a001140:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a001144:	792c      	ldrb	r4, [r5, #4]
1a001146:	f004 0407 	and.w	r4, r4, #7
1a00114a:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	pADC->CR = cr;
1a00114e:	6030      	str	r0, [r6, #0]
1a001150:	bd70      	pop	{r4, r5, r6, pc}
1a001152:	bf00      	nop

1a001154 <Chip_ADC_SetResolution>:
}

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a001154:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a001156:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a001158:	680a      	ldr	r2, [r1, #0]
1a00115a:	f7ff ffe1 	bl	1a001120 <Chip_ADC_SetSampleRate>
1a00115e:	bd08      	pop	{r3, pc}

1a001160 <Chip_ADC_EnableChannel>:
}

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a001160:	2a01      	cmp	r2, #1
1a001162:	d105      	bne.n	1a001170 <Chip_ADC_EnableChannel+0x10>
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a001164:	6802      	ldr	r2, [r0, #0]
1a001166:	2301      	movs	r3, #1
1a001168:	408b      	lsls	r3, r1
1a00116a:	4313      	orrs	r3, r2
1a00116c:	6003      	str	r3, [r0, #0]
1a00116e:	4770      	bx	lr
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a001170:	6803      	ldr	r3, [r0, #0]
1a001172:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a001176:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a001178:	6802      	ldr	r2, [r0, #0]
1a00117a:	2301      	movs	r3, #1
1a00117c:	408b      	lsls	r3, r1
1a00117e:	ea22 0303 	bic.w	r3, r2, r3
1a001182:	6003      	str	r3, [r0, #0]
1a001184:	4770      	bx	lr
1a001186:	bf00      	nop

1a001188 <Chip_ADC_SetBurstCmd>:
	}
}

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a001188:	b538      	push	{r3, r4, r5, lr}
1a00118a:	4604      	mov	r4, r0
1a00118c:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a00118e:	2100      	movs	r1, #0
1a001190:	f7ff ff52 	bl	1a001038 <setStartMode>
	
    if (NewState == DISABLE) {
1a001194:	b925      	cbnz	r5, 1a0011a0 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a001196:	6823      	ldr	r3, [r4, #0]
1a001198:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a00119c:	6023      	str	r3, [r4, #0]
1a00119e:	bd38      	pop	{r3, r4, r5, pc}
	}
	else {
		pADC->CR |= ADC_CR_BURST;
1a0011a0:	6823      	ldr	r3, [r4, #0]
1a0011a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0011a6:	6023      	str	r3, [r4, #0]
1a0011a8:	bd38      	pop	{r3, r4, r5, pc}
1a0011aa:	bf00      	nop

1a0011ac <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0011ac:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0011ae:	680b      	ldr	r3, [r1, #0]
1a0011b0:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0011b4:	d002      	beq.n	1a0011bc <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a0011b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0011ba:	600b      	str	r3, [r1, #0]
1a0011bc:	4686      	mov	lr, r0
1a0011be:	2601      	movs	r6, #1
1a0011c0:	e041      	b.n	1a001246 <pll_calc_divs+0x9a>
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
1a0011c2:	680d      	ldr	r5, [r1, #0]
1a0011c4:	f015 0f40 	tst.w	r5, #64	; 0x40
1a0011c8:	d008      	beq.n	1a0011dc <pll_calc_divs+0x30>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0011ca:	1c7b      	adds	r3, r7, #1
1a0011cc:	fa04 f203 	lsl.w	r2, r4, r3
1a0011d0:	694b      	ldr	r3, [r1, #20]
1a0011d2:	fb03 f302 	mul.w	r3, r3, r2
1a0011d6:	fbb3 f3f6 	udiv	r3, r3, r6
1a0011da:	e004      	b.n	1a0011e6 <pll_calc_divs+0x3a>
				} else {
					fcco = (m * ppll->fin) / n;
1a0011dc:	694b      	ldr	r3, [r1, #20]
1a0011de:	fb04 f303 	mul.w	r3, r4, r3
1a0011e2:	fbb3 f3f6 	udiv	r3, r3, r6
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0011e6:	4a19      	ldr	r2, [pc, #100]	; (1a00124c <pll_calc_divs+0xa0>)
1a0011e8:	4293      	cmp	r3, r2
1a0011ea:	d920      	bls.n	1a00122e <pll_calc_divs+0x82>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0011ec:	4a18      	ldr	r2, [pc, #96]	; (1a001250 <pll_calc_divs+0xa4>)
1a0011ee:	4293      	cmp	r3, r2
1a0011f0:	d823      	bhi.n	1a00123a <pll_calc_divs+0x8e>
				if (ppll->ctrl & (1 << 7)) {
1a0011f2:	f015 0f80 	tst.w	r5, #128	; 0x80
1a0011f6:	d103      	bne.n	1a001200 <pll_calc_divs+0x54>
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
1a0011f8:	1c7a      	adds	r2, r7, #1
1a0011fa:	fa23 f202 	lsr.w	r2, r3, r2
1a0011fe:	e000      	b.n	1a001202 <pll_calc_divs+0x56>
					fcco = (m * ppll->fin) / n;
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a001200:	461a      	mov	r2, r3
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001202:	1a85      	subs	r5, r0, r2
1a001204:	d502      	bpl.n	1a00120c <pll_calc_divs+0x60>
		return -val;
1a001206:	f1c5 0c00 	rsb	ip, r5, #0
1a00120a:	e000      	b.n	1a00120e <pll_calc_divs+0x62>
	return val;
1a00120c:	46ac      	mov	ip, r5
					fout = fcco;
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a00120e:	45e6      	cmp	lr, ip
1a001210:	d90d      	bls.n	1a00122e <pll_calc_divs+0x82>
					ppll->nsel = n;
1a001212:	608e      	str	r6, [r1, #8]
					ppll->psel = p + 1;
1a001214:	f107 0e01 	add.w	lr, r7, #1
1a001218:	f8c1 e00c 	str.w	lr, [r1, #12]
					ppll->msel = m;
1a00121c:	610c      	str	r4, [r1, #16]
					ppll->fout = fout;
1a00121e:	618a      	str	r2, [r1, #24]
					ppll->fcco = fcco;
1a001220:	61cb      	str	r3, [r1, #28]
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001222:	2d00      	cmp	r5, #0
1a001224:	da02      	bge.n	1a00122c <pll_calc_divs+0x80>
		return -val;
1a001226:	f1c5 0e00 	rsb	lr, r5, #0
1a00122a:	e000      	b.n	1a00122e <pll_calc_divs+0x82>
	return val;
1a00122c:	46ae      	mov	lr, r5
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
			for (m = 1; m <= 256; m++) {
1a00122e:	3401      	adds	r4, #1
1a001230:	e000      	b.n	1a001234 <pll_calc_divs+0x88>
1a001232:	2401      	movs	r4, #1
1a001234:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
1a001238:	ddc3      	ble.n	1a0011c2 <pll_calc_divs+0x16>
	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a00123a:	3701      	adds	r7, #1
1a00123c:	e000      	b.n	1a001240 <pll_calc_divs+0x94>
1a00123e:	2700      	movs	r7, #0
1a001240:	2f03      	cmp	r7, #3
1a001242:	ddf6      	ble.n	1a001232 <pll_calc_divs+0x86>

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
		ppll->ctrl &= ~(1 << 6);
	}
	for (n = 1; n <= 4; n++) {
1a001244:	3601      	adds	r6, #1
1a001246:	2e04      	cmp	r6, #4
1a001248:	ddf9      	ble.n	1a00123e <pll_calc_divs+0x92>
					prev = ABS(freq - fout);
				}
			}
		}
	}
}
1a00124a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00124c:	094c5eff 	.word	0x094c5eff
1a001250:	1312d000 	.word	0x1312d000

1a001254 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a001254:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001256:	b099      	sub	sp, #100	; 0x64
1a001258:	4605      	mov	r5, r0
1a00125a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00125c:	4668      	mov	r0, sp
1a00125e:	2100      	movs	r1, #0
1a001260:	2260      	movs	r2, #96	; 0x60
1a001262:	f001 fb37 	bl	1a0028d4 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a001266:	2380      	movs	r3, #128	; 0x80
1a001268:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00126a:	6963      	ldr	r3, [r4, #20]
1a00126c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00126e:	7923      	ldrb	r3, [r4, #4]
1a001270:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a001274:	4628      	mov	r0, r5
1a001276:	4669      	mov	r1, sp
1a001278:	f7ff ff98 	bl	1a0011ac <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00127c:	9b06      	ldr	r3, [sp, #24]
1a00127e:	42ab      	cmp	r3, r5
1a001280:	d107      	bne.n	1a001292 <pll_get_frac+0x3e>
		*ppll = pll[0];
1a001282:	466d      	mov	r5, sp
1a001284:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001286:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00128c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a001290:	e05e      	b.n	1a001350 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001292:	1aeb      	subs	r3, r5, r3
1a001294:	d500      	bpl.n	1a001298 <pll_get_frac+0x44>
		return -val;
1a001296:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[0]);
	if (pll[0].fout == freq) {
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a001298:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a00129a:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00129c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0012a0:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a0012a2:	6963      	ldr	r3, [r4, #20]
1a0012a4:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a0012a6:	7923      	ldrb	r3, [r4, #4]
1a0012a8:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a0012ac:	4628      	mov	r0, r5
1a0012ae:	a910      	add	r1, sp, #64	; 0x40
1a0012b0:	f7ff ff7c 	bl	1a0011ac <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0012b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a0012b6:	42ab      	cmp	r3, r5
1a0012b8:	d107      	bne.n	1a0012ca <pll_get_frac+0x76>
		*ppll = pll[2];
1a0012ba:	ad10      	add	r5, sp, #64	; 0x40
1a0012bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012c0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0012c8:	e042      	b.n	1a001350 <pll_get_frac+0xfc>
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a0012ca:	1aeb      	subs	r3, r5, r3
1a0012cc:	d500      	bpl.n	1a0012d0 <pll_get_frac+0x7c>
		return -val;
1a0012ce:	425b      	negs	r3, r3
	pll_calc_divs(freq, &pll[2]);
	if (pll[2].fout == freq) {
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0012d0:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a0012d2:	4b20      	ldr	r3, [pc, #128]	; (1a001354 <pll_get_frac+0x100>)
1a0012d4:	429d      	cmp	r5, r3
1a0012d6:	d812      	bhi.n	1a0012fe <pll_get_frac+0xaa>
		/* Try integer mode */
		pll[1].ctrl = (1 << 6);
1a0012d8:	2340      	movs	r3, #64	; 0x40
1a0012da:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0012dc:	6963      	ldr	r3, [r4, #20]
1a0012de:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0012e0:	4628      	mov	r0, r5
1a0012e2:	a908      	add	r1, sp, #32
1a0012e4:	f7ff ff62 	bl	1a0011ac <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0012e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0012ea:	42ab      	cmp	r3, r5
1a0012ec:	d107      	bne.n	1a0012fe <pll_get_frac+0xaa>
			*ppll = pll[1];
1a0012ee:	ad08      	add	r5, sp, #32
1a0012f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0012f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0012f4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0012f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0012fc:	e028      	b.n	1a001350 <pll_get_frac+0xfc>
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0012fe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
/*****************************************************************************
 * Private functions
 ****************************************************************************/
__STATIC_INLINE uint32_t ABS(int val)
{
	if (val < 0)
1a001300:	1aed      	subs	r5, r5, r3
1a001302:	d500      	bpl.n	1a001306 <pll_get_frac+0xb2>
		return -val;
1a001304:	426d      	negs	r5, r5
		}
	}
	diff[1] = ABS(freq - pll[1].fout);

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a001306:	42ae      	cmp	r6, r5
1a001308:	dc11      	bgt.n	1a00132e <pll_get_frac+0xda>
		if (diff[0] <= diff[2]) {
1a00130a:	42be      	cmp	r6, r7
1a00130c:	dc07      	bgt.n	1a00131e <pll_get_frac+0xca>
			*ppll = pll[0];
1a00130e:	466d      	mov	r5, sp
1a001310:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001312:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001314:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001318:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00131c:	e018      	b.n	1a001350 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a00131e:	ad10      	add	r5, sp, #64	; 0x40
1a001320:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001322:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001324:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a001328:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a00132c:	e010      	b.n	1a001350 <pll_get_frac+0xfc>
		}
	} else {
		if (diff[1] <= diff[2]) {
1a00132e:	42af      	cmp	r7, r5
1a001330:	db07      	blt.n	1a001342 <pll_get_frac+0xee>
			*ppll = pll[1];
1a001332:	ad08      	add	r5, sp, #32
1a001334:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001336:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001338:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00133c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a001340:	e006      	b.n	1a001350 <pll_get_frac+0xfc>
		} else {
			*ppll = pll[2];
1a001342:	ad10      	add	r5, sp, #64	; 0x40
1a001344:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a001346:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a001348:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00134c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		}
	}
}
1a001350:	b019      	add	sp, #100	; 0x64
1a001352:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a001354:	068e7780 	.word	0x068e7780

1a001358 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a001358:	b430      	push	{r4, r5}
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a00135a:	2300      	movs	r3, #0
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a00135c:	211c      	movs	r1, #28
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00135e:	e010      	b.n	1a001382 <Chip_Clock_FindBaseClock+0x2a>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a001360:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001364:	0052      	lsls	r2, r2, #1
1a001366:	4d0d      	ldr	r5, [pc, #52]	; (1a00139c <Chip_Clock_FindBaseClock+0x44>)
1a001368:	5aaa      	ldrh	r2, [r5, r2]
1a00136a:	4282      	cmp	r2, r0
1a00136c:	d806      	bhi.n	1a00137c <Chip_Clock_FindBaseClock+0x24>
1a00136e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a001372:	0052      	lsls	r2, r2, #1
1a001374:	442a      	add	r2, r5
1a001376:	8852      	ldrh	r2, [r2, #2]
1a001378:	4282      	cmp	r2, r0
1a00137a:	d201      	bcs.n	1a001380 <Chip_Clock_FindBaseClock+0x28>
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00137c:	3301      	adds	r3, #1
1a00137e:	e000      	b.n	1a001382 <Chip_Clock_FindBaseClock+0x2a>
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
1a001380:	4621      	mov	r1, r4
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a001382:	291c      	cmp	r1, #28
1a001384:	d107      	bne.n	1a001396 <Chip_Clock_FindBaseClock+0x3e>
1a001386:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a00138a:	0052      	lsls	r2, r2, #1
1a00138c:	4c03      	ldr	r4, [pc, #12]	; (1a00139c <Chip_Clock_FindBaseClock+0x44>)
1a00138e:	4422      	add	r2, r4
1a001390:	7914      	ldrb	r4, [r2, #4]
1a001392:	428c      	cmp	r4, r1
1a001394:	d1e4      	bne.n	1a001360 <Chip_Clock_FindBaseClock+0x8>
			i++;
		}
	}

	return baseclk;
}
1a001396:	4608      	mov	r0, r1
1a001398:	bc30      	pop	{r4, r5}
1a00139a:	4770      	bx	lr
1a00139c:	1a0029c0 	.word	0x1a0029c0

1a0013a0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a0013a0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a0013a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a0013a6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a0013a8:	4a0d      	ldr	r2, [pc, #52]	; (1a0013e0 <Chip_Clock_EnableCrystal+0x40>)
1a0013aa:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a0013ac:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a0013b0:	6992      	ldr	r2, [r2, #24]
1a0013b2:	428a      	cmp	r2, r1
1a0013b4:	d001      	beq.n	1a0013ba <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013b6:	4a0a      	ldr	r2, [pc, #40]	; (1a0013e0 <Chip_Clock_EnableCrystal+0x40>)
1a0013b8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a0013ba:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a0013be:	4a09      	ldr	r2, [pc, #36]	; (1a0013e4 <Chip_Clock_EnableCrystal+0x44>)
1a0013c0:	6811      	ldr	r1, [r2, #0]
1a0013c2:	4a09      	ldr	r2, [pc, #36]	; (1a0013e8 <Chip_Clock_EnableCrystal+0x48>)
1a0013c4:	4291      	cmp	r1, r2
1a0013c6:	d901      	bls.n	1a0013cc <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0013c8:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0013cc:	4a04      	ldr	r2, [pc, #16]	; (1a0013e0 <Chip_Clock_EnableCrystal+0x40>)
1a0013ce:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0013d0:	9b01      	ldr	r3, [sp, #4]
1a0013d2:	1e5a      	subs	r2, r3, #1
1a0013d4:	9201      	str	r2, [sp, #4]
1a0013d6:	2b00      	cmp	r3, #0
1a0013d8:	d1fa      	bne.n	1a0013d0 <Chip_Clock_EnableCrystal+0x30>
}
1a0013da:	b002      	add	sp, #8
1a0013dc:	4770      	bx	lr
1a0013de:	bf00      	nop
1a0013e0:	40050000 	.word	0x40050000
1a0013e4:	1a002910 	.word	0x1a002910
1a0013e8:	01312cff 	.word	0x01312cff

1a0013ec <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0013ec:	3012      	adds	r0, #18
1a0013ee:	4b05      	ldr	r3, [pc, #20]	; (1a001404 <Chip_Clock_GetDividerSource+0x18>)
1a0013f0:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0013f4:	f010 0f01 	tst.w	r0, #1
1a0013f8:	d102      	bne.n	1a001400 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0013fa:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0013fe:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];

	if (reg & 1) {	/* divider is powered down */
		return CLKINPUT_PD;
1a001400:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001402:	4770      	bx	lr
1a001404:	40050000 	.word	0x40050000

1a001408 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a001408:	f100 0212 	add.w	r2, r0, #18
1a00140c:	4b03      	ldr	r3, [pc, #12]	; (1a00141c <Chip_Clock_GetDividerDivisor+0x14>)
1a00140e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a001412:	4b03      	ldr	r3, [pc, #12]	; (1a001420 <Chip_Clock_GetDividerDivisor+0x18>)
1a001414:	5c18      	ldrb	r0, [r3, r0]
}
1a001416:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a00141a:	4770      	bx	lr
1a00141c:	40050000 	.word	0x40050000
1a001420:	1a0029b8 	.word	0x1a0029b8

1a001424 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a001424:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a001426:	2810      	cmp	r0, #16
1a001428:	d80a      	bhi.n	1a001440 <Chip_Clock_GetClockInputHz+0x1c>
1a00142a:	e8df f000 	tbb	[pc, r0]
1a00142e:	0b42      	.short	0x0b42
1a001430:	091f160d 	.word	0x091f160d
1a001434:	2b282522 	.word	0x2b282522
1a001438:	322e0909 	.word	0x322e0909
1a00143c:	3a36      	.short	0x3a36
1a00143e:	3e          	.byte	0x3e
1a00143f:	00          	.byte	0x00
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001440:	2000      	movs	r0, #0
1a001442:	bd08      	pop	{r3, pc}
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a001444:	481e      	ldr	r0, [pc, #120]	; (1a0014c0 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a001446:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a001448:	4b1e      	ldr	r3, [pc, #120]	; (1a0014c4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00144a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00144e:	f003 0307 	and.w	r3, r3, #7
1a001452:	2b04      	cmp	r3, #4
1a001454:	d130      	bne.n	1a0014b8 <Chip_Clock_GetClockInputHz+0x94>
}

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
	uint32_t rate = 0;
1a001456:	2000      	movs	r0, #0
1a001458:	bd08      	pop	{r3, pc}
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a00145a:	4b1a      	ldr	r3, [pc, #104]	; (1a0014c4 <Chip_Clock_GetClockInputHz+0xa0>)
1a00145c:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a001460:	f003 0307 	and.w	r3, r3, #7
1a001464:	2b04      	cmp	r3, #4
1a001466:	d029      	beq.n	1a0014bc <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a001468:	4817      	ldr	r0, [pc, #92]	; (1a0014c8 <Chip_Clock_GetClockInputHz+0xa4>)
1a00146a:	bd08      	pop	{r3, pc}
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a00146c:	4b17      	ldr	r3, [pc, #92]	; (1a0014cc <Chip_Clock_GetClockInputHz+0xa8>)
1a00146e:	6818      	ldr	r0, [r3, #0]
		break;
1a001470:	bd08      	pop	{r3, pc}

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a001472:	4b17      	ldr	r3, [pc, #92]	; (1a0014d0 <Chip_Clock_GetClockInputHz+0xac>)
1a001474:	6818      	ldr	r0, [r3, #0]
		break;
1a001476:	bd08      	pop	{r3, pc}

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a001478:	4b16      	ldr	r3, [pc, #88]	; (1a0014d4 <Chip_Clock_GetClockInputHz+0xb0>)
1a00147a:	6818      	ldr	r0, [r3, #0]
		break;
1a00147c:	bd08      	pop	{r3, pc}

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00147e:	4b15      	ldr	r3, [pc, #84]	; (1a0014d4 <Chip_Clock_GetClockInputHz+0xb0>)
1a001480:	6858      	ldr	r0, [r3, #4]
		break;
1a001482:	bd08      	pop	{r3, pc}

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a001484:	f000 f86a 	bl	1a00155c <Chip_Clock_GetMainPLLHz>
		break;
1a001488:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a00148a:	2100      	movs	r1, #0
1a00148c:	f000 f89a 	bl	1a0015c4 <Chip_Clock_GetDivRate>
		break;
1a001490:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a001492:	2101      	movs	r1, #1
1a001494:	f000 f896 	bl	1a0015c4 <Chip_Clock_GetDivRate>
		break;
1a001498:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a00149a:	2102      	movs	r1, #2
1a00149c:	f000 f892 	bl	1a0015c4 <Chip_Clock_GetDivRate>
		break;
1a0014a0:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a0014a2:	2103      	movs	r1, #3
1a0014a4:	f000 f88e 	bl	1a0015c4 <Chip_Clock_GetDivRate>
		break;
1a0014a8:	bd08      	pop	{r3, pc}

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a0014aa:	2104      	movs	r1, #4
1a0014ac:	f000 f88a 	bl	1a0015c4 <Chip_Clock_GetDivRate>
		break;
1a0014b0:	bd08      	pop	{r3, pc}
{
	uint32_t rate = 0;

	switch (input) {
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
1a0014b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a0014b6:	bd08      	pop	{r3, pc}
		break;

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			/* MII mode requires 25MHz clock */
			rate = 25000000;
1a0014b8:	4803      	ldr	r0, [pc, #12]	; (1a0014c8 <Chip_Clock_GetClockInputHz+0xa4>)
1a0014ba:	bd08      	pop	{r3, pc}

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
			rate = 25000000; /* MII uses 25 MHz */
		} else {
			rate = 50000000; /* RMII uses 50 MHz */
1a0014bc:	4806      	ldr	r0, [pc, #24]	; (1a0014d8 <Chip_Clock_GetClockInputHz+0xb4>)
	default:
		break;
	}

	return rate;
}
1a0014be:	bd08      	pop	{r3, pc}
1a0014c0:	00b71b00 	.word	0x00b71b00
1a0014c4:	40043000 	.word	0x40043000
1a0014c8:	017d7840 	.word	0x017d7840
1a0014cc:	1a002914 	.word	0x1a002914
1a0014d0:	1a002910 	.word	0x1a002910
1a0014d4:	100008f4 	.word	0x100008f4
1a0014d8:	02faf080 	.word	0x02faf080

1a0014dc <Chip_Clock_CalcMainPLLValue>:
	while(delay--) {}
}

/* Calculate the Main PLL div values */
int Chip_Clock_CalcMainPLLValue(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0014dc:	b538      	push	{r3, r4, r5, lr}
1a0014de:	4605      	mov	r5, r0
1a0014e0:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0014e2:	7908      	ldrb	r0, [r1, #4]
1a0014e4:	f7ff ff9e 	bl	1a001424 <Chip_Clock_GetClockInputHz>
1a0014e8:	6160      	str	r0, [r4, #20]

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0014ea:	4b19      	ldr	r3, [pc, #100]	; (1a001550 <Chip_Clock_CalcMainPLLValue+0x74>)
1a0014ec:	442b      	add	r3, r5
1a0014ee:	4a19      	ldr	r2, [pc, #100]	; (1a001554 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0014f0:	4293      	cmp	r3, r2
1a0014f2:	d821      	bhi.n	1a001538 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0014f4:	b318      	cbz	r0, 1a00153e <Chip_Clock_CalcMainPLLValue+0x62>
		return -1;
	}

	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0014f6:	2380      	movs	r3, #128	; 0x80
1a0014f8:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0014fa:	2300      	movs	r3, #0
1a0014fc:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0014fe:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a001500:	fbb5 f3f0 	udiv	r3, r5, r0
1a001504:	6123      	str	r3, [r4, #16]

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a001506:	4a14      	ldr	r2, [pc, #80]	; (1a001558 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a001508:	4295      	cmp	r5, r2
1a00150a:	d903      	bls.n	1a001514 <Chip_Clock_CalcMainPLLValue+0x38>
1a00150c:	fb03 f000 	mul.w	r0, r3, r0
1a001510:	42a8      	cmp	r0, r5
1a001512:	d007      	beq.n	1a001524 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a001514:	4628      	mov	r0, r5
1a001516:	4621      	mov	r1, r4
1a001518:	f7ff fe9c 	bl	1a001254 <pll_get_frac>
		if (!ppll->nsel) {
1a00151c:	68a3      	ldr	r3, [r4, #8]
1a00151e:	b18b      	cbz	r3, 1a001544 <Chip_Clock_CalcMainPLLValue+0x68>
			return -1;
		}
		ppll->nsel --;
1a001520:	3b01      	subs	r3, #1
1a001522:	60a3      	str	r3, [r4, #8]
	}

	if (ppll->msel == 0) {
1a001524:	6923      	ldr	r3, [r4, #16]
1a001526:	b183      	cbz	r3, 1a00154a <Chip_Clock_CalcMainPLLValue+0x6e>
		return - 1;
	}

	if (ppll->psel) {
1a001528:	68e2      	ldr	r2, [r4, #12]
1a00152a:	b10a      	cbz	r2, 1a001530 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a00152c:	3a01      	subs	r2, #1
1a00152e:	60e2      	str	r2, [r4, #12]
	}

	ppll->msel --;
1a001530:	3b01      	subs	r3, #1
1a001532:	6123      	str	r3, [r4, #16]

	return 0;
1a001534:	2000      	movs	r0, #0
1a001536:	bd38      	pop	{r3, r4, r5, pc}
{
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);

	/* Do sanity check on frequency */
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
		return -1;
1a001538:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00153c:	bd38      	pop	{r3, r4, r5, pc}
1a00153e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001542:	bd38      	pop	{r3, r4, r5, pc}
	ppll->msel = freq / ppll->fin;

	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
		pll_get_frac(freq, ppll);
		if (!ppll->nsel) {
			return -1;
1a001544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001548:	bd38      	pop	{r3, r4, r5, pc}
		}
		ppll->nsel --;
	}

	if (ppll->msel == 0) {
		return - 1;
1a00154a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	}

	ppll->msel --;

	return 0;
}
1a00154e:	bd38      	pop	{r3, r4, r5, pc}
1a001550:	ff6b3a10 	.word	0xff6b3a10
1a001554:	0b940510 	.word	0x0b940510
1a001558:	094c5eff 	.word	0x094c5eff

1a00155c <Chip_Clock_GetMainPLLHz>:
	return freq;
}

/* Returns the frequency of the main PLL */
uint32_t Chip_Clock_GetMainPLLHz(void)
{
1a00155c:	b570      	push	{r4, r5, r6, lr}
1a00155e:	b082      	sub	sp, #8
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a001560:	4d16      	ldr	r5, [pc, #88]	; (1a0015bc <Chip_Clock_GetMainPLLHz+0x60>)
1a001562:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a001564:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a001568:	f7ff ff5c 	bl	1a001424 <Chip_Clock_GetClockInputHz>
1a00156c:	4606      	mov	r6, r0
	uint32_t msel, nsel, psel, direct, fbsel;
	uint32_t m, n, p;
	const uint8_t ptab[] = {1, 2, 4, 8};
1a00156e:	4b14      	ldr	r3, [pc, #80]	; (1a0015c0 <Chip_Clock_GetMainPLLHz+0x64>)
1a001570:	6818      	ldr	r0, [r3, #0]
1a001572:	9001      	str	r0, [sp, #4]

	/* No lock? */
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a001574:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a001576:	f010 0001 	ands.w	r0, r0, #1
1a00157a:	d01d      	beq.n	1a0015b8 <Chip_Clock_GetMainPLLHz+0x5c>
		return 0;
	}

	msel = (PLLReg >> 16) & 0xFF;
1a00157c:	f3c4 4007 	ubfx	r0, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a001580:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a001584:	f3c4 2101 	ubfx	r1, r4, #8, #2
	direct = (PLLReg >> 7) & 0x1;
	fbsel = (PLLReg >> 6) & 0x1;
1a001588:	f3c4 1580 	ubfx	r5, r4, #6, #1

	m = msel + 1;
1a00158c:	1c43      	adds	r3, r0, #1
	n = nsel + 1;
1a00158e:	3201      	adds	r2, #1
	p = ptab[psel];
1a001590:	a802      	add	r0, sp, #8
1a001592:	4401      	add	r1, r0
1a001594:	f811 0c04 	ldrb.w	r0, [r1, #-4]

	if (direct || fbsel) {
1a001598:	f014 0f80 	tst.w	r4, #128	; 0x80
1a00159c:	d100      	bne.n	1a0015a0 <Chip_Clock_GetMainPLLHz+0x44>
1a00159e:	b125      	cbz	r5, 1a0015aa <Chip_Clock_GetMainPLLHz+0x4e>
		return m * (freq / n);
1a0015a0:	fbb6 f0f2 	udiv	r0, r6, r2
1a0015a4:	fb03 f000 	mul.w	r0, r3, r0
1a0015a8:	e006      	b.n	1a0015b8 <Chip_Clock_GetMainPLLHz+0x5c>
	}

	return (m / (2 * p)) * (freq / n);
1a0015aa:	0040      	lsls	r0, r0, #1
1a0015ac:	fbb3 f3f0 	udiv	r3, r3, r0
1a0015b0:	fbb6 f0f2 	udiv	r0, r6, r2
1a0015b4:	fb00 f003 	mul.w	r0, r0, r3
}
1a0015b8:	b002      	add	sp, #8
1a0015ba:	bd70      	pop	{r4, r5, r6, pc}
1a0015bc:	40050000 	.word	0x40050000
1a0015c0:	1a0029b4 	.word	0x1a0029b4

1a0015c4 <Chip_Clock_GetDivRate>:
	return TestHz;
}

/* Returns clock rate out of a divider */
static uint32_t Chip_Clock_GetDivRate(CHIP_CGU_CLKIN_T clock, CHIP_CGU_IDIV_T divider)
{
1a0015c4:	b538      	push	{r3, r4, r5, lr}
1a0015c6:	460c      	mov	r4, r1
	CHIP_CGU_CLKIN_T input;
	uint32_t div;

	input = Chip_Clock_GetDividerSource(divider);
1a0015c8:	4608      	mov	r0, r1
1a0015ca:	f7ff ff0f 	bl	1a0013ec <Chip_Clock_GetDividerSource>
1a0015ce:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0015d0:	4620      	mov	r0, r4
1a0015d2:	f7ff ff19 	bl	1a001408 <Chip_Clock_GetDividerDivisor>
1a0015d6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0015d8:	4628      	mov	r0, r5
1a0015da:	f7ff ff23 	bl	1a001424 <Chip_Clock_GetClockInputHz>
1a0015de:	3401      	adds	r4, #1
}
1a0015e0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0015e4:	bd38      	pop	{r3, r4, r5, pc}
1a0015e6:	bf00      	nop

1a0015e8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0015e8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0015ea:	0085      	lsls	r5, r0, #2
1a0015ec:	4c0d      	ldr	r4, [pc, #52]	; (1a001624 <Chip_Clock_SetBaseClock+0x3c>)
1a0015ee:	5965      	ldr	r5, [r4, r5]

	if (BaseClock < CLK_BASE_NONE) {
1a0015f0:	281b      	cmp	r0, #27
1a0015f2:	d80f      	bhi.n	1a001614 <Chip_Clock_SetBaseClock+0x2c>
		if (Input != CLKINPUT_PD) {
1a0015f4:	2911      	cmp	r1, #17
1a0015f6:	d012      	beq.n	1a00161e <Chip_Clock_SetBaseClock+0x36>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0015f8:	4c0b      	ldr	r4, [pc, #44]	; (1a001628 <Chip_Clock_SetBaseClock+0x40>)
1a0015fa:	402c      	ands	r4, r5

			if (autoblocken) {
1a0015fc:	b10a      	cbz	r2, 1a001602 <Chip_Clock_SetBaseClock+0x1a>
				reg |= (1 << 11);
1a0015fe:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
			}
			if (powerdn) {
1a001602:	b10b      	cbz	r3, 1a001608 <Chip_Clock_SetBaseClock+0x20>
				reg |= (1 << 0);
1a001604:	f044 0401 	orr.w	r4, r4, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a001608:	ea44 6401 	orr.w	r4, r4, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a00160c:	0080      	lsls	r0, r0, #2
1a00160e:	4b05      	ldr	r3, [pc, #20]	; (1a001624 <Chip_Clock_SetBaseClock+0x3c>)
1a001610:	501c      	str	r4, [r3, r0]
1a001612:	e004      	b.n	1a00161e <Chip_Clock_SetBaseClock+0x36>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a001614:	f045 0501 	orr.w	r5, r5, #1
1a001618:	0080      	lsls	r0, r0, #2
1a00161a:	4b02      	ldr	r3, [pc, #8]	; (1a001624 <Chip_Clock_SetBaseClock+0x3c>)
1a00161c:	501d      	str	r5, [r3, r0]
	}
}
1a00161e:	bc30      	pop	{r4, r5}
1a001620:	4770      	bx	lr
1a001622:	bf00      	nop
1a001624:	4005005c 	.word	0x4005005c
1a001628:	e0fff7fe 	.word	0xe0fff7fe

1a00162c <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a00162c:	281b      	cmp	r0, #27
1a00162e:	d808      	bhi.n	1a001642 <Chip_Clock_GetBaseClock+0x16>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a001630:	0080      	lsls	r0, r0, #2
1a001632:	4b06      	ldr	r3, [pc, #24]	; (1a00164c <Chip_Clock_GetBaseClock+0x20>)
1a001634:	5818      	ldr	r0, [r3, r0]

	/* base clock is powered down? */
	if (reg & 1) {
1a001636:	f010 0f01 	tst.w	r0, #1
1a00163a:	d104      	bne.n	1a001646 <Chip_Clock_GetBaseClock+0x1a>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a00163c:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a001640:	4770      	bx	lr
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
		return CLKINPUT_PD;
1a001642:	2011      	movs	r0, #17
1a001644:	4770      	bx	lr

	reg = LPC_CGU->BASE_CLK[BaseClock];

	/* base clock is powered down? */
	if (reg & 1) {
		return CLKINPUT_PD;
1a001646:	2011      	movs	r0, #17
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
}
1a001648:	4770      	bx	lr
1a00164a:	bf00      	nop
1a00164c:	4005005c 	.word	0x4005005c

1a001650 <Chip_Clock_GetBaseClocktHz>:
	return rate;
}

/* Returns the frequency of the specified base clock source */
uint32_t Chip_Clock_GetBaseClocktHz(CHIP_CGU_BASE_CLK_T clock)
{
1a001650:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a001652:	f7ff ffeb 	bl	1a00162c <Chip_Clock_GetBaseClock>
1a001656:	f7ff fee5 	bl	1a001424 <Chip_Clock_GetClockInputHz>
}
1a00165a:	bd08      	pop	{r3, pc}

1a00165c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a00165c:	b909      	cbnz	r1, 1a001662 <Chip_Clock_EnableOpts+0x6>
}

/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;
1a00165e:	2101      	movs	r1, #1
1a001660:	e000      	b.n	1a001664 <Chip_Clock_EnableOpts+0x8>

	if (autoen) {
		reg |= (1 << 1);
1a001662:	2103      	movs	r1, #3
	}
	if (wakeupen) {
1a001664:	b10a      	cbz	r2, 1a00166a <Chip_Clock_EnableOpts+0xe>
		reg |= (1 << 2);
1a001666:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00166a:	2b02      	cmp	r3, #2
1a00166c:	d101      	bne.n	1a001672 <Chip_Clock_EnableOpts+0x16>
		reg |= (1 << 5);
1a00166e:	f041 0120 	orr.w	r1, r1, #32
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a001672:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a001676:	d305      	bcc.n	1a001684 <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a001678:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a00167c:	4b04      	ldr	r3, [pc, #16]	; (1a001690 <Chip_Clock_EnableOpts+0x34>)
1a00167e:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a001682:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a001684:	3020      	adds	r0, #32
1a001686:	4b03      	ldr	r3, [pc, #12]	; (1a001694 <Chip_Clock_EnableOpts+0x38>)
1a001688:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a00168c:	4770      	bx	lr
1a00168e:	bf00      	nop
1a001690:	40052000 	.word	0x40052000
1a001694:	40051000 	.word	0x40051000

1a001698 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a001698:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a00169c:	d309      	bcc.n	1a0016b2 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a00169e:	4a09      	ldr	r2, [pc, #36]	; (1a0016c4 <Chip_Clock_Enable+0x2c>)
1a0016a0:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0016a4:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016a8:	f043 0301 	orr.w	r3, r3, #1
1a0016ac:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0016b0:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a0016b2:	4a05      	ldr	r2, [pc, #20]	; (1a0016c8 <Chip_Clock_Enable+0x30>)
1a0016b4:	3020      	adds	r0, #32
1a0016b6:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0016ba:	f043 0301 	orr.w	r3, r3, #1
1a0016be:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0016c2:	4770      	bx	lr
1a0016c4:	40052000 	.word	0x40052000
1a0016c8:	40051000 	.word	0x40051000

1a0016cc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0016cc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0016ce:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0016d2:	d305      	bcc.n	1a0016e0 <Chip_Clock_GetRate+0x14>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0016d4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0016d8:	4a0d      	ldr	r2, [pc, #52]	; (1a001710 <Chip_Clock_GetRate+0x44>)
1a0016da:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a0016de:	e004      	b.n	1a0016ea <Chip_Clock_GetRate+0x1e>
	}
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0016e0:	f100 0320 	add.w	r3, r0, #32
1a0016e4:	4a0b      	ldr	r2, [pc, #44]	; (1a001714 <Chip_Clock_GetRate+0x48>)
1a0016e6:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0016ea:	f014 0f01 	tst.w	r4, #1
1a0016ee:	d00c      	beq.n	1a00170a <Chip_Clock_GetRate+0x3e>
		/* Get base clock for this peripheral clock */
		baseclk = Chip_Clock_FindBaseClock(clk);
1a0016f0:	f7ff fe32 	bl	1a001358 <Chip_Clock_FindBaseClock>

		/* Get base clock rate */
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a0016f4:	f7ff ffac 	bl	1a001650 <Chip_Clock_GetBaseClocktHz>

		/* Get divider for this clock */
		if (((reg >> 5) & 0x7) == 0) {
1a0016f8:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a0016fc:	d101      	bne.n	1a001702 <Chip_Clock_GetRate+0x36>
			div = 1;
1a0016fe:	2301      	movs	r3, #1
1a001700:	e000      	b.n	1a001704 <Chip_Clock_GetRate+0x38>
		}
		else {
			div = 2;/* No other dividers supported */
1a001702:	2302      	movs	r3, #2

		}
		rate = rate / div;
1a001704:	fbb0 f0f3 	udiv	r0, r0, r3
1a001708:	bd10      	pop	{r4, pc}
	}
	else {
		rate = 0;
1a00170a:	2000      	movs	r0, #0
	}

	return rate;
}
1a00170c:	bd10      	pop	{r4, pc}
1a00170e:	bf00      	nop
1a001710:	40052000 	.word	0x40052000
1a001714:	40051000 	.word	0x40051000

1a001718 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a001718:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00171a:	2069      	movs	r0, #105	; 0x69
1a00171c:	f7ff ffd6 	bl	1a0016cc <Chip_Clock_GetRate>
1a001720:	4b01      	ldr	r3, [pc, #4]	; (1a001728 <SystemCoreClockUpdate+0x10>)
1a001722:	6018      	str	r0, [r3, #0]
1a001724:	bd08      	pop	{r3, pc}
1a001726:	bf00      	nop
1a001728:	10002278 	.word	0x10002278

1a00172c <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a00172c:	4b09      	ldr	r3, [pc, #36]	; (1a001754 <Chip_TIMER_GetClockIndex+0x28>)
1a00172e:	4298      	cmp	r0, r3
1a001730:	d009      	beq.n	1a001746 <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a001732:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a001736:	4298      	cmp	r0, r3
1a001738:	d007      	beq.n	1a00174a <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a00173a:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a00173e:	4298      	cmp	r0, r3
1a001740:	d105      	bne.n	1a00174e <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER1;
1a001742:	2085      	movs	r0, #133	; 0x85
1a001744:	4770      	bx	lr
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
		clkTMR = CLK_MX_TIMER3;
1a001746:	20a4      	movs	r0, #164	; 0xa4
1a001748:	4770      	bx	lr
	}
    else if (pTMR == LPC_TIMER2) {
		clkTMR = CLK_MX_TIMER2;
1a00174a:	20a3      	movs	r0, #163	; 0xa3
1a00174c:	4770      	bx	lr
	}
    else if (pTMR == LPC_TIMER1) {
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a00174e:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a001750:	4770      	bx	lr
1a001752:	bf00      	nop
1a001754:	400c4000 	.word	0x400c4000

1a001758 <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a001758:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a00175a:	f7ff ffe7 	bl	1a00172c <Chip_TIMER_GetClockIndex>
1a00175e:	f7ff ff9b 	bl	1a001698 <Chip_Clock_Enable>
1a001762:	bd08      	pop	{r3, pc}

1a001764 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a001764:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a001766:	2300      	movs	r3, #0
1a001768:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a00176a:	2301      	movs	r3, #1
1a00176c:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a00176e:	2302      	movs	r3, #2
1a001770:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a001772:	6883      	ldr	r3, [r0, #8]
1a001774:	2b00      	cmp	r3, #0
1a001776:	d1fc      	bne.n	1a001772 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a001778:	6042      	str	r2, [r0, #4]
1a00177a:	4770      	bx	lr

1a00177c <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a00177c:	6803      	ldr	r3, [r0, #0]
1a00177e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a001782:	0189      	lsls	r1, r1, #6
1a001784:	b289      	uxth	r1, r1
1a001786:	430b      	orrs	r3, r1
	/* Update value */
	pDAC->CR = tmp;
1a001788:	6003      	str	r3, [r0, #0]
1a00178a:	4770      	bx	lr

1a00178c <Chip_DAC_SetBias>:
}

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a00178c:	6803      	ldr	r3, [r0, #0]
1a00178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a001792:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a001794:	2901      	cmp	r1, #1
1a001796:	d103      	bne.n	1a0017a0 <Chip_DAC_SetBias+0x14>
		pDAC->CR |= DAC_BIAS_EN;
1a001798:	6803      	ldr	r3, [r0, #0]
1a00179a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a00179e:	6003      	str	r3, [r0, #0]
1a0017a0:	4770      	bx	lr
1a0017a2:	bf00      	nop

1a0017a4 <Chip_DAC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the DAC peripheral */
void Chip_DAC_Init(LPC_DAC_T *pDAC)
{
1a0017a4:	b510      	push	{r4, lr}
1a0017a6:	4604      	mov	r4, r0
	Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a0017a8:	2002      	movs	r0, #2
1a0017aa:	2101      	movs	r1, #1
1a0017ac:	460a      	mov	r2, r1
1a0017ae:	460b      	mov	r3, r1
1a0017b0:	f7ff ff54 	bl	1a00165c <Chip_Clock_EnableOpts>

	/* Set maximum update rate 1MHz */
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
1a0017b4:	4620      	mov	r0, r4
1a0017b6:	2100      	movs	r1, #0
1a0017b8:	f7ff ffe8 	bl	1a00178c <Chip_DAC_SetBias>
1a0017bc:	bd10      	pop	{r4, pc}
1a0017be:	bf00      	nop

1a0017c0 <Chip_GPIO_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
1a0017c0:	4770      	bx	lr
1a0017c2:	bf00      	nop

1a0017c4 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a0017c4:	b570      	push	{r4, r5, r6, lr}
1a0017c6:	b08a      	sub	sp, #40	; 0x28
1a0017c8:	4605      	mov	r5, r0
1a0017ca:	460e      	mov	r6, r1
1a0017cc:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a0017ce:	f242 7310 	movw	r3, #10000	; 0x2710
1a0017d2:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a0017d4:	2806      	cmp	r0, #6
1a0017d6:	d101      	bne.n	1a0017dc <Chip_SetupCoreClock+0x18>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
1a0017d8:	f7ff fde2 	bl	1a0013a0 <Chip_Clock_EnableCrystal>
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a0017dc:	2004      	movs	r0, #4
1a0017de:	4629      	mov	r1, r5
1a0017e0:	2201      	movs	r2, #1
1a0017e2:	2300      	movs	r3, #0
1a0017e4:	f7ff ff00 	bl	1a0015e8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a0017e8:	4a47      	ldr	r2, [pc, #284]	; (1a001908 <Chip_SetupCoreClock+0x144>)
1a0017ea:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a0017ec:	f043 0301 	orr.w	r3, r3, #1
1a0017f0:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a0017f2:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a0017f6:	4630      	mov	r0, r6
1a0017f8:	a901      	add	r1, sp, #4
1a0017fa:	f7ff fe6f 	bl	1a0014dc <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a0017fe:	4b43      	ldr	r3, [pc, #268]	; (1a00190c <Chip_SetupCoreClock+0x148>)
1a001800:	429e      	cmp	r6, r3
1a001802:	d913      	bls.n	1a00182c <Chip_SetupCoreClock+0x68>
		if (ppll.ctrl & (1 << 6)) {
1a001804:	9b01      	ldr	r3, [sp, #4]
1a001806:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00180a:	d000      	beq.n	1a00180e <Chip_SetupCoreClock+0x4a>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00180c:	e7fe      	b.n	1a00180c <Chip_SetupCoreClock+0x48>
		} else if (ppll.ctrl & (1 << 7)){
1a00180e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001812:	d005      	beq.n	1a001820 <Chip_SetupCoreClock+0x5c>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a001814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001818:	9301      	str	r3, [sp, #4]
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a00181a:	2500      	movs	r5, #0

	if (core_freq > 110000000UL) {
		if (ppll.ctrl & (1 << 6)) {
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
1a00181c:	2601      	movs	r6, #1
1a00181e:	e007      	b.n	1a001830 <Chip_SetupCoreClock+0x6c>
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
			ppll.psel++;
1a001820:	9b04      	ldr	r3, [sp, #16]
1a001822:	3301      	adds	r3, #1
1a001824:	9304      	str	r3, [sp, #16]
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
		} else {
			pdivide = 1;
1a001826:	2501      	movs	r5, #1
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
	int i;
	volatile uint32_t delay = 10000; // FIXME: original was 500, fix for horrible crystals. @Eric
	uint32_t direct = 0, pdivide = 0;
1a001828:	2600      	movs	r6, #0
1a00182a:	e001      	b.n	1a001830 <Chip_SetupCoreClock+0x6c>
1a00182c:	2500      	movs	r5, #0
1a00182e:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001830:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001834:	9b01      	ldr	r3, [sp, #4]
1a001836:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00183a:	9a05      	ldr	r2, [sp, #20]
1a00183c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001840:	9a03      	ldr	r2, [sp, #12]
1a001842:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001846:	9a04      	ldr	r2, [sp, #16]
1a001848:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00184c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a001850:	4a2d      	ldr	r2, [pc, #180]	; (1a001908 <Chip_SetupCoreClock+0x144>)
1a001852:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a001854:	4b2c      	ldr	r3, [pc, #176]	; (1a001908 <Chip_SetupCoreClock+0x144>)
1a001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a001858:	f013 0f01 	tst.w	r3, #1
1a00185c:	d0fa      	beq.n	1a001854 <Chip_SetupCoreClock+0x90>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a00185e:	2004      	movs	r0, #4
1a001860:	2109      	movs	r1, #9
1a001862:	2201      	movs	r2, #1
1a001864:	2300      	movs	r3, #0
1a001866:	f7ff febf 	bl	1a0015e8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a00186a:	b1ee      	cbz	r6, 1a0018a8 <Chip_SetupCoreClock+0xe4>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00186c:	f242 7310 	movw	r3, #10000	; 0x2710
1a001870:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a001872:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001874:	1e5a      	subs	r2, r3, #1
1a001876:	9209      	str	r2, [sp, #36]	; 0x24
1a001878:	2b00      	cmp	r3, #0
1a00187a:	d1fa      	bne.n	1a001872 <Chip_SetupCoreClock+0xae>
		ppll.ctrl |= 1 << 7;
1a00187c:	9b01      	ldr	r3, [sp, #4]
1a00187e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001882:	9301      	str	r3, [sp, #4]
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001884:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a001888:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a00188c:	9a05      	ldr	r2, [sp, #20]
1a00188e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001892:	9a03      	ldr	r2, [sp, #12]
1a001894:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a001898:	9a04      	ldr	r2, [sp, #16]
1a00189a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00189e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0018a2:	4a19      	ldr	r2, [pc, #100]	; (1a001908 <Chip_SetupCoreClock+0x144>)
1a0018a4:	6453      	str	r3, [r2, #68]	; 0x44
1a0018a6:	e01c      	b.n	1a0018e2 <Chip_SetupCoreClock+0x11e>
		Chip_Clock_SetupMainPLL(&ppll); /* Set DIRECT to operate at full frequency */
	} else if (pdivide) {
1a0018a8:	b1dd      	cbz	r5, 1a0018e2 <Chip_SetupCoreClock+0x11e>
		delay = 10000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0018aa:	f242 7310 	movw	r3, #10000	; 0x2710
1a0018ae:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a0018b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0018b2:	1e5a      	subs	r2, r3, #1
1a0018b4:	9209      	str	r2, [sp, #36]	; 0x24
1a0018b6:	2b00      	cmp	r3, #0
1a0018b8:	d1fa      	bne.n	1a0018b0 <Chip_SetupCoreClock+0xec>
		ppll.psel--;
1a0018ba:	9b04      	ldr	r3, [sp, #16]
1a0018bc:	1e59      	subs	r1, r3, #1
1a0018be:	9104      	str	r1, [sp, #16]
1a0018c0:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0018c4:	9b01      	ldr	r3, [sp, #4]
1a0018c6:	ea43 6202 	orr.w	r2, r3, r2, lsl #24
1a0018ca:	9b05      	ldr	r3, [sp, #20]
1a0018cc:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
1a0018d0:	9b03      	ldr	r3, [sp, #12]
1a0018d2:	ea42 3303 	orr.w	r3, r2, r3, lsl #12
1a0018d6:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
1a0018da:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0018de:	4a0a      	ldr	r2, [pc, #40]	; (1a001908 <Chip_SetupCoreClock+0x144>)
1a0018e0:	6453      	str	r3, [r2, #68]	; 0x44
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0018e2:	b964      	cbnz	r4, 1a0018fe <Chip_SetupCoreClock+0x13a>
1a0018e4:	e00e      	b.n	1a001904 <Chip_SetupCoreClock+0x140>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a0018e6:	4a0a      	ldr	r2, [pc, #40]	; (1a001910 <Chip_SetupCoreClock+0x14c>)
1a0018e8:	eb02 0384 	add.w	r3, r2, r4, lsl #2
1a0018ec:	f812 0024 	ldrb.w	r0, [r2, r4, lsl #2]
1a0018f0:	7859      	ldrb	r1, [r3, #1]
1a0018f2:	789a      	ldrb	r2, [r3, #2]
1a0018f4:	78db      	ldrb	r3, [r3, #3]
1a0018f6:	f7ff fe77 	bl	1a0015e8 <Chip_Clock_SetBaseClock>

	if (setbase) {
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a0018fa:	3401      	adds	r4, #1
1a0018fc:	e000      	b.n	1a001900 <Chip_SetupCoreClock+0x13c>
1a0018fe:	2400      	movs	r4, #0
1a001900:	2c11      	cmp	r4, #17
1a001902:	d9f0      	bls.n	1a0018e6 <Chip_SetupCoreClock+0x122>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001904:	b00a      	add	sp, #40	; 0x28
1a001906:	bd70      	pop	{r4, r5, r6, pc}
1a001908:	40050000 	.word	0x40050000
1a00190c:	068e7780 	.word	0x068e7780
1a001910:	1a002a2c 	.word	0x1a002a2c

1a001914 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001914:	4b03      	ldr	r3, [pc, #12]	; (1a001924 <Chip_SSP_GetClockIndex+0x10>)
1a001916:	4298      	cmp	r0, r3
1a001918:	d101      	bne.n	1a00191e <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
1a00191a:	20a5      	movs	r0, #165	; 0xa5
1a00191c:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a00191e:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001920:	4770      	bx	lr
1a001922:	bf00      	nop
1a001924:	400c5000 	.word	0x400c5000

1a001928 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001928:	4b04      	ldr	r3, [pc, #16]	; (1a00193c <Chip_SSP_GetPeriphClockIndex+0x14>)
1a00192a:	4298      	cmp	r0, r3
1a00192c:	d102      	bne.n	1a001934 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
1a00192e:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001932:	4770      	bx	lr
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a001934:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a001938:	4770      	bx	lr
1a00193a:	bf00      	nop
1a00193c:	400c5000 	.word	0x400c5000

1a001940 <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a001940:	6803      	ldr	r3, [r0, #0]
1a001942:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001946:	0209      	lsls	r1, r1, #8
1a001948:	b289      	uxth	r1, r1
1a00194a:	430b      	orrs	r3, r1
1a00194c:	6003      	str	r3, [r0, #0]
	pSSP->CPSR = prescale;
1a00194e:	6102      	str	r2, [r0, #16]
1a001950:	4770      	bx	lr
1a001952:	bf00      	nop

1a001954 <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a001954:	b570      	push	{r4, r5, r6, lr}
1a001956:	4606      	mov	r6, r0
1a001958:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a00195a:	f7ff ffe5 	bl	1a001928 <Chip_SSP_GetPeriphClockIndex>
1a00195e:	f7ff feb5 	bl	1a0016cc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a001962:	2202      	movs	r2, #2
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
1a001964:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));

	cr0_div = 0;
1a001968:	2100      	movs	r1, #0
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a00196a:	e00c      	b.n	1a001986 <Chip_SSP_SetBitRate+0x32>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a00196c:	1c4c      	adds	r4, r1, #1
1a00196e:	fb02 f304 	mul.w	r3, r2, r4
1a001972:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a001976:	42ab      	cmp	r3, r5
1a001978:	d905      	bls.n	1a001986 <Chip_SSP_SetBitRate+0x32>
			cr0_div++;
			if (cr0_div > 0xFF) {
1a00197a:	2cff      	cmp	r4, #255	; 0xff
1a00197c:	d902      	bls.n	1a001984 <Chip_SSP_SetBitRate+0x30>
				cr0_div = 0;
				prescale += 2;
1a00197e:	3202      	adds	r2, #2
	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
			if (cr0_div > 0xFF) {
				cr0_div = 0;
1a001980:	2100      	movs	r1, #0
1a001982:	e000      	b.n	1a001986 <Chip_SSP_SetBitRate+0x32>
	prescale = 2;

	while (cmp_clk > bitRate) {
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a001984:	4621      	mov	r1, r4

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;

	while (cmp_clk > bitRate) {
1a001986:	42ab      	cmp	r3, r5
1a001988:	d8f0      	bhi.n	1a00196c <Chip_SSP_SetBitRate+0x18>
				prescale += 2;
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a00198a:	4630      	mov	r0, r6
1a00198c:	f7ff ffd8 	bl	1a001940 <Chip_SSP_SetClockRate>
1a001990:	bd70      	pop	{r4, r5, r6, pc}
1a001992:	bf00      	nop

1a001994 <Chip_SSP_Init>:
}

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a001994:	b510      	push	{r4, lr}
1a001996:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a001998:	f7ff ffbc 	bl	1a001914 <Chip_SSP_GetClockIndex>
1a00199c:	f7ff fe7c 	bl	1a001698 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0019a0:	4620      	mov	r0, r4
1a0019a2:	f7ff ffc1 	bl	1a001928 <Chip_SSP_GetPeriphClockIndex>
1a0019a6:	f7ff fe77 	bl	1a001698 <Chip_Clock_Enable>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0019aa:	6863      	ldr	r3, [r4, #4]
1a0019ac:	f023 0304 	bic.w	r3, r3, #4
1a0019b0:	6063      	str	r3, [r4, #4]
 * @return	 Nothing
 * @note	Note: The clockFormat is only used in SPI mode
 */
STATIC INLINE void Chip_SSP_SetFormat(LPC_SSP_T *pSSP, uint32_t bits, uint32_t frameFormat, uint32_t clockMode)
{
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0019b2:	6823      	ldr	r3, [r4, #0]
1a0019b4:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0019b8:	f043 0307 	orr.w	r3, r3, #7
1a0019bc:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a0019be:	4620      	mov	r0, r4
1a0019c0:	4901      	ldr	r1, [pc, #4]	; (1a0019c8 <Chip_SSP_Init+0x34>)
1a0019c2:	f7ff ffc7 	bl	1a001954 <Chip_SSP_SetBitRate>
1a0019c6:	bd10      	pop	{r4, pc}
1a0019c8:	000186a0 	.word	0x000186a0

1a0019cc <ResetISR>:
// not debug) by setting the define 'DONT_RESET_ON_RESTART'.
//
#ifndef DONT_RESET_ON_RESTART

    // Disable interrupts
    __asm volatile ("cpsid i");
1a0019cc:	b672      	cpsid	i
    // Note that we do not use the CMSIS register access mechanism,
    // as there is no guarantee that the project has been configured
    // to use CMSIS.

    // Write to LPC_RGU->RESET_CTRL0
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a0019ce:	4a19      	ldr	r2, [pc, #100]	; (1a001a34 <ResetISR+0x68>)
1a0019d0:	4b19      	ldr	r3, [pc, #100]	; (1a001a38 <ResetISR+0x6c>)
1a0019d2:	601a      	str	r2, [r3, #0]
    // GPIO_RST|AES_RST|ETHERNET_RST|SDIO_RST|DMA_RST|
    // USB1_RST|USB0_RST|LCD_RST|M0_SUB_RST

    // Write to LPC_RGU->RESET_CTRL1
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a0019d4:	4a19      	ldr	r2, [pc, #100]	; (1a001a3c <ResetISR+0x70>)
1a0019d6:	3304      	adds	r3, #4
1a0019d8:	601a      	str	r2, [r3, #0]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0019da:	2300      	movs	r3, #0
1a0019dc:	e005      	b.n	1a0019ea <ResetISR+0x1e>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a0019de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a0019e2:	4a17      	ldr	r2, [pc, #92]	; (1a001a40 <ResetISR+0x74>)
1a0019e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    // RITIMER_RST|TIMER3_RST|TIMER2_RST|TIMER1_RST|TIMER0_RST

    // Clear all pending interrupts in the NVIC
    volatile unsigned int *NVIC_ICPR = (unsigned int *) 0xE000E280;
    unsigned int irqpendloop;
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a0019e8:	3301      	adds	r3, #1
1a0019ea:	2b07      	cmp	r3, #7
1a0019ec:	d9f7      	bls.n	1a0019de <ResetISR+0x12>
// Reset entry point for your code.
// Sets up a simple runtime environment and initializes the C/C++
// library.
//
//*****************************************************************************
void ResetISR(void) {
1a0019ee:	b510      	push	{r4, lr}
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
    }

    // Reenable interrupts
    __asm volatile ("cpsie i");
1a0019f0:	b662      	cpsie	i

#endif  // ifndef DONT_RESET_ON_RESTART
// *************************************************************

#if defined (__USE_LPCOPEN)
    SystemInit();
1a0019f2:	f7ff f963 	bl	1a000cbc <SystemInit>
    //
    unsigned int LoadAddr, ExeAddr, SectionLen;
    unsigned int *SectionTableAddr;

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;
1a0019f6:	4b13      	ldr	r3, [pc, #76]	; (1a001a44 <ResetISR+0x78>)

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a0019f8:	e007      	b.n	1a001a0a <ResetISR+0x3e>
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a0019fa:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a0019fe:	6818      	ldr	r0, [r3, #0]
1a001a00:	6859      	ldr	r1, [r3, #4]
1a001a02:	689a      	ldr	r2, [r3, #8]
1a001a04:	f7fe fbcc 	bl	1a0001a0 <data_init>

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
        LoadAddr = *SectionTableAddr++;
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001a08:	4623      	mov	r3, r4

    // Load base address of Global Section Table
    SectionTableAddr = &__data_section_table;

    // Copy the data sections from flash to SRAM.
    while (SectionTableAddr < &__data_section_table_end) {
1a001a0a:	4a0f      	ldr	r2, [pc, #60]	; (1a001a48 <ResetISR+0x7c>)
1a001a0c:	4293      	cmp	r3, r2
1a001a0e:	d3f4      	bcc.n	1a0019fa <ResetISR+0x2e>
1a001a10:	e006      	b.n	1a001a20 <ResetISR+0x54>
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
1a001a12:	461c      	mov	r4, r3
        SectionLen = *SectionTableAddr++;
        bss_init(ExeAddr, SectionLen);
1a001a14:	f854 0b08 	ldr.w	r0, [r4], #8
1a001a18:	6859      	ldr	r1, [r3, #4]
1a001a1a:	f7fe fbcf 	bl	1a0001bc <bss_init>
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
        ExeAddr = *SectionTableAddr++;
        SectionLen = *SectionTableAddr++;
1a001a1e:	4623      	mov	r3, r4
        SectionLen = *SectionTableAddr++;
        data_init(LoadAddr, ExeAddr, SectionLen);
    }
    // At this point, SectionTableAddr = &__bss_section_table;
    // Zero fill the bss segment
    while (SectionTableAddr < &__bss_section_table_end) {
1a001a20:	4a0a      	ldr	r2, [pc, #40]	; (1a001a4c <ResetISR+0x80>)
1a001a22:	4293      	cmp	r3, r2
1a001a24:	d3f5      	bcc.n	1a001a12 <ResetISR+0x46>

#if defined (__USE_CMSIS)
    SystemInit();
#endif

    __libc_init_array();
1a001a26:	f000 ff2f 	bl	1a002888 <__libc_init_array>

#if defined (__REDLIB__)
    // Call the Redlib library, which in turn calls main()
    __main();
#else
    Board_Init(); // From Board module (modules/lpc4337_m4/board)
1a001a2a:	f7ff f931 	bl	1a000c90 <Board_Init>
    main();
1a001a2e:	f7fe ff0f 	bl	1a000850 <main>
    //
    // main() shouldn't return, but if it does, we'll just enter an infinite loop
    //
    while (1) {
        ;
    }
1a001a32:	e7fe      	b.n	1a001a32 <ResetISR+0x66>
1a001a34:	10df1000 	.word	0x10df1000
1a001a38:	40053100 	.word	0x40053100
1a001a3c:	01dff7ff 	.word	0x01dff7ff
1a001a40:	e000e280 	.word	0xe000e280
1a001a44:	1a000114 	.word	0x1a000114
1a001a48:	1a000150 	.word	0x1a000150
1a001a4c:	1a000178 	.word	0x1a000178

1a001a50 <_init>:
    unsigned int loop;
    for (loop = 0; loop < len; loop = loop + 4)
        *pulDest++ = 0;
}

void _init(void) {}
1a001a50:	4770      	bx	lr
1a001a52:	bf00      	nop

1a001a54 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001a54:	4b04      	ldr	r3, [pc, #16]	; (1a001a68 <cyclesCounterInit+0x14>)
1a001a56:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   *DWT_CTRL  |= 1;
1a001a58:	4b04      	ldr	r3, [pc, #16]	; (1a001a6c <cyclesCounterInit+0x18>)
1a001a5a:	681a      	ldr	r2, [r3, #0]
1a001a5c:	6813      	ldr	r3, [r2, #0]
1a001a5e:	f043 0301 	orr.w	r3, r3, #1
1a001a62:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001a64:	2001      	movs	r0, #1
1a001a66:	4770      	bx	lr
1a001a68:	10000058 	.word	0x10000058
1a001a6c:	10000054 	.word	0x10000054

1a001a70 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001a70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001a74:	0080      	lsls	r0, r0, #2
1a001a76:	4b03      	ldr	r3, [pc, #12]	; (1a001a84 <uartTxReady+0x14>)
1a001a78:	581b      	ldr	r3, [r3, r0]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a001a7a:	6958      	ldr	r0, [r3, #20]
}
1a001a7c:	f000 0020 	and.w	r0, r0, #32
1a001a80:	4770      	bx	lr
1a001a82:	bf00      	nop
1a001a84:	1a002a74 	.word	0x1a002a74

1a001a88 <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001a88:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001a8c:	0080      	lsls	r0, r0, #2
1a001a8e:	4b02      	ldr	r3, [pc, #8]	; (1a001a98 <uartTxWrite+0x10>)
1a001a90:	581b      	ldr	r3, [r3, r0]
 * @note	This function attempts to place a byte into the UART transmit
 *			FIFO or transmit hold register regard regardless of UART state
 */
STATIC INLINE void Chip_UART_SendByte(LPC_USART_T *pUART, uint8_t data)
{
	pUART->THR = (uint32_t) data;
1a001a92:	6019      	str	r1, [r3, #0]
1a001a94:	4770      	bx	lr
1a001a96:	bf00      	nop
1a001a98:	1a002a74 	.word	0x1a002a74

1a001a9c <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001a9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001aa0:	4607      	mov	r7, r0
1a001aa2:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001aa4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1a001b14 <uartInit+0x78>
1a001aa8:	0044      	lsls	r4, r0, #1
1a001aaa:	1823      	adds	r3, r4, r0
1a001aac:	009b      	lsls	r3, r3, #2
1a001aae:	eb08 0503 	add.w	r5, r8, r3
1a001ab2:	f858 6003 	ldr.w	r6, [r8, r3]
1a001ab6:	4630      	mov	r0, r6
1a001ab8:	f7ff f9e0 	bl	1a000e7c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001abc:	4630      	mov	r0, r6
1a001abe:	4649      	mov	r1, r9
1a001ac0:	f7ff fa06 	bl	1a000ed0 <Chip_UART_SetBaud>
 *			with a RX trip level of 8 characters, use something like
 *			(UART_FCR_FIFO_EN | UART_FCR_TRG_LEV2)
 */
STATIC INLINE void Chip_UART_SetupFIFOS(LPC_USART_T *pUART, uint32_t fcr)
{
	pUART->FCR = fcr;
1a001ac4:	2307      	movs	r3, #7
1a001ac6:	60b3      	str	r3, [r6, #8]
 *			receive hold register regard regardless of UART state. The
 *			FIFO status should be read first prior to using this function
 */
STATIC INLINE uint8_t Chip_UART_ReadByte(LPC_USART_T *pUART)
{
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001ac8:	6833      	ldr	r3, [r6, #0]
 * @param	pUART	: Pointer to selected pUART peripheral
 * @return Nothing
 */
STATIC INLINE void Chip_UART_TXEnable(LPC_USART_T *pUART)
{
    pUART->TER2 = UART_TER2_TXEN;
1a001aca:	2301      	movs	r3, #1
1a001acc:	65f3      	str	r3, [r6, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001ace:	7929      	ldrb	r1, [r5, #4]
1a001ad0:	796b      	ldrb	r3, [r5, #5]
1a001ad2:	79aa      	ldrb	r2, [r5, #6]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001ad4:	f042 0218 	orr.w	r2, r2, #24
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001ad8:	480c      	ldr	r0, [pc, #48]	; (1a001b0c <uartInit+0x70>)
1a001ada:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001ade:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001ae2:	79ee      	ldrb	r6, [r5, #7]
1a001ae4:	7a2a      	ldrb	r2, [r5, #8]
1a001ae6:	7a69      	ldrb	r1, [r5, #9]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001ae8:	f041 01d0 	orr.w	r1, r1, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001aec:	eb02 1346 	add.w	r3, r2, r6, lsl #5
1a001af0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001af4:	2f01      	cmp	r7, #1
1a001af6:	d107      	bne.n	1a001b08 <uartInit+0x6c>
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001af8:	4a05      	ldr	r2, [pc, #20]	; (1a001b10 <uartInit+0x74>)
1a001afa:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001afc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001b00:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001b02:	221a      	movs	r2, #26
1a001b04:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
1a001b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001b0c:	40086000 	.word	0x40086000
1a001b10:	40081000 	.word	0x40081000
1a001b14:	1a002a74 	.word	0x1a002a74

1a001b18 <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a001b18:	b538      	push	{r3, r4, r5, lr}
1a001b1a:	4604      	mov	r4, r0
1a001b1c:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001b1e:	4620      	mov	r0, r4
1a001b20:	f7ff ffa6 	bl	1a001a70 <uartTxReady>
1a001b24:	2800      	cmp	r0, #0
1a001b26:	d0fa      	beq.n	1a001b1e <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a001b28:	4620      	mov	r0, r4
1a001b2a:	4629      	mov	r1, r5
1a001b2c:	f7ff ffac 	bl	1a001a88 <uartTxWrite>
1a001b30:	bd38      	pop	{r3, r4, r5, pc}
1a001b32:	bf00      	nop

1a001b34 <uartWriteString>:
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a001b34:	b538      	push	{r3, r4, r5, lr}
1a001b36:	4605      	mov	r5, r0
1a001b38:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a001b3a:	e003      	b.n	1a001b44 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a001b3c:	4628      	mov	r0, r5
1a001b3e:	f7ff ffeb 	bl	1a001b18 <uartWriteByte>
      str++;
1a001b42:	3401      	adds	r4, #1
}

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
   while( *str != 0 ) {
1a001b44:	7821      	ldrb	r1, [r4, #0]
1a001b46:	2900      	cmp	r1, #0
1a001b48:	d1f8      	bne.n	1a001b3c <uartWriteString+0x8>
      uartWriteByte( uart, (uint8_t)*str );
      str++;
   }
}
1a001b4a:	bd38      	pop	{r3, r4, r5, pc}

1a001b4c <tickRead>:

// Read Tick Counter
tick_t tickRead( void )
{
   return tickCounter;
}
1a001b4c:	4b01      	ldr	r3, [pc, #4]	; (1a001b54 <tickRead+0x8>)
1a001b4e:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001b52:	4770      	bx	lr
1a001b54:	10000900 	.word	0x10000900

1a001b58 <tickPowerSet>:
}

// Enable or disable the peripheral energy and clock
void tickPowerSet( bool_t power )
{
   if( power ) {
1a001b58:	b118      	cbz	r0, 1a001b62 <tickPowerSet+0xa>
      // Enable SysTick IRQ and SysTick Timer
      SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a001b5a:	2207      	movs	r2, #7
1a001b5c:	4b03      	ldr	r3, [pc, #12]	; (1a001b6c <tickPowerSet+0x14>)
1a001b5e:	601a      	str	r2, [r3, #0]
1a001b60:	4770      	bx	lr
                      SysTick_CTRL_TICKINT_Msk   |
                      SysTick_CTRL_ENABLE_Msk;
   } else {
      // Disable SysTick IRQ and SysTick Timer
      SysTick->CTRL = 0x0000000;
1a001b62:	2200      	movs	r2, #0
1a001b64:	4b01      	ldr	r3, [pc, #4]	; (1a001b6c <tickPowerSet+0x14>)
1a001b66:	601a      	str	r2, [r3, #0]
1a001b68:	4770      	bx	lr
1a001b6a:	bf00      	nop
1a001b6c:	e000e010 	.word	0xe000e010

1a001b70 <tickInit>:

void tickerCallback( void );

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
1a001b70:	b510      	push	{r4, lr}
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
      tick_t tickRateHz = 0;
      if( tickRateMSvalue == 0 ) {
1a001b72:	ea50 0301 	orrs.w	r3, r0, r1
1a001b76:	d104      	bne.n	1a001b82 <tickInit+0x12>
         tickPowerSet( OFF );
1a001b78:	2000      	movs	r0, #0
1a001b7a:	f7ff ffed 	bl	1a001b58 <tickPowerSet>
         ret_val = 0;
1a001b7e:	2000      	movs	r0, #0
1a001b80:	bd10      	pop	{r4, pc}
      } else {
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a001b82:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
1a001b86:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001b8a:	2b00      	cmp	r3, #0
1a001b8c:	bf08      	it	eq
1a001b8e:	2a32      	cmpeq	r2, #50	; 0x32
1a001b90:	d222      	bcs.n	1a001bd8 <tickInit+0x68>
            tickRateMS = tickRateMSvalue;
1a001b92:	4b12      	ldr	r3, [pc, #72]	; (1a001bdc <tickInit+0x6c>)
1a001b94:	e9c3 0100 	strd	r0, r1, [r3]
            tickRateHz =  200 =>  200 ticks per second =>  5 ms tick
            tickRateHz =  100 =>  100 ticks per second => 10 ms tick
            tickRateHz =   20 =>   20 ticks per second => 50 ms tick
            */
            // Init SysTick interrupt, tickRateHz ticks per second
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001b98:	4b11      	ldr	r3, [pc, #68]	; (1a001be0 <tickInit+0x70>)
1a001b9a:	681c      	ldr	r4, [r3, #0]
1a001b9c:	fba4 2300 	umull	r2, r3, r4, r0
1a001ba0:	fb04 3301 	mla	r3, r4, r1, r3
1a001ba4:	4610      	mov	r0, r2
1a001ba6:	4619      	mov	r1, r3
1a001ba8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a001bac:	2300      	movs	r3, #0
1a001bae:	f000 fb9d 	bl	1a0022ec <__aeabi_uldivmod>
    must contain a vendor-specific implementation of this function.

 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */
1a001bb2:	3801      	subs	r0, #1
1a001bb4:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a001bb8:	d209      	bcs.n	1a001bce <tickInit+0x5e>

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
1a001bba:	4b0a      	ldr	r3, [pc, #40]	; (1a001be4 <tickInit+0x74>)
1a001bbc:	6058      	str	r0, [r3, #4]
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a001bbe:	21e0      	movs	r1, #224	; 0xe0
1a001bc0:	4a09      	ldr	r2, [pc, #36]	; (1a001be8 <tickInit+0x78>)
1a001bc2:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
{
  if ((ticks - 1) > SysTick_LOAD_RELOAD_Msk)  return (1);      /* Reload value impossible */

  SysTick->LOAD  = ticks - 1;                                  /* set reload register */
  NVIC_SetPriority (SysTick_IRQn, (1<<__NVIC_PRIO_BITS) - 1);  /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0;                                          /* Load the SysTick Counter Value */
1a001bc6:	2200      	movs	r2, #0
1a001bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001bca:	2207      	movs	r2, #7
1a001bcc:	601a      	str	r2, [r3, #0]
            if ( SysTick_Config( CMU_ClockFreqGet(cmuClock_CORE) / tickRateHz) ){
               //DEBUG_BREAK;
               ret_val = 0;
            }
            */
            tickPowerSet( ON );
1a001bce:	2001      	movs	r0, #1
1a001bd0:	f7ff ffc2 	bl	1a001b58 <tickPowerSet>

// Tick Initialization and rate configuration from 1 to 50 ms
bool_t tickInit( tick_t tickRateMSvalue )
{
   #ifndef TICK_OVER_RTOS
      bool_t ret_val = 1;
1a001bd4:	2001      	movs	r0, #1
1a001bd6:	bd10      	pop	{r4, pc}
            }
            */
            tickPowerSet( ON );
         } else {
            // Error, tickRateMS variable not in range (1 <= tickRateMS <= 50)
            ret_val = 0;
1a001bd8:	2000      	movs	r0, #0
      #else
         #warning "Unknown RTOS. Ticker disabled"
            return 0;
      #endif
   #endif
}
1a001bda:	bd10      	pop	{r4, pc}
1a001bdc:	10002280 	.word	0x10002280
1a001be0:	10002278 	.word	0x10002278
1a001be4:	e000e010 	.word	0xe000e010
1a001be8:	e000ed00 	.word	0xe000ed00

1a001bec <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001bec:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a001bee:	4907      	ldr	r1, [pc, #28]	; (1a001c0c <SysTick_Handler+0x20>)
1a001bf0:	e9d1 2300 	ldrd	r2, r3, [r1]
1a001bf4:	3201      	adds	r2, #1
1a001bf6:	f143 0300 	adc.w	r3, r3, #0
1a001bfa:	e9c1 2300 	strd	r2, r3, [r1]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a001bfe:	4b04      	ldr	r3, [pc, #16]	; (1a001c10 <SysTick_Handler+0x24>)
1a001c00:	681b      	ldr	r3, [r3, #0]
1a001c02:	b113      	cbz	r3, 1a001c0a <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a001c04:	4a03      	ldr	r2, [pc, #12]	; (1a001c14 <SysTick_Handler+0x28>)
1a001c06:	6810      	ldr	r0, [r2, #0]
1a001c08:	4798      	blx	r3
1a001c0a:	bd08      	pop	{r3, pc}
1a001c0c:	10000900 	.word	0x10000900
1a001c10:	100008fc 	.word	0x100008fc
1a001c14:	10000908 	.word	0x10000908

1a001c18 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a001c18:	e7fe      	b.n	1a001c18 <errorOcurred>
1a001c1a:	bf00      	nop

1a001c1c <doNothing>:
}

static void doNothing( void* ptr )
{
1a001c1c:	4770      	bx	lr
1a001c1e:	bf00      	nop

1a001c20 <Timer_Init>:
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 callBackFuncPtr_t voidFunctionPointer )
{
1a001c20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0) {
1a001c24:	b911      	cbnz	r1, 1a001c2c <Timer_Init+0xc>
      errorOcurred(0);
1a001c26:	2000      	movs	r0, #0
1a001c28:	f7ff fff6 	bl	1a001c18 <errorOcurred>
1a001c2c:	4605      	mov	r5, r0
1a001c2e:	4617      	mov	r7, r2
1a001c30:	460e      	mov	r6, r1
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a001c32:	4604      	mov	r4, r0
1a001c34:	4a38      	ldr	r2, [pc, #224]	; (1a001d18 <Timer_Init+0xf8>)
1a001c36:	0043      	lsls	r3, r0, #1
1a001c38:	4403      	add	r3, r0
1a001c3a:	009b      	lsls	r3, r3, #2
1a001c3c:	eb02 0803 	add.w	r8, r2, r3
1a001c40:	58d0      	ldr	r0, [r2, r3]
1a001c42:	f7ff fd89 	bl	1a001758 <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a001c46:	f898 3004 	ldrb.w	r3, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a001c4a:	095a      	lsrs	r2, r3, #5
1a001c4c:	f003 031f 	and.w	r3, r3, #31
1a001c50:	2101      	movs	r1, #1
1a001c52:	4099      	lsls	r1, r3
1a001c54:	f102 0340 	add.w	r3, r2, #64	; 0x40
1a001c58:	4a30      	ldr	r2, [pc, #192]	; (1a001d1c <Timer_Init+0xfc>)
1a001c5a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a001c5e:	eb04 0344 	add.w	r3, r4, r4, lsl #1
1a001c62:	009b      	lsls	r3, r3, #2
1a001c64:	4a2c      	ldr	r2, [pc, #176]	; (1a001d18 <Timer_Init+0xf8>)
1a001c66:	4413      	add	r3, r2
1a001c68:	791b      	ldrb	r3, [r3, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a001c6a:	095a      	lsrs	r2, r3, #5
1a001c6c:	3254      	adds	r2, #84	; 0x54
1a001c6e:	492b      	ldr	r1, [pc, #172]	; (1a001d1c <Timer_Init+0xfc>)
1a001c70:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
1a001c74:	f003 031f 	and.w	r3, r3, #31
1a001c78:	2201      	movs	r2, #1
1a001c7a:	fa02 f303 	lsl.w	r3, r2, r3
1a001c7e:	4219      	tst	r1, r3
1a001c80:	d0ed      	beq.n	1a001c5e <Timer_Init+0x3e>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a001c82:	4a25      	ldr	r2, [pc, #148]	; (1a001d18 <Timer_Init+0xf8>)
1a001c84:	006b      	lsls	r3, r5, #1
1a001c86:	442b      	add	r3, r5
1a001c88:	009b      	lsls	r3, r3, #2
1a001c8a:	eb02 0803 	add.w	r8, r2, r3
1a001c8e:	58d4      	ldr	r4, [r2, r3]
1a001c90:	4620      	mov	r0, r4
1a001c92:	f7ff fd67 	bl	1a001764 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a001c96:	012b      	lsls	r3, r5, #4
1a001c98:	4a21      	ldr	r2, [pc, #132]	; (1a001d20 <Timer_Init+0x100>)
1a001c9a:	50d7      	str	r7, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a001c9c:	6963      	ldr	r3, [r4, #20]
1a001c9e:	f043 0301 	orr.w	r3, r3, #1
1a001ca2:	6163      	str	r3, [r4, #20]
 * @return	Nothing
 * @note	Sets one of the timer match values.
 */
STATIC INLINE void Chip_TIMER_SetMatch(LPC_TIMER_T *pTMR, int8_t matchnum, uint32_t matchval)
{
	pTMR->MR[matchnum] = matchval;
1a001ca4:	61a6      	str	r6, [r4, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a001ca6:	6963      	ldr	r3, [r4, #20]
1a001ca8:	f043 0302 	orr.w	r3, r3, #2
1a001cac:	6163      	str	r3, [r4, #20]
 * @return	Nothing
 * @note	Enables the timer to start counting.
 */
STATIC INLINE void Chip_TIMER_Enable(LPC_TIMER_T *pTMR)
{
	pTMR->TCR |= TIMER_ENABLE;
1a001cae:	6863      	ldr	r3, [r4, #4]
1a001cb0:	f043 0301 	orr.w	r3, r3, #1
1a001cb4:	6063      	str	r3, [r4, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a001cb6:	f8d8 2008 	ldr.w	r2, [r8, #8]
1a001cba:	b2d3      	uxtb	r3, r2
    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
1a001cbc:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001cc0:	d006      	beq.n	1a001cd0 <Timer_Init+0xb0>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
1a001cc2:	f002 020f 	and.w	r2, r2, #15
1a001cc6:	4b17      	ldr	r3, [pc, #92]	; (1a001d24 <Timer_Init+0x104>)
1a001cc8:	4413      	add	r3, r2
1a001cca:	22c0      	movs	r2, #192	; 0xc0
1a001ccc:	761a      	strb	r2, [r3, #24]
1a001cce:	e005      	b.n	1a001cdc <Timer_Init+0xbc>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
1a001cd0:	4a15      	ldr	r2, [pc, #84]	; (1a001d28 <Timer_Init+0x108>)
1a001cd2:	fa42 f383 	sxtab	r3, r2, r3
1a001cd6:	22c0      	movs	r2, #192	; 0xc0
1a001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a001cdc:	4c0e      	ldr	r4, [pc, #56]	; (1a001d18 <Timer_Init+0xf8>)
1a001cde:	006e      	lsls	r6, r5, #1
1a001ce0:	1973      	adds	r3, r6, r5
1a001ce2:	009b      	lsls	r3, r3, #2
1a001ce4:	4423      	add	r3, r4
1a001ce6:	689b      	ldr	r3, [r3, #8]
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
1a001ce8:	b259      	sxtb	r1, r3
1a001cea:	0949      	lsrs	r1, r1, #5
1a001cec:	f003 031f 	and.w	r3, r3, #31
1a001cf0:	2201      	movs	r2, #1
1a001cf2:	fa02 f303 	lsl.w	r3, r2, r3
1a001cf6:	480c      	ldr	r0, [pc, #48]	; (1a001d28 <Timer_Init+0x108>)
1a001cf8:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a001cfc:	4435      	add	r5, r6
1a001cfe:	00ad      	lsls	r5, r5, #2
1a001d00:	4425      	add	r5, r4
1a001d02:	68a9      	ldr	r1, [r5, #8]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1a001d04:	b24b      	sxtb	r3, r1
1a001d06:	095b      	lsrs	r3, r3, #5
1a001d08:	f001 011f 	and.w	r1, r1, #31
1a001d0c:	408a      	lsls	r2, r1
1a001d0e:	3360      	adds	r3, #96	; 0x60
1a001d10:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
1a001d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a001d18:	1a002abc 	.word	0x1a002abc
1a001d1c:	40053000 	.word	0x40053000
1a001d20:	1000005c 	.word	0x1000005c
1a001d24:	e000ecfc 	.word	0xe000ecfc
1a001d28:	e000e100 	.word	0xe000e100

1a001d2c <Timer_microsecondsToTicks>:
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks( uint32_t uS )
{
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a001d2c:	23cc      	movs	r3, #204	; 0xcc
1a001d2e:	fb03 f000 	mul.w	r0, r3, r0
1a001d32:	4770      	bx	lr

1a001d34 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a001d34:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001d36:	2400      	movs	r4, #0
1a001d38:	e013      	b.n	1a001d62 <TIMER0_IRQHandler+0x2e>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001d3a:	4b0b      	ldr	r3, [pc, #44]	; (1a001d68 <TIMER0_IRQHandler+0x34>)
1a001d3c:	681a      	ldr	r2, [r3, #0]
1a001d3e:	f004 010f 	and.w	r1, r4, #15
1a001d42:	2301      	movs	r3, #1
1a001d44:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a001d46:	421a      	tst	r2, r3
1a001d48:	d009      	beq.n	1a001d5e <TIMER0_IRQHandler+0x2a>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001d4a:	4b08      	ldr	r3, [pc, #32]	; (1a001d6c <TIMER0_IRQHandler+0x38>)
1a001d4c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a001d50:	2000      	movs	r0, #0
1a001d52:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001d54:	b262      	sxtb	r2, r4
1a001d56:	2301      	movs	r3, #1
1a001d58:	4093      	lsls	r3, r2
1a001d5a:	4a03      	ldr	r2, [pc, #12]	; (1a001d68 <TIMER0_IRQHandler+0x34>)
1a001d5c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001d5e:	3401      	adds	r4, #1
1a001d60:	b2e4      	uxtb	r4, r4
void TIMER0_IRQHandler(void)
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001d62:	2c03      	cmp	r4, #3
1a001d64:	d9e9      	bls.n	1a001d3a <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001d66:	bd10      	pop	{r4, pc}
1a001d68:	40084000 	.word	0x40084000
1a001d6c:	1000005c 	.word	0x1000005c

1a001d70 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001d70:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001d72:	2400      	movs	r4, #0
1a001d74:	e014      	b.n	1a001da0 <TIMER1_IRQHandler+0x30>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001d76:	4b0c      	ldr	r3, [pc, #48]	; (1a001da8 <TIMER1_IRQHandler+0x38>)
1a001d78:	681a      	ldr	r2, [r3, #0]
1a001d7a:	f004 010f 	and.w	r1, r4, #15
1a001d7e:	2301      	movs	r3, #1
1a001d80:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001d82:	421a      	tst	r2, r3
1a001d84:	d00a      	beq.n	1a001d9c <TIMER1_IRQHandler+0x2c>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001d86:	1d23      	adds	r3, r4, #4
1a001d88:	4a08      	ldr	r2, [pc, #32]	; (1a001dac <TIMER1_IRQHandler+0x3c>)
1a001d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001d8e:	2000      	movs	r0, #0
1a001d90:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001d92:	b262      	sxtb	r2, r4
1a001d94:	2301      	movs	r3, #1
1a001d96:	4093      	lsls	r3, r2
1a001d98:	4a03      	ldr	r2, [pc, #12]	; (1a001da8 <TIMER1_IRQHandler+0x38>)
1a001d9a:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001d9c:	3401      	adds	r4, #1
1a001d9e:	b2e4      	uxtb	r4, r4
void TIMER1_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001da0:	2c03      	cmp	r4, #3
1a001da2:	d9e8      	bls.n	1a001d76 <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a001da4:	bd10      	pop	{r4, pc}
1a001da6:	bf00      	nop
1a001da8:	40085000 	.word	0x40085000
1a001dac:	1000005c 	.word	0x1000005c

1a001db0 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001db0:	b510      	push	{r4, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001db2:	2400      	movs	r4, #0
1a001db4:	e015      	b.n	1a001de2 <TIMER2_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001db6:	4b0c      	ldr	r3, [pc, #48]	; (1a001de8 <TIMER2_IRQHandler+0x38>)
1a001db8:	681a      	ldr	r2, [r3, #0]
1a001dba:	f004 010f 	and.w	r1, r4, #15
1a001dbe:	2301      	movs	r3, #1
1a001dc0:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001dc2:	421a      	tst	r2, r3
1a001dc4:	d00b      	beq.n	1a001dde <TIMER2_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001dc6:	f104 0308 	add.w	r3, r4, #8
1a001dca:	4a08      	ldr	r2, [pc, #32]	; (1a001dec <TIMER2_IRQHandler+0x3c>)
1a001dcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001dd0:	2000      	movs	r0, #0
1a001dd2:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001dd4:	b262      	sxtb	r2, r4
1a001dd6:	2301      	movs	r3, #1
1a001dd8:	4093      	lsls	r3, r2
1a001dda:	4a03      	ldr	r2, [pc, #12]	; (1a001de8 <TIMER2_IRQHandler+0x38>)
1a001ddc:	6013      	str	r3, [r2, #0]
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001dde:	3401      	adds	r4, #1
1a001de0:	b2e4      	uxtb	r4, r4

void TIMER2_IRQHandler( void )
{
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001de2:	2c03      	cmp	r4, #3
1a001de4:	d9e7      	bls.n	1a001db6 <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a001de6:	bd10      	pop	{r4, pc}
1a001de8:	400c3000 	.word	0x400c3000
1a001dec:	1000005c 	.word	0x1000005c

1a001df0 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001df0:	b510      	push	{r4, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001df2:	2400      	movs	r4, #0
1a001df4:	e015      	b.n	1a001e22 <TIMER3_IRQHandler+0x32>
 * @note	Determine if the match interrupt for the passed timer and match
 * counter is pending.
 */
STATIC INLINE bool Chip_TIMER_MatchPending(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001df6:	4b0c      	ldr	r3, [pc, #48]	; (1a001e28 <TIMER3_IRQHandler+0x38>)
1a001df8:	681a      	ldr	r2, [r3, #0]
1a001dfa:	f004 010f 	and.w	r1, r4, #15
1a001dfe:	2301      	movs	r3, #1
1a001e00:	408b      	lsls	r3, r1
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a001e02:	421a      	tst	r2, r3
1a001e04:	d00b      	beq.n	1a001e1e <TIMER3_IRQHandler+0x2e>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001e06:	f104 030c 	add.w	r3, r4, #12
1a001e0a:	4a08      	ldr	r2, [pc, #32]	; (1a001e2c <TIMER3_IRQHandler+0x3c>)
1a001e0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a001e10:	2000      	movs	r0, #0
1a001e12:	4798      	blx	r3
 * @return	Nothing
 * @note	Clears a pending timer match interrupt.
 */
STATIC INLINE void Chip_TIMER_ClearMatch(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001e14:	b262      	sxtb	r2, r4
1a001e16:	2301      	movs	r3, #1
1a001e18:	4093      	lsls	r3, r2
1a001e1a:	4a03      	ldr	r2, [pc, #12]	; (1a001e28 <TIMER3_IRQHandler+0x38>)
1a001e1c:	6013      	str	r3, [r2, #0]

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a001e1e:	3401      	adds	r4, #1
1a001e20:	b2e4      	uxtb	r4, r4
void TIMER3_IRQHandler( void )
{

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001e22:	2c03      	cmp	r4, #3
1a001e24:	d9e7      	bls.n	1a001df6 <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a001e26:	bd10      	pop	{r4, pc}
1a001e28:	400c4000 	.word	0x400c4000
1a001e2c:	1000005c 	.word	0x1000005c

1a001e30 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a001e30:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a001e32:	4d09      	ldr	r5, [pc, #36]	; (1a001e58 <gpioObtainPinInit+0x28>)
1a001e34:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a001e38:	182c      	adds	r4, r5, r0
1a001e3a:	5c28      	ldrb	r0, [r5, r0]
1a001e3c:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a001e3e:	7861      	ldrb	r1, [r4, #1]
1a001e40:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a001e42:	78a2      	ldrb	r2, [r4, #2]
1a001e44:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a001e46:	78e2      	ldrb	r2, [r4, #3]
1a001e48:	9b02      	ldr	r3, [sp, #8]
1a001e4a:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a001e4c:	7922      	ldrb	r2, [r4, #4]
1a001e4e:	9b03      	ldr	r3, [sp, #12]
1a001e50:	701a      	strb	r2, [r3, #0]
}
1a001e52:	bc30      	pop	{r4, r5}
1a001e54:	4770      	bx	lr
1a001e56:	bf00      	nop
1a001e58:	1a002aec 	.word	0x1a002aec

1a001e5c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
1a001e5c:	b570      	push	{r4, r5, r6, lr}
1a001e5e:	b084      	sub	sp, #16
1a001e60:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001e62:	2300      	movs	r3, #0
1a001e64:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001e68:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001e6c:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a001e70:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001e74:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001e78:	ab03      	add	r3, sp, #12
1a001e7a:	9300      	str	r3, [sp, #0]
1a001e7c:	f10d 030b 	add.w	r3, sp, #11
1a001e80:	9301      	str	r3, [sp, #4]
1a001e82:	f10d 010f 	add.w	r1, sp, #15
1a001e86:	f10d 020e 	add.w	r2, sp, #14
1a001e8a:	f10d 030d 	add.w	r3, sp, #13
1a001e8e:	f7ff ffcf 	bl	1a001e30 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a001e92:	2c05      	cmp	r4, #5
1a001e94:	f200 80a8 	bhi.w	1a001fe8 <gpioInit+0x18c>
1a001e98:	e8df f004 	tbb	[pc, r4]
1a001e9c:	46278408 	.word	0x46278408
1a001ea0:	0365      	.short	0x0365

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a001ea2:	4853      	ldr	r0, [pc, #332]	; (1a001ff0 <gpioInit+0x194>)
1a001ea4:	f7ff fc8c 	bl	1a0017c0 <Chip_GPIO_Init>
/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{

   bool_t ret_val     = 1;
1a001ea8:	2001      	movs	r0, #1
   switch(config) {

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
      break;
1a001eaa:	e09e      	b.n	1a001fea <gpioInit+0x18e>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001eac:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001eb0:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001eb4:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001eb8:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001ebc:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001ec0:	494c      	ldr	r1, [pc, #304]	; (1a001ff4 <gpioInit+0x198>)
1a001ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001ec6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001eca:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001ece:	2001      	movs	r0, #1
1a001ed0:	fa00 f402 	lsl.w	r4, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001ed4:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001edc:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001ee0:	ea22 0204 	bic.w	r2, r2, r4
1a001ee4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001ee8:	e07f      	b.n	1a001fea <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a001eea:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001eee:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001ef2:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001ef6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001efa:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001efe:	493d      	ldr	r1, [pc, #244]	; (1a001ff4 <gpioInit+0x198>)
1a001f00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001f04:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001f08:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001f0c:	2001      	movs	r0, #1
1a001f0e:	fa00 f402 	lsl.w	r4, r0, r2
1a001f12:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001f16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001f1a:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001f1e:	ea22 0204 	bic.w	r2, r2, r4
1a001f22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001f26:	e060      	b.n	1a001fea <gpioInit+0x18e>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a001f28:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001f2c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001f30:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001f34:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001f38:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001f3c:	492d      	ldr	r1, [pc, #180]	; (1a001ff4 <gpioInit+0x198>)
1a001f3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001f42:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001f46:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001f4a:	2001      	movs	r0, #1
1a001f4c:	fa00 f402 	lsl.w	r4, r0, r2
1a001f50:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001f58:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001f5c:	ea22 0204 	bic.w	r2, r2, r4
1a001f60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001f64:	e041      	b.n	1a001fea <gpioInit+0x18e>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a001f66:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001f6a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001f6e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001f72:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001f76:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001f7a:	491e      	ldr	r1, [pc, #120]	; (1a001ff4 <gpioInit+0x198>)
1a001f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001f80:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001f84:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a001f88:	2001      	movs	r0, #1
1a001f8a:	fa00 f402 	lsl.w	r4, r0, r2
1a001f8e:	f501 21dc 	add.w	r1, r1, #450560	; 0x6e000
1a001f92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001f96:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
1a001f9a:	ea22 0204 	bic.w	r2, r2, r4
1a001f9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001fa2:	e022      	b.n	1a001fea <gpioInit+0x18e>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a001fa4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001fa8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001fac:	f89d 200d 	ldrb.w	r2, [sp, #13]
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMux(uint8_t port, uint8_t pin, uint16_t mode, uint8_t func)
{
	Chip_SCU_PinMuxSet(port, pin, (mode | (uint16_t) func));
1a001fb0:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
 * @note	Do not use for clock pins (SFSCLK0 .. SFSCLK4). Use
 * Chip_SCU_ClockPinMux() function for SFSCLKx clock pins.
 */
STATIC INLINE void Chip_SCU_PinMuxSet(uint8_t port, uint8_t pin, uint16_t modefunc)
{
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001fb4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001fb8:	490e      	ldr	r1, [pc, #56]	; (1a001ff4 <gpioInit+0x198>)
1a001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001fbe:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a001fc2:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a001fc6:	b25a      	sxtb	r2, r3
1a001fc8:	2001      	movs	r0, #1
1a001fca:	fa00 f602 	lsl.w	r6, r0, r2
 * Chip_GPIO_SetPortDIR() function instead.
 */
STATIC INLINE void Chip_GPIO_SetDir(LPC_GPIO_T *pGPIO, uint8_t portNum, uint32_t bitValue, uint8_t out)
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
1a001fce:	4a08      	ldr	r2, [pc, #32]	; (1a001ff0 <gpioInit+0x194>)
1a001fd0:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a001fd4:	f852 1025 	ldr.w	r1, [r2, r5, lsl #2]
1a001fd8:	4331      	orrs	r1, r6
1a001fda:	f842 1025 	str.w	r1, [r2, r5, lsl #2]
 * @return	Nothing
 * @note	This function replaces Chip_GPIO_WritePortBit()
 */
STATIC INLINE void Chip_GPIO_SetPinState(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin, bool setting)
{
	pGPIO->B[port][pin] = setting;
1a001fde:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a001fe2:	2100      	movs	r1, #0
1a001fe4:	54d1      	strb	r1, [r2, r3]
1a001fe6:	e000      	b.n	1a001fea <gpioInit+0x18e>
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
      break;

   default:
      ret_val = 0;
1a001fe8:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a001fea:	b004      	add	sp, #16
1a001fec:	bd70      	pop	{r4, r5, r6, pc}
1a001fee:	bf00      	nop
1a001ff0:	400f4000 	.word	0x400f4000
1a001ff4:	40086000 	.word	0x40086000

1a001ff8 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
1a001ff8:	b510      	push	{r4, lr}
1a001ffa:	b084      	sub	sp, #16
1a001ffc:	460c      	mov	r4, r1

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a001ffe:	2300      	movs	r3, #0
1a002000:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a002004:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a002008:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00200c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002010:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a002014:	ab03      	add	r3, sp, #12
1a002016:	9300      	str	r3, [sp, #0]
1a002018:	f10d 030b 	add.w	r3, sp, #11
1a00201c:	9301      	str	r3, [sp, #4]
1a00201e:	f10d 010f 	add.w	r1, sp, #15
1a002022:	f10d 020e 	add.w	r2, sp, #14
1a002026:	f10d 030d 	add.w	r3, sp, #13
1a00202a:	f7ff ff01 	bl	1a001e30 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00202e:	f89d 200c 	ldrb.w	r2, [sp, #12]
1a002032:	f89d 300b 	ldrb.w	r3, [sp, #11]
1a002036:	3400      	adds	r4, #0
1a002038:	bf18      	it	ne
1a00203a:	2401      	movne	r4, #1
1a00203c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002040:	4a02      	ldr	r2, [pc, #8]	; (1a00204c <gpioWrite+0x54>)
1a002042:	54d4      	strb	r4, [r2, r3]

   return ret_val;
}
1a002044:	2001      	movs	r0, #1
1a002046:	b004      	add	sp, #16
1a002048:	bd10      	pop	{r4, pc}
1a00204a:	bf00      	nop
1a00204c:	400f4000 	.word	0x400f4000

1a002050 <gpioRead>:
   return gpioWrite( pin, !gpioRead(pin) );
}


bool_t gpioRead( gpioMap_t pin )
{
1a002050:	b500      	push	{lr}
1a002052:	b085      	sub	sp, #20

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a002054:	2300      	movs	r3, #0
1a002056:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a00205a:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a00205e:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a002062:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a002066:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a00206a:	ab03      	add	r3, sp, #12
1a00206c:	9300      	str	r3, [sp, #0]
1a00206e:	f10d 030b 	add.w	r3, sp, #11
1a002072:	9301      	str	r3, [sp, #4]
1a002074:	f10d 010f 	add.w	r1, sp, #15
1a002078:	f10d 020e 	add.w	r2, sp, #14
1a00207c:	f10d 030d 	add.w	r3, sp, #13
1a002080:	f7ff fed6 	bl	1a001e30 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a002084:	f99d 200c 	ldrsb.w	r2, [sp, #12]
1a002088:	f89d 300b 	ldrb.w	r3, [sp, #11]
 * @return	true of the GPIO is high, false if low
 * @note	It is recommended to use the Chip_GPIO_GetPinState() function instead.
 */
STATIC INLINE bool Chip_GPIO_ReadPortBit(LPC_GPIO_T *pGPIO, uint32_t port, uint8_t pin)
{
	return (bool) pGPIO->B[port][pin];
1a00208c:	eb03 1342 	add.w	r3, r3, r2, lsl #5
1a002090:	4a04      	ldr	r2, [pc, #16]	; (1a0020a4 <gpioRead+0x54>)
1a002092:	5cd3      	ldrb	r3, [r2, r3]
1a002094:	f013 0fff 	tst.w	r3, #255	; 0xff

   return ret_val;
}
1a002098:	bf14      	ite	ne
1a00209a:	2001      	movne	r0, #1
1a00209c:	2000      	moveq	r0, #0
1a00209e:	b005      	add	sp, #20
1a0020a0:	f85d fb04 	ldr.w	pc, [sp], #4
1a0020a4:	400f4000 	.word	0x400f4000

1a0020a8 <gpioToggle>:
   return ret_val;
}


bool_t gpioToggle( gpioMap_t pin )
{
1a0020a8:	b510      	push	{r4, lr}
1a0020aa:	4604      	mov	r4, r0

   return gpioWrite( pin, !gpioRead(pin) );
1a0020ac:	f7ff ffd0 	bl	1a002050 <gpioRead>
1a0020b0:	fab0 f180 	clz	r1, r0
1a0020b4:	0949      	lsrs	r1, r1, #5
1a0020b6:	4620      	mov	r0, r4
1a0020b8:	f7ff ff9e 	bl	1a001ff8 <gpioWrite>
}
1a0020bc:	bd10      	pop	{r4, pc}
1a0020be:	bf00      	nop

1a0020c0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0020c0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0020c2:	4b04      	ldr	r3, [pc, #16]	; (1a0020d4 <USB0_IRQHandler+0x14>)
1a0020c4:	681b      	ldr	r3, [r3, #0]
1a0020c6:	681b      	ldr	r3, [r3, #0]
1a0020c8:	68db      	ldr	r3, [r3, #12]
1a0020ca:	4a03      	ldr	r2, [pc, #12]	; (1a0020d8 <USB0_IRQHandler+0x18>)
1a0020cc:	6810      	ldr	r0, [r2, #0]
1a0020ce:	4798      	blx	r3
1a0020d0:	bd08      	pop	{r3, pc}
1a0020d2:	bf00      	nop
1a0020d4:	10002288 	.word	0x10002288
1a0020d8:	1000090c 	.word	0x1000090c

1a0020dc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0020dc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0020de:	f7ff fb1b 	bl	1a001718 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0020e2:	4b3a      	ldr	r3, [pc, #232]	; (1a0021cc <boardInit+0xf0>)
1a0020e4:	6818      	ldr	r0, [r3, #0]
1a0020e6:	f7ff fcb5 	bl	1a001a54 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms
   tickInit( 1 );
1a0020ea:	2001      	movs	r0, #1
1a0020ec:	2100      	movs	r1, #0
1a0020ee:	f7ff fd3f 	bl	1a001b70 <tickInit>

   // Inicializar GPIOs
   gpioInit( 0, GPIO_ENABLE );
1a0020f2:	2000      	movs	r0, #0
1a0020f4:	2105      	movs	r1, #5
1a0020f6:	f7ff feb1 	bl	1a001e5c <gpioInit>

   // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
   gpioInit( TEC1, GPIO_INPUT );
1a0020fa:	2024      	movs	r0, #36	; 0x24
1a0020fc:	2100      	movs	r1, #0
1a0020fe:	f7ff fead 	bl	1a001e5c <gpioInit>
   gpioInit( TEC2, GPIO_INPUT );
1a002102:	2025      	movs	r0, #37	; 0x25
1a002104:	2100      	movs	r1, #0
1a002106:	f7ff fea9 	bl	1a001e5c <gpioInit>
   gpioInit( TEC3, GPIO_INPUT );
1a00210a:	2026      	movs	r0, #38	; 0x26
1a00210c:	2100      	movs	r1, #0
1a00210e:	f7ff fea5 	bl	1a001e5c <gpioInit>
   gpioInit( TEC4, GPIO_INPUT );
1a002112:	2027      	movs	r0, #39	; 0x27
1a002114:	2100      	movs	r1, #0
1a002116:	f7ff fea1 	bl	1a001e5c <gpioInit>

   // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
   gpioInit( LEDR, GPIO_OUTPUT );
1a00211a:	2028      	movs	r0, #40	; 0x28
1a00211c:	2101      	movs	r1, #1
1a00211e:	f7ff fe9d 	bl	1a001e5c <gpioInit>
   gpioInit( LEDG, GPIO_OUTPUT );
1a002122:	2029      	movs	r0, #41	; 0x29
1a002124:	2101      	movs	r1, #1
1a002126:	f7ff fe99 	bl	1a001e5c <gpioInit>
   gpioInit( LEDB, GPIO_OUTPUT );
1a00212a:	202a      	movs	r0, #42	; 0x2a
1a00212c:	2101      	movs	r1, #1
1a00212e:	f7ff fe95 	bl	1a001e5c <gpioInit>
   gpioInit( LED1, GPIO_OUTPUT );
1a002132:	202b      	movs	r0, #43	; 0x2b
1a002134:	2101      	movs	r1, #1
1a002136:	f7ff fe91 	bl	1a001e5c <gpioInit>
   gpioInit( LED2, GPIO_OUTPUT );
1a00213a:	202c      	movs	r0, #44	; 0x2c
1a00213c:	2101      	movs	r1, #1
1a00213e:	f7ff fe8d 	bl	1a001e5c <gpioInit>
   gpioInit( LED3, GPIO_OUTPUT );
1a002142:	202d      	movs	r0, #45	; 0x2d
1a002144:	2101      	movs	r1, #1
1a002146:	f7ff fe89 	bl	1a001e5c <gpioInit>


   // Configuracion de pines de entrada de la CIAA-NXP
   gpioInit( DI0, GPIO_INPUT );
1a00214a:	202e      	movs	r0, #46	; 0x2e
1a00214c:	2100      	movs	r1, #0
1a00214e:	f7ff fe85 	bl	1a001e5c <gpioInit>
   gpioInit( DI1, GPIO_INPUT );
1a002152:	202f      	movs	r0, #47	; 0x2f
1a002154:	2100      	movs	r1, #0
1a002156:	f7ff fe81 	bl	1a001e5c <gpioInit>
   gpioInit( DI2, GPIO_INPUT );
1a00215a:	2030      	movs	r0, #48	; 0x30
1a00215c:	2100      	movs	r1, #0
1a00215e:	f7ff fe7d 	bl	1a001e5c <gpioInit>
   gpioInit( DI3, GPIO_INPUT );
1a002162:	2031      	movs	r0, #49	; 0x31
1a002164:	2100      	movs	r1, #0
1a002166:	f7ff fe79 	bl	1a001e5c <gpioInit>
   gpioInit( DI4, GPIO_INPUT );
1a00216a:	2032      	movs	r0, #50	; 0x32
1a00216c:	2100      	movs	r1, #0
1a00216e:	f7ff fe75 	bl	1a001e5c <gpioInit>
   gpioInit( DI5, GPIO_INPUT );
1a002172:	2033      	movs	r0, #51	; 0x33
1a002174:	2100      	movs	r1, #0
1a002176:	f7ff fe71 	bl	1a001e5c <gpioInit>
   gpioInit( DI6, GPIO_INPUT );
1a00217a:	2034      	movs	r0, #52	; 0x34
1a00217c:	2100      	movs	r1, #0
1a00217e:	f7ff fe6d 	bl	1a001e5c <gpioInit>
   gpioInit( DI7, GPIO_INPUT );
1a002182:	2035      	movs	r0, #53	; 0x35
1a002184:	2100      	movs	r1, #0
1a002186:	f7ff fe69 	bl	1a001e5c <gpioInit>

   // Configuracion de pines de salida de la CIAA-NXP
   gpioInit( DO0, GPIO_OUTPUT );
1a00218a:	2036      	movs	r0, #54	; 0x36
1a00218c:	2101      	movs	r1, #1
1a00218e:	f7ff fe65 	bl	1a001e5c <gpioInit>
   gpioInit( DO1, GPIO_OUTPUT );
1a002192:	2037      	movs	r0, #55	; 0x37
1a002194:	2101      	movs	r1, #1
1a002196:	f7ff fe61 	bl	1a001e5c <gpioInit>
   gpioInit( DO2, GPIO_OUTPUT );
1a00219a:	2038      	movs	r0, #56	; 0x38
1a00219c:	2101      	movs	r1, #1
1a00219e:	f7ff fe5d 	bl	1a001e5c <gpioInit>
   gpioInit( DO3, GPIO_OUTPUT );
1a0021a2:	2039      	movs	r0, #57	; 0x39
1a0021a4:	2101      	movs	r1, #1
1a0021a6:	f7ff fe59 	bl	1a001e5c <gpioInit>
   gpioInit( DO4, GPIO_OUTPUT );
1a0021aa:	203a      	movs	r0, #58	; 0x3a
1a0021ac:	2101      	movs	r1, #1
1a0021ae:	f7ff fe55 	bl	1a001e5c <gpioInit>
   gpioInit( DO5, GPIO_OUTPUT );
1a0021b2:	203b      	movs	r0, #59	; 0x3b
1a0021b4:	2101      	movs	r1, #1
1a0021b6:	f7ff fe51 	bl	1a001e5c <gpioInit>
   gpioInit( DO6, GPIO_OUTPUT );
1a0021ba:	203c      	movs	r0, #60	; 0x3c
1a0021bc:	2101      	movs	r1, #1
1a0021be:	f7ff fe4d 	bl	1a001e5c <gpioInit>
   gpioInit( DO7, GPIO_OUTPUT );
1a0021c2:	203d      	movs	r0, #61	; 0x3d
1a0021c4:	2101      	movs	r1, #1
1a0021c6:	f7ff fe49 	bl	1a001e5c <gpioInit>
1a0021ca:	bd08      	pop	{r3, pc}
1a0021cc:	10002278 	.word	0x10002278

1a0021d0 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a0021d0:	b510      	push	{r4, lr}
1a0021d2:	4604      	mov	r4, r0
   delay->duration = duration/tickRateMS;
1a0021d4:	4610      	mov	r0, r2
1a0021d6:	4619      	mov	r1, r3
1a0021d8:	4b04      	ldr	r3, [pc, #16]	; (1a0021ec <delayInit+0x1c>)
1a0021da:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0021de:	f000 f885 	bl	1a0022ec <__aeabi_uldivmod>
1a0021e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a0021e6:	2300      	movs	r3, #0
1a0021e8:	7423      	strb	r3, [r4, #16]
1a0021ea:	bd10      	pop	{r4, pc}
1a0021ec:	10002280 	.word	0x10002280

1a0021f0 <delayRead>:
}

bool_t delayRead( delay_t * delay )
{
1a0021f0:	b510      	push	{r4, lr}
1a0021f2:	4604      	mov	r4, r0

   bool_t timeArrived = 0;

   if( !delay->running ) {
1a0021f4:	7c03      	ldrb	r3, [r0, #16]
1a0021f6:	b93b      	cbnz	r3, 1a002208 <delayRead+0x18>
      delay->startTime = tickRead();
1a0021f8:	f7ff fca8 	bl	1a001b4c <tickRead>
1a0021fc:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a002200:	2301      	movs	r3, #1
1a002202:	7423      	strb	r3, [r4, #16]
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a002204:	2000      	movs	r0, #0
1a002206:	bd10      	pop	{r4, pc}

   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a002208:	f7ff fca0 	bl	1a001b4c <tickRead>
1a00220c:	e9d4 2300 	ldrd	r2, r3, [r4]
1a002210:	1a80      	subs	r0, r0, r2
1a002212:	eb61 0103 	sbc.w	r1, r1, r3
1a002216:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
1a00221a:	4299      	cmp	r1, r3
1a00221c:	bf08      	it	eq
1a00221e:	4290      	cmpeq	r0, r2
1a002220:	d303      	bcc.n	1a00222a <delayRead+0x3a>
         timeArrived = 1;
         delay->running = 0;
1a002222:	2300      	movs	r3, #0
1a002224:	7423      	strb	r3, [r4, #16]
   if( !delay->running ) {
      delay->startTime = tickRead();
      delay->running = 1;
   } else {
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
         timeArrived = 1;
1a002226:	2001      	movs	r0, #1
1a002228:	bd10      	pop	{r4, pc}
}

bool_t delayRead( delay_t * delay )
{

   bool_t timeArrived = 0;
1a00222a:	2000      	movs	r0, #0
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a00222c:	bd10      	pop	{r4, pc}
1a00222e:	bf00      	nop

1a002230 <printInitUart>:
{
   *printer = uart;
}

void printInitUart( print_t* printer, uartMap_t uart, uint32_t baudRate )
{
1a002230:	b508      	push	{r3, lr}
   *printer = uart;
1a002232:	7001      	strb	r1, [r0, #0]
   uartInit( uart, baudRate );
1a002234:	4608      	mov	r0, r1
1a002236:	4611      	mov	r1, r2
1a002238:	f7ff fc30 	bl	1a001a9c <uartInit>
1a00223c:	bd08      	pop	{r3, pc}
1a00223e:	bf00      	nop

1a002240 <printString>:


// Print String

void printString( print_t printer, const char* string )
{
1a002240:	b508      	push	{r3, lr}
   uartWriteString( printer, string );
1a002242:	f7ff fc77 	bl	1a001b34 <uartWriteString>
1a002246:	bd08      	pop	{r3, pc}

1a002248 <printEnter>:
}

void printEnter( print_t printer )
{
1a002248:	b508      	push	{r3, lr}
   uartWriteString( printer, PRINT_ENTER_STRING );
1a00224a:	4902      	ldr	r1, [pc, #8]	; (1a002254 <printEnter+0xc>)
1a00224c:	f7ff fc72 	bl	1a001b34 <uartWriteString>
1a002250:	bd08      	pop	{r3, pc}
1a002252:	bf00      	nop
1a002254:	1a002c24 	.word	0x1a002c24

1a002258 <clearInterrupt>:
}

static void clearInterrupt(uint8_t irqChannel)
{
   /* Clear interrupt flag for irqChannel */
   Chip_PININT_ClearIntStatus(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
1a002258:	2301      	movs	r3, #1
1a00225a:	4083      	lsls	r3, r0
 * @param	pins	: Pin interrupts to clear (ORed value of PININTCH*)
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearIntStatus(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->IST = pins;
1a00225c:	4a01      	ldr	r2, [pc, #4]	; (1a002264 <clearInterrupt+0xc>)
1a00225e:	6253      	str	r3, [r2, #36]	; 0x24
1a002260:	4770      	bx	lr
1a002262:	bf00      	nop
1a002264:	40087000 	.word	0x40087000

1a002268 <serveInterrupt>:
}

static void serveInterrupt(uint8_t irqChannel)
{
1a002268:	b570      	push	{r4, r5, r6, lr}
   ultrasonicSensorMap_t aSensor = ultrasonicSensorsIrqMap[irqChannel];
1a00226a:	4b13      	ldr	r3, [pc, #76]	; (1a0022b8 <serveInterrupt+0x50>)
1a00226c:	5c1b      	ldrb	r3, [r3, r0]
 * @param	pPININT	: The base address of Pin interrupt block
 * @return	PININT states (bit n = high) with a latched rise state detected
 */
STATIC INLINE uint32_t Chip_PININT_GetRiseStates(LPC_PIN_INT_T *pPININT)
{
	return pPININT->RISE;
1a00226e:	4a13      	ldr	r2, [pc, #76]	; (1a0022bc <serveInterrupt+0x54>)
1a002270:	69d2      	ldr	r2, [r2, #28]
   /* If interrupt was because a rising edge */
   if ( Chip_PININT_GetRiseStates(LPC_GPIO_PIN_INT) & PININTCH(irqChannel) ) {
1a002272:	2401      	movs	r4, #1
1a002274:	4084      	lsls	r4, r0
1a002276:	4214      	tst	r4, r2
1a002278:	d00a      	beq.n	1a002290 <serveInterrupt+0x28>
 * @return	Current timer terminal count value
 * @note	Returns the current timer terminal count.
 */
STATIC INLINE uint32_t Chip_TIMER_ReadCount(LPC_TIMER_T *pTMR)
{
	return pTMR->TC;
1a00227a:	4a11      	ldr	r2, [pc, #68]	; (1a0022c0 <serveInterrupt+0x58>)
1a00227c:	6892      	ldr	r2, [r2, #8]
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly

      /* Save actual timer count in echoRiseTime */
      ultrasonicSensors[aSensor].echoRiseTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a00227e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
1a002282:	00db      	lsls	r3, r3, #3
1a002284:	490f      	ldr	r1, [pc, #60]	; (1a0022c4 <serveInterrupt+0x5c>)
1a002286:	440b      	add	r3, r1
1a002288:	605a      	str	r2, [r3, #4]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearRiseStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->RISE = pins;
1a00228a:	4b0c      	ldr	r3, [pc, #48]	; (1a0022bc <serveInterrupt+0x54>)
1a00228c:	61dc      	str	r4, [r3, #28]
1a00228e:	e00f      	b.n	1a0022b0 <serveInterrupt+0x48>
1a002290:	4a0b      	ldr	r2, [pc, #44]	; (1a0022c0 <serveInterrupt+0x58>)
1a002292:	6891      	ldr	r1, [r2, #8]
   else {
      //TODO add method to sapi_timer.h in order to get a timer count -> avoid using LPC_TIMER0 directly
      //TODO echoFallTime may not be necesary

      /* Save actual timer count in echoFallTime */
      ultrasonicSensors[aSensor].echoFallTime = Chip_TIMER_ReadCount(LPC_TIMER0);
1a002294:	4d0b      	ldr	r5, [pc, #44]	; (1a0022c4 <serveInterrupt+0x5c>)
1a002296:	005e      	lsls	r6, r3, #1
1a002298:	18f2      	adds	r2, r6, r3
1a00229a:	00d2      	lsls	r2, r2, #3
1a00229c:	442a      	add	r2, r5
1a00229e:	6091      	str	r1, [r2, #8]
      /* Compute echo pulse width in timer ticks and save in lastEchoWidth */
      ultrasonicSensors[aSensor].lastEchoWidth = ultrasonicSensors[aSensor].echoFallTime - ultrasonicSensors[aSensor].echoRiseTime;
1a0022a0:	6852      	ldr	r2, [r2, #4]
1a0022a2:	1a89      	subs	r1, r1, r2
1a0022a4:	4433      	add	r3, r6
1a0022a6:	00db      	lsls	r3, r3, #3
1a0022a8:	442b      	add	r3, r5
1a0022aa:	60d9      	str	r1, [r3, #12]
 * @param	pins	: Pins with latched states to clear
 * @return	Nothing
 */
STATIC INLINE void Chip_PININT_ClearFallStates(LPC_PIN_INT_T *pPININT, uint32_t pins)
{
	pPININT->FALL = pins;
1a0022ac:	4b03      	ldr	r3, [pc, #12]	; (1a0022bc <serveInterrupt+0x54>)
1a0022ae:	621c      	str	r4, [r3, #32]
      /* Clear falling edge irq */
      Chip_PININT_ClearFallStates(LPC_GPIO_PIN_INT,PININTCH(irqChannel));
   }

   /* Clear IRQ status */
   clearInterrupt(irqChannel);
1a0022b0:	f7ff ffd2 	bl	1a002258 <clearInterrupt>
1a0022b4:	bd70      	pop	{r4, r5, r6, pc}
1a0022b6:	bf00      	nop
1a0022b8:	1a002c28 	.word	0x1a002c28
1a0022bc:	40087000 	.word	0x40087000
1a0022c0:	40084000 	.word	0x40084000
1a0022c4:	1000009c 	.word	0x1000009c

1a0022c8 <GPIO0_IRQHandler>:
/*
 * @Brief:   GPIO Echo interrupt handler for each sensor
 */
#ifndef OVERRIDE_SAPI_HCSR04_GPIO_IRQ
void GPIO0_IRQHandler(void)
{
1a0022c8:	b508      	push	{r3, lr}
   serveInterrupt(0);
1a0022ca:	2000      	movs	r0, #0
1a0022cc:	f7ff ffcc 	bl	1a002268 <serveInterrupt>
1a0022d0:	bd08      	pop	{r3, pc}
1a0022d2:	bf00      	nop

1a0022d4 <GPIO1_IRQHandler>:
}

void GPIO1_IRQHandler(void)
{
1a0022d4:	b508      	push	{r3, lr}
   serveInterrupt(1);
1a0022d6:	2001      	movs	r0, #1
1a0022d8:	f7ff ffc6 	bl	1a002268 <serveInterrupt>
1a0022dc:	bd08      	pop	{r3, pc}
1a0022de:	bf00      	nop

1a0022e0 <GPIO2_IRQHandler>:
}

void GPIO2_IRQHandler(void)
{
1a0022e0:	b508      	push	{r3, lr}
   serveInterrupt(2);
1a0022e2:	2002      	movs	r0, #2
1a0022e4:	f7ff ffc0 	bl	1a002268 <serveInterrupt>
1a0022e8:	bd08      	pop	{r3, pc}
1a0022ea:	bf00      	nop

1a0022ec <__aeabi_uldivmod>:
1a0022ec:	b953      	cbnz	r3, 1a002304 <__aeabi_uldivmod+0x18>
1a0022ee:	b94a      	cbnz	r2, 1a002304 <__aeabi_uldivmod+0x18>
1a0022f0:	2900      	cmp	r1, #0
1a0022f2:	bf08      	it	eq
1a0022f4:	2800      	cmpeq	r0, #0
1a0022f6:	bf1c      	itt	ne
1a0022f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0022fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a002300:	f000 b83c 	b.w	1a00237c <__aeabi_idiv0>
1a002304:	b082      	sub	sp, #8
1a002306:	46ec      	mov	ip, sp
1a002308:	e92d 5000 	stmdb	sp!, {ip, lr}
1a00230c:	f000 f81e 	bl	1a00234c <__gnu_uldivmod_helper>
1a002310:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002314:	b002      	add	sp, #8
1a002316:	bc0c      	pop	{r2, r3}
1a002318:	4770      	bx	lr
1a00231a:	bf00      	nop

1a00231c <__gnu_ldivmod_helper>:
1a00231c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002320:	9c06      	ldr	r4, [sp, #24]
1a002322:	4615      	mov	r5, r2
1a002324:	4606      	mov	r6, r0
1a002326:	460f      	mov	r7, r1
1a002328:	4698      	mov	r8, r3
1a00232a:	f000 f829 	bl	1a002380 <__divdi3>
1a00232e:	fb05 f301 	mul.w	r3, r5, r1
1a002332:	fb00 3808 	mla	r8, r0, r8, r3
1a002336:	fba5 2300 	umull	r2, r3, r5, r0
1a00233a:	1ab2      	subs	r2, r6, r2
1a00233c:	4443      	add	r3, r8
1a00233e:	eb67 0303 	sbc.w	r3, r7, r3
1a002342:	e9c4 2300 	strd	r2, r3, [r4]
1a002346:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00234a:	bf00      	nop

1a00234c <__gnu_uldivmod_helper>:
1a00234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002350:	9c06      	ldr	r4, [sp, #24]
1a002352:	4690      	mov	r8, r2
1a002354:	4606      	mov	r6, r0
1a002356:	460f      	mov	r7, r1
1a002358:	461d      	mov	r5, r3
1a00235a:	f000 f95f 	bl	1a00261c <__udivdi3>
1a00235e:	fb00 f505 	mul.w	r5, r0, r5
1a002362:	fba0 2308 	umull	r2, r3, r0, r8
1a002366:	fb08 5501 	mla	r5, r8, r1, r5
1a00236a:	1ab2      	subs	r2, r6, r2
1a00236c:	442b      	add	r3, r5
1a00236e:	eb67 0303 	sbc.w	r3, r7, r3
1a002372:	e9c4 2300 	strd	r2, r3, [r4]
1a002376:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00237a:	bf00      	nop

1a00237c <__aeabi_idiv0>:
1a00237c:	4770      	bx	lr
1a00237e:	bf00      	nop

1a002380 <__divdi3>:
1a002380:	2900      	cmp	r1, #0
1a002382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a002386:	f2c0 80a6 	blt.w	1a0024d6 <__divdi3+0x156>
1a00238a:	2600      	movs	r6, #0
1a00238c:	2b00      	cmp	r3, #0
1a00238e:	f2c0 809c 	blt.w	1a0024ca <__divdi3+0x14a>
1a002392:	4688      	mov	r8, r1
1a002394:	4694      	mov	ip, r2
1a002396:	469e      	mov	lr, r3
1a002398:	4615      	mov	r5, r2
1a00239a:	4604      	mov	r4, r0
1a00239c:	460f      	mov	r7, r1
1a00239e:	2b00      	cmp	r3, #0
1a0023a0:	d13d      	bne.n	1a00241e <__divdi3+0x9e>
1a0023a2:	428a      	cmp	r2, r1
1a0023a4:	d959      	bls.n	1a00245a <__divdi3+0xda>
1a0023a6:	fab2 f382 	clz	r3, r2
1a0023aa:	b13b      	cbz	r3, 1a0023bc <__divdi3+0x3c>
1a0023ac:	f1c3 0220 	rsb	r2, r3, #32
1a0023b0:	409f      	lsls	r7, r3
1a0023b2:	fa20 f202 	lsr.w	r2, r0, r2
1a0023b6:	409d      	lsls	r5, r3
1a0023b8:	4317      	orrs	r7, r2
1a0023ba:	409c      	lsls	r4, r3
1a0023bc:	0c29      	lsrs	r1, r5, #16
1a0023be:	0c22      	lsrs	r2, r4, #16
1a0023c0:	fbb7 fef1 	udiv	lr, r7, r1
1a0023c4:	b2a8      	uxth	r0, r5
1a0023c6:	fb01 771e 	mls	r7, r1, lr, r7
1a0023ca:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
1a0023ce:	fb00 f30e 	mul.w	r3, r0, lr
1a0023d2:	42bb      	cmp	r3, r7
1a0023d4:	d90a      	bls.n	1a0023ec <__divdi3+0x6c>
1a0023d6:	197f      	adds	r7, r7, r5
1a0023d8:	f10e 32ff 	add.w	r2, lr, #4294967295	; 0xffffffff
1a0023dc:	f080 8105 	bcs.w	1a0025ea <__divdi3+0x26a>
1a0023e0:	42bb      	cmp	r3, r7
1a0023e2:	f240 8102 	bls.w	1a0025ea <__divdi3+0x26a>
1a0023e6:	f1ae 0e02 	sub.w	lr, lr, #2
1a0023ea:	442f      	add	r7, r5
1a0023ec:	1aff      	subs	r7, r7, r3
1a0023ee:	b2a4      	uxth	r4, r4
1a0023f0:	fbb7 f3f1 	udiv	r3, r7, r1
1a0023f4:	fb01 7713 	mls	r7, r1, r3, r7
1a0023f8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0023fc:	fb00 f003 	mul.w	r0, r0, r3
1a002400:	42b8      	cmp	r0, r7
1a002402:	d908      	bls.n	1a002416 <__divdi3+0x96>
1a002404:	197f      	adds	r7, r7, r5
1a002406:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00240a:	f080 80f0 	bcs.w	1a0025ee <__divdi3+0x26e>
1a00240e:	42b8      	cmp	r0, r7
1a002410:	f240 80ed 	bls.w	1a0025ee <__divdi3+0x26e>
1a002414:	3b02      	subs	r3, #2
1a002416:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
1a00241a:	2200      	movs	r2, #0
1a00241c:	e003      	b.n	1a002426 <__divdi3+0xa6>
1a00241e:	428b      	cmp	r3, r1
1a002420:	d90f      	bls.n	1a002442 <__divdi3+0xc2>
1a002422:	2200      	movs	r2, #0
1a002424:	4613      	mov	r3, r2
1a002426:	1c34      	adds	r4, r6, #0
1a002428:	bf18      	it	ne
1a00242a:	2401      	movne	r4, #1
1a00242c:	4260      	negs	r0, r4
1a00242e:	f04f 0500 	mov.w	r5, #0
1a002432:	eb65 0145 	sbc.w	r1, r5, r5, lsl #1
1a002436:	4058      	eors	r0, r3
1a002438:	4051      	eors	r1, r2
1a00243a:	1900      	adds	r0, r0, r4
1a00243c:	4169      	adcs	r1, r5
1a00243e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a002442:	fab3 f283 	clz	r2, r3
1a002446:	2a00      	cmp	r2, #0
1a002448:	f040 8086 	bne.w	1a002558 <__divdi3+0x1d8>
1a00244c:	428b      	cmp	r3, r1
1a00244e:	d302      	bcc.n	1a002456 <__divdi3+0xd6>
1a002450:	4584      	cmp	ip, r0
1a002452:	f200 80db 	bhi.w	1a00260c <__divdi3+0x28c>
1a002456:	2301      	movs	r3, #1
1a002458:	e7e5      	b.n	1a002426 <__divdi3+0xa6>
1a00245a:	b912      	cbnz	r2, 1a002462 <__divdi3+0xe2>
1a00245c:	2301      	movs	r3, #1
1a00245e:	fbb3 f5f2 	udiv	r5, r3, r2
1a002462:	fab5 f085 	clz	r0, r5
1a002466:	2800      	cmp	r0, #0
1a002468:	d13b      	bne.n	1a0024e2 <__divdi3+0x162>
1a00246a:	1b78      	subs	r0, r7, r5
1a00246c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002470:	fa1f fc85 	uxth.w	ip, r5
1a002474:	2201      	movs	r2, #1
1a002476:	fbb0 f8fe 	udiv	r8, r0, lr
1a00247a:	0c21      	lsrs	r1, r4, #16
1a00247c:	fb0e 0718 	mls	r7, lr, r8, r0
1a002480:	ea41 4707 	orr.w	r7, r1, r7, lsl #16
1a002484:	fb0c f308 	mul.w	r3, ip, r8
1a002488:	42bb      	cmp	r3, r7
1a00248a:	d907      	bls.n	1a00249c <__divdi3+0x11c>
1a00248c:	197f      	adds	r7, r7, r5
1a00248e:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
1a002492:	d202      	bcs.n	1a00249a <__divdi3+0x11a>
1a002494:	42bb      	cmp	r3, r7
1a002496:	f200 80bd 	bhi.w	1a002614 <__divdi3+0x294>
1a00249a:	4688      	mov	r8, r1
1a00249c:	1aff      	subs	r7, r7, r3
1a00249e:	b2a4      	uxth	r4, r4
1a0024a0:	fbb7 f3fe 	udiv	r3, r7, lr
1a0024a4:	fb0e 7713 	mls	r7, lr, r3, r7
1a0024a8:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
1a0024ac:	fb0c fc03 	mul.w	ip, ip, r3
1a0024b0:	45bc      	cmp	ip, r7
1a0024b2:	d907      	bls.n	1a0024c4 <__divdi3+0x144>
1a0024b4:	197f      	adds	r7, r7, r5
1a0024b6:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
1a0024ba:	d202      	bcs.n	1a0024c2 <__divdi3+0x142>
1a0024bc:	45bc      	cmp	ip, r7
1a0024be:	f200 80a7 	bhi.w	1a002610 <__divdi3+0x290>
1a0024c2:	460b      	mov	r3, r1
1a0024c4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0024c8:	e7ad      	b.n	1a002426 <__divdi3+0xa6>
1a0024ca:	4252      	negs	r2, r2
1a0024cc:	ea6f 0606 	mvn.w	r6, r6
1a0024d0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a0024d4:	e75d      	b.n	1a002392 <__divdi3+0x12>
1a0024d6:	4240      	negs	r0, r0
1a0024d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0024dc:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
1a0024e0:	e754      	b.n	1a00238c <__divdi3+0xc>
1a0024e2:	f1c0 0220 	rsb	r2, r0, #32
1a0024e6:	fa24 f102 	lsr.w	r1, r4, r2
1a0024ea:	fa07 f300 	lsl.w	r3, r7, r0
1a0024ee:	4085      	lsls	r5, r0
1a0024f0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0024f4:	40d7      	lsrs	r7, r2
1a0024f6:	4319      	orrs	r1, r3
1a0024f8:	fbb7 f2fe 	udiv	r2, r7, lr
1a0024fc:	0c0b      	lsrs	r3, r1, #16
1a0024fe:	fb0e 7712 	mls	r7, lr, r2, r7
1a002502:	fa1f fc85 	uxth.w	ip, r5
1a002506:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
1a00250a:	fb0c f702 	mul.w	r7, ip, r2
1a00250e:	429f      	cmp	r7, r3
1a002510:	fa04 f400 	lsl.w	r4, r4, r0
1a002514:	d907      	bls.n	1a002526 <__divdi3+0x1a6>
1a002516:	195b      	adds	r3, r3, r5
1a002518:	f102 30ff 	add.w	r0, r2, #4294967295	; 0xffffffff
1a00251c:	d274      	bcs.n	1a002608 <__divdi3+0x288>
1a00251e:	429f      	cmp	r7, r3
1a002520:	d972      	bls.n	1a002608 <__divdi3+0x288>
1a002522:	3a02      	subs	r2, #2
1a002524:	442b      	add	r3, r5
1a002526:	1bdf      	subs	r7, r3, r7
1a002528:	b289      	uxth	r1, r1
1a00252a:	fbb7 f8fe 	udiv	r8, r7, lr
1a00252e:	fb0e 7318 	mls	r3, lr, r8, r7
1a002532:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
1a002536:	fb0c f708 	mul.w	r7, ip, r8
1a00253a:	429f      	cmp	r7, r3
1a00253c:	d908      	bls.n	1a002550 <__divdi3+0x1d0>
1a00253e:	195b      	adds	r3, r3, r5
1a002540:	f108 31ff 	add.w	r1, r8, #4294967295	; 0xffffffff
1a002544:	d25c      	bcs.n	1a002600 <__divdi3+0x280>
1a002546:	429f      	cmp	r7, r3
1a002548:	d95a      	bls.n	1a002600 <__divdi3+0x280>
1a00254a:	f1a8 0802 	sub.w	r8, r8, #2
1a00254e:	442b      	add	r3, r5
1a002550:	1bd8      	subs	r0, r3, r7
1a002552:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
1a002556:	e78e      	b.n	1a002476 <__divdi3+0xf6>
1a002558:	f1c2 0320 	rsb	r3, r2, #32
1a00255c:	fa2c f103 	lsr.w	r1, ip, r3
1a002560:	fa0e fe02 	lsl.w	lr, lr, r2
1a002564:	fa20 f703 	lsr.w	r7, r0, r3
1a002568:	ea41 0e0e 	orr.w	lr, r1, lr
1a00256c:	fa08 f002 	lsl.w	r0, r8, r2
1a002570:	fa28 f103 	lsr.w	r1, r8, r3
1a002574:	ea4f 451e 	mov.w	r5, lr, lsr #16
1a002578:	4338      	orrs	r0, r7
1a00257a:	fbb1 f8f5 	udiv	r8, r1, r5
1a00257e:	0c03      	lsrs	r3, r0, #16
1a002580:	fb05 1118 	mls	r1, r5, r8, r1
1a002584:	fa1f f78e 	uxth.w	r7, lr
1a002588:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a00258c:	fb07 f308 	mul.w	r3, r7, r8
1a002590:	428b      	cmp	r3, r1
1a002592:	fa0c fc02 	lsl.w	ip, ip, r2
1a002596:	d909      	bls.n	1a0025ac <__divdi3+0x22c>
1a002598:	eb11 010e 	adds.w	r1, r1, lr
1a00259c:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
1a0025a0:	d230      	bcs.n	1a002604 <__divdi3+0x284>
1a0025a2:	428b      	cmp	r3, r1
1a0025a4:	d92e      	bls.n	1a002604 <__divdi3+0x284>
1a0025a6:	f1a8 0802 	sub.w	r8, r8, #2
1a0025aa:	4471      	add	r1, lr
1a0025ac:	1ac9      	subs	r1, r1, r3
1a0025ae:	b280      	uxth	r0, r0
1a0025b0:	fbb1 f3f5 	udiv	r3, r1, r5
1a0025b4:	fb05 1113 	mls	r1, r5, r3, r1
1a0025b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
1a0025bc:	fb07 f703 	mul.w	r7, r7, r3
1a0025c0:	428f      	cmp	r7, r1
1a0025c2:	d908      	bls.n	1a0025d6 <__divdi3+0x256>
1a0025c4:	eb11 010e 	adds.w	r1, r1, lr
1a0025c8:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
1a0025cc:	d216      	bcs.n	1a0025fc <__divdi3+0x27c>
1a0025ce:	428f      	cmp	r7, r1
1a0025d0:	d914      	bls.n	1a0025fc <__divdi3+0x27c>
1a0025d2:	3b02      	subs	r3, #2
1a0025d4:	4471      	add	r1, lr
1a0025d6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0025da:	1bc9      	subs	r1, r1, r7
1a0025dc:	fba3 890c 	umull	r8, r9, r3, ip
1a0025e0:	4549      	cmp	r1, r9
1a0025e2:	d309      	bcc.n	1a0025f8 <__divdi3+0x278>
1a0025e4:	d005      	beq.n	1a0025f2 <__divdi3+0x272>
1a0025e6:	2200      	movs	r2, #0
1a0025e8:	e71d      	b.n	1a002426 <__divdi3+0xa6>
1a0025ea:	4696      	mov	lr, r2
1a0025ec:	e6fe      	b.n	1a0023ec <__divdi3+0x6c>
1a0025ee:	4613      	mov	r3, r2
1a0025f0:	e711      	b.n	1a002416 <__divdi3+0x96>
1a0025f2:	4094      	lsls	r4, r2
1a0025f4:	4544      	cmp	r4, r8
1a0025f6:	d2f6      	bcs.n	1a0025e6 <__divdi3+0x266>
1a0025f8:	3b01      	subs	r3, #1
1a0025fa:	e7f4      	b.n	1a0025e6 <__divdi3+0x266>
1a0025fc:	4603      	mov	r3, r0
1a0025fe:	e7ea      	b.n	1a0025d6 <__divdi3+0x256>
1a002600:	4688      	mov	r8, r1
1a002602:	e7a5      	b.n	1a002550 <__divdi3+0x1d0>
1a002604:	46c8      	mov	r8, r9
1a002606:	e7d1      	b.n	1a0025ac <__divdi3+0x22c>
1a002608:	4602      	mov	r2, r0
1a00260a:	e78c      	b.n	1a002526 <__divdi3+0x1a6>
1a00260c:	4613      	mov	r3, r2
1a00260e:	e70a      	b.n	1a002426 <__divdi3+0xa6>
1a002610:	3b02      	subs	r3, #2
1a002612:	e757      	b.n	1a0024c4 <__divdi3+0x144>
1a002614:	f1a8 0802 	sub.w	r8, r8, #2
1a002618:	442f      	add	r7, r5
1a00261a:	e73f      	b.n	1a00249c <__divdi3+0x11c>

1a00261c <__udivdi3>:
1a00261c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002620:	2b00      	cmp	r3, #0
1a002622:	d144      	bne.n	1a0026ae <__udivdi3+0x92>
1a002624:	428a      	cmp	r2, r1
1a002626:	4615      	mov	r5, r2
1a002628:	4604      	mov	r4, r0
1a00262a:	d94f      	bls.n	1a0026cc <__udivdi3+0xb0>
1a00262c:	fab2 f782 	clz	r7, r2
1a002630:	460e      	mov	r6, r1
1a002632:	b14f      	cbz	r7, 1a002648 <__udivdi3+0x2c>
1a002634:	f1c7 0320 	rsb	r3, r7, #32
1a002638:	40b9      	lsls	r1, r7
1a00263a:	fa20 f603 	lsr.w	r6, r0, r3
1a00263e:	fa02 f507 	lsl.w	r5, r2, r7
1a002642:	430e      	orrs	r6, r1
1a002644:	fa00 f407 	lsl.w	r4, r0, r7
1a002648:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a00264c:	0c23      	lsrs	r3, r4, #16
1a00264e:	fbb6 f0fe 	udiv	r0, r6, lr
1a002652:	b2af      	uxth	r7, r5
1a002654:	fb0e 6110 	mls	r1, lr, r0, r6
1a002658:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00265c:	fb07 f100 	mul.w	r1, r7, r0
1a002660:	4299      	cmp	r1, r3
1a002662:	d909      	bls.n	1a002678 <__udivdi3+0x5c>
1a002664:	195b      	adds	r3, r3, r5
1a002666:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a00266a:	f080 80ec 	bcs.w	1a002846 <__udivdi3+0x22a>
1a00266e:	4299      	cmp	r1, r3
1a002670:	f240 80e9 	bls.w	1a002846 <__udivdi3+0x22a>
1a002674:	3802      	subs	r0, #2
1a002676:	442b      	add	r3, r5
1a002678:	1a5a      	subs	r2, r3, r1
1a00267a:	b2a4      	uxth	r4, r4
1a00267c:	fbb2 f3fe 	udiv	r3, r2, lr
1a002680:	fb0e 2213 	mls	r2, lr, r3, r2
1a002684:	ea44 4202 	orr.w	r2, r4, r2, lsl #16
1a002688:	fb07 f703 	mul.w	r7, r7, r3
1a00268c:	4297      	cmp	r7, r2
1a00268e:	d908      	bls.n	1a0026a2 <__udivdi3+0x86>
1a002690:	1952      	adds	r2, r2, r5
1a002692:	f103 31ff 	add.w	r1, r3, #4294967295	; 0xffffffff
1a002696:	f080 80d8 	bcs.w	1a00284a <__udivdi3+0x22e>
1a00269a:	4297      	cmp	r7, r2
1a00269c:	f240 80d5 	bls.w	1a00284a <__udivdi3+0x22e>
1a0026a0:	3b02      	subs	r3, #2
1a0026a2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a0026a6:	2600      	movs	r6, #0
1a0026a8:	4631      	mov	r1, r6
1a0026aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0026ae:	428b      	cmp	r3, r1
1a0026b0:	d847      	bhi.n	1a002742 <__udivdi3+0x126>
1a0026b2:	fab3 f683 	clz	r6, r3
1a0026b6:	2e00      	cmp	r6, #0
1a0026b8:	d148      	bne.n	1a00274c <__udivdi3+0x130>
1a0026ba:	428b      	cmp	r3, r1
1a0026bc:	d302      	bcc.n	1a0026c4 <__udivdi3+0xa8>
1a0026be:	4282      	cmp	r2, r0
1a0026c0:	f200 80cd 	bhi.w	1a00285e <__udivdi3+0x242>
1a0026c4:	2001      	movs	r0, #1
1a0026c6:	4631      	mov	r1, r6
1a0026c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0026cc:	b912      	cbnz	r2, 1a0026d4 <__udivdi3+0xb8>
1a0026ce:	2501      	movs	r5, #1
1a0026d0:	fbb5 f5f2 	udiv	r5, r5, r2
1a0026d4:	fab5 f885 	clz	r8, r5
1a0026d8:	f1b8 0f00 	cmp.w	r8, #0
1a0026dc:	d177      	bne.n	1a0027ce <__udivdi3+0x1b2>
1a0026de:	1b4a      	subs	r2, r1, r5
1a0026e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0026e4:	b2af      	uxth	r7, r5
1a0026e6:	2601      	movs	r6, #1
1a0026e8:	fbb2 f0fe 	udiv	r0, r2, lr
1a0026ec:	0c23      	lsrs	r3, r4, #16
1a0026ee:	fb0e 2110 	mls	r1, lr, r0, r2
1a0026f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
1a0026f6:	fb07 f300 	mul.w	r3, r7, r0
1a0026fa:	428b      	cmp	r3, r1
1a0026fc:	d907      	bls.n	1a00270e <__udivdi3+0xf2>
1a0026fe:	1949      	adds	r1, r1, r5
1a002700:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a002704:	d202      	bcs.n	1a00270c <__udivdi3+0xf0>
1a002706:	428b      	cmp	r3, r1
1a002708:	f200 80ba 	bhi.w	1a002880 <__udivdi3+0x264>
1a00270c:	4610      	mov	r0, r2
1a00270e:	1ac9      	subs	r1, r1, r3
1a002710:	b2a4      	uxth	r4, r4
1a002712:	fbb1 f3fe 	udiv	r3, r1, lr
1a002716:	fb0e 1113 	mls	r1, lr, r3, r1
1a00271a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
1a00271e:	fb07 f703 	mul.w	r7, r7, r3
1a002722:	42a7      	cmp	r7, r4
1a002724:	d908      	bls.n	1a002738 <__udivdi3+0x11c>
1a002726:	1964      	adds	r4, r4, r5
1a002728:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
1a00272c:	f080 808f 	bcs.w	1a00284e <__udivdi3+0x232>
1a002730:	42a7      	cmp	r7, r4
1a002732:	f240 808c 	bls.w	1a00284e <__udivdi3+0x232>
1a002736:	3b02      	subs	r3, #2
1a002738:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a00273c:	4631      	mov	r1, r6
1a00273e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a002742:	2600      	movs	r6, #0
1a002744:	4630      	mov	r0, r6
1a002746:	4631      	mov	r1, r6
1a002748:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00274c:	f1c6 0420 	rsb	r4, r6, #32
1a002750:	fa22 f504 	lsr.w	r5, r2, r4
1a002754:	40b3      	lsls	r3, r6
1a002756:	432b      	orrs	r3, r5
1a002758:	fa20 fc04 	lsr.w	ip, r0, r4
1a00275c:	fa01 f706 	lsl.w	r7, r1, r6
1a002760:	fa21 f504 	lsr.w	r5, r1, r4
1a002764:	ea4f 4e13 	mov.w	lr, r3, lsr #16
1a002768:	ea4c 0707 	orr.w	r7, ip, r7
1a00276c:	fbb5 f8fe 	udiv	r8, r5, lr
1a002770:	0c39      	lsrs	r1, r7, #16
1a002772:	fb0e 5518 	mls	r5, lr, r8, r5
1a002776:	fa1f fc83 	uxth.w	ip, r3
1a00277a:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
1a00277e:	fb0c f108 	mul.w	r1, ip, r8
1a002782:	42a9      	cmp	r1, r5
1a002784:	fa02 f206 	lsl.w	r2, r2, r6
1a002788:	d904      	bls.n	1a002794 <__udivdi3+0x178>
1a00278a:	18ed      	adds	r5, r5, r3
1a00278c:	f108 34ff 	add.w	r4, r8, #4294967295	; 0xffffffff
1a002790:	d367      	bcc.n	1a002862 <__udivdi3+0x246>
1a002792:	46a0      	mov	r8, r4
1a002794:	1a6d      	subs	r5, r5, r1
1a002796:	b2bf      	uxth	r7, r7
1a002798:	fbb5 f4fe 	udiv	r4, r5, lr
1a00279c:	fb0e 5514 	mls	r5, lr, r4, r5
1a0027a0:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
1a0027a4:	fb0c fc04 	mul.w	ip, ip, r4
1a0027a8:	458c      	cmp	ip, r1
1a0027aa:	d904      	bls.n	1a0027b6 <__udivdi3+0x19a>
1a0027ac:	18c9      	adds	r1, r1, r3
1a0027ae:	f104 35ff 	add.w	r5, r4, #4294967295	; 0xffffffff
1a0027b2:	d35c      	bcc.n	1a00286e <__udivdi3+0x252>
1a0027b4:	462c      	mov	r4, r5
1a0027b6:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
1a0027ba:	ebcc 0101 	rsb	r1, ip, r1
1a0027be:	fba4 2302 	umull	r2, r3, r4, r2
1a0027c2:	4299      	cmp	r1, r3
1a0027c4:	d348      	bcc.n	1a002858 <__udivdi3+0x23c>
1a0027c6:	d044      	beq.n	1a002852 <__udivdi3+0x236>
1a0027c8:	4620      	mov	r0, r4
1a0027ca:	2600      	movs	r6, #0
1a0027cc:	e76c      	b.n	1a0026a8 <__udivdi3+0x8c>
1a0027ce:	f1c8 0420 	rsb	r4, r8, #32
1a0027d2:	fa01 f308 	lsl.w	r3, r1, r8
1a0027d6:	fa05 f508 	lsl.w	r5, r5, r8
1a0027da:	fa20 f704 	lsr.w	r7, r0, r4
1a0027de:	40e1      	lsrs	r1, r4
1a0027e0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0027e4:	431f      	orrs	r7, r3
1a0027e6:	fbb1 f6fe 	udiv	r6, r1, lr
1a0027ea:	0c3a      	lsrs	r2, r7, #16
1a0027ec:	fb0e 1116 	mls	r1, lr, r6, r1
1a0027f0:	fa1f fc85 	uxth.w	ip, r5
1a0027f4:	ea42 4301 	orr.w	r3, r2, r1, lsl #16
1a0027f8:	fb0c f206 	mul.w	r2, ip, r6
1a0027fc:	429a      	cmp	r2, r3
1a0027fe:	fa00 f408 	lsl.w	r4, r0, r8
1a002802:	d907      	bls.n	1a002814 <__udivdi3+0x1f8>
1a002804:	195b      	adds	r3, r3, r5
1a002806:	f106 31ff 	add.w	r1, r6, #4294967295	; 0xffffffff
1a00280a:	d237      	bcs.n	1a00287c <__udivdi3+0x260>
1a00280c:	429a      	cmp	r2, r3
1a00280e:	d935      	bls.n	1a00287c <__udivdi3+0x260>
1a002810:	3e02      	subs	r6, #2
1a002812:	442b      	add	r3, r5
1a002814:	1a9b      	subs	r3, r3, r2
1a002816:	b2bf      	uxth	r7, r7
1a002818:	fbb3 f0fe 	udiv	r0, r3, lr
1a00281c:	fb0e 3310 	mls	r3, lr, r0, r3
1a002820:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
1a002824:	fb0c f100 	mul.w	r1, ip, r0
1a002828:	4299      	cmp	r1, r3
1a00282a:	d907      	bls.n	1a00283c <__udivdi3+0x220>
1a00282c:	195b      	adds	r3, r3, r5
1a00282e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
1a002832:	d221      	bcs.n	1a002878 <__udivdi3+0x25c>
1a002834:	4299      	cmp	r1, r3
1a002836:	d91f      	bls.n	1a002878 <__udivdi3+0x25c>
1a002838:	3802      	subs	r0, #2
1a00283a:	442b      	add	r3, r5
1a00283c:	1a5a      	subs	r2, r3, r1
1a00283e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
1a002842:	4667      	mov	r7, ip
1a002844:	e750      	b.n	1a0026e8 <__udivdi3+0xcc>
1a002846:	4610      	mov	r0, r2
1a002848:	e716      	b.n	1a002678 <__udivdi3+0x5c>
1a00284a:	460b      	mov	r3, r1
1a00284c:	e729      	b.n	1a0026a2 <__udivdi3+0x86>
1a00284e:	4613      	mov	r3, r2
1a002850:	e772      	b.n	1a002738 <__udivdi3+0x11c>
1a002852:	40b0      	lsls	r0, r6
1a002854:	4290      	cmp	r0, r2
1a002856:	d2b7      	bcs.n	1a0027c8 <__udivdi3+0x1ac>
1a002858:	1e60      	subs	r0, r4, #1
1a00285a:	2600      	movs	r6, #0
1a00285c:	e724      	b.n	1a0026a8 <__udivdi3+0x8c>
1a00285e:	4630      	mov	r0, r6
1a002860:	e722      	b.n	1a0026a8 <__udivdi3+0x8c>
1a002862:	42a9      	cmp	r1, r5
1a002864:	d995      	bls.n	1a002792 <__udivdi3+0x176>
1a002866:	f1a8 0802 	sub.w	r8, r8, #2
1a00286a:	441d      	add	r5, r3
1a00286c:	e792      	b.n	1a002794 <__udivdi3+0x178>
1a00286e:	458c      	cmp	ip, r1
1a002870:	d9a0      	bls.n	1a0027b4 <__udivdi3+0x198>
1a002872:	3c02      	subs	r4, #2
1a002874:	4419      	add	r1, r3
1a002876:	e79e      	b.n	1a0027b6 <__udivdi3+0x19a>
1a002878:	4610      	mov	r0, r2
1a00287a:	e7df      	b.n	1a00283c <__udivdi3+0x220>
1a00287c:	460e      	mov	r6, r1
1a00287e:	e7c9      	b.n	1a002814 <__udivdi3+0x1f8>
1a002880:	3802      	subs	r0, #2
1a002882:	4429      	add	r1, r5
1a002884:	e743      	b.n	1a00270e <__udivdi3+0xf2>
1a002886:	bf00      	nop

1a002888 <__libc_init_array>:
1a002888:	b570      	push	{r4, r5, r6, lr}
1a00288a:	4b0e      	ldr	r3, [pc, #56]	; (1a0028c4 <__libc_init_array+0x3c>)
1a00288c:	4c0e      	ldr	r4, [pc, #56]	; (1a0028c8 <__libc_init_array+0x40>)
1a00288e:	1ae4      	subs	r4, r4, r3
1a002890:	10a4      	asrs	r4, r4, #2
1a002892:	2500      	movs	r5, #0
1a002894:	461e      	mov	r6, r3
1a002896:	42a5      	cmp	r5, r4
1a002898:	d004      	beq.n	1a0028a4 <__libc_init_array+0x1c>
1a00289a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a00289e:	4798      	blx	r3
1a0028a0:	3501      	adds	r5, #1
1a0028a2:	e7f8      	b.n	1a002896 <__libc_init_array+0xe>
1a0028a4:	f7ff f8d4 	bl	1a001a50 <_init>
1a0028a8:	4c08      	ldr	r4, [pc, #32]	; (1a0028cc <__libc_init_array+0x44>)
1a0028aa:	4b09      	ldr	r3, [pc, #36]	; (1a0028d0 <__libc_init_array+0x48>)
1a0028ac:	1ae4      	subs	r4, r4, r3
1a0028ae:	10a4      	asrs	r4, r4, #2
1a0028b0:	2500      	movs	r5, #0
1a0028b2:	461e      	mov	r6, r3
1a0028b4:	42a5      	cmp	r5, r4
1a0028b6:	d004      	beq.n	1a0028c2 <__libc_init_array+0x3a>
1a0028b8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a0028bc:	4798      	blx	r3
1a0028be:	3501      	adds	r5, #1
1a0028c0:	e7f8      	b.n	1a0028b4 <__libc_init_array+0x2c>
1a0028c2:	bd70      	pop	{r4, r5, r6, pc}
1a0028c4:	1a002c2c 	.word	0x1a002c2c
1a0028c8:	1a002c2c 	.word	0x1a002c2c
1a0028cc:	1a002c2c 	.word	0x1a002c2c
1a0028d0:	1a002c2c 	.word	0x1a002c2c

1a0028d4 <memset>:
1a0028d4:	4402      	add	r2, r0
1a0028d6:	4603      	mov	r3, r0
1a0028d8:	4293      	cmp	r3, r2
1a0028da:	d002      	beq.n	1a0028e2 <memset+0xe>
1a0028dc:	f803 1b01 	strb.w	r1, [r3], #1
1a0028e0:	e7fa      	b.n	1a0028d8 <memset+0x4>
1a0028e2:	4770      	bx	lr
1a0028e4:	54524155 	.word	0x54524155
1a0028e8:	4253555f 	.word	0x4253555f
1a0028ec:	6e6f6320 	.word	0x6e6f6320
1a0028f0:	75676966 	.word	0x75676966
1a0028f4:	61646172 	.word	0x61646172
1a0028f8:	000d0a2e 	.word	0x000d0a2e

1a0028fc <GpioPorts>:
1a0028fc:	03030003 0f050403 05031005 07030603     ................
1a00290c:	ffff0802                                ....

1a002910 <OscRateIn>:
1a002910:	00b71b00                                ....

1a002914 <ExtRateIn>:
1a002914:	00000000                                ....

1a002918 <GpioButtons>:
1a002918:	08000400 09010900                       ........

1a002920 <GpioLeds>:
1a002920:	01050005 0e000205 0c010b01              ............

1a00292c <InitClkStates>:
1a00292c:	01010f01                                ....

1a002930 <pinmuxing>:
1a002930:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a002940:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a002950:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a002960:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a002970:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a002980:	00d50301 00d50401 00160107 00560207     ..............V.
1a002990:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0029a0:	00570206                                ..W.

1a0029a4 <UART_BClock>:
1a0029a4:	01a201c2 01620182                       ......b.

1a0029ac <UART_PClock>:
1a0029ac:	00820081 00a200a1 08040201 0f0f0f03     ................
1a0029bc:	ffff00ff                                ....

1a0029c0 <periph_to_base>:
1a0029c0:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a0029d0:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a0029e0:	000100e0 01000100 01200003 00060120     .......... . ...
1a0029f0:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a002a00:	01820013 00120182 01a201a2 01c20011     ................
1a002a10:	001001c2 01e201e2 0202000f 000e0202     ................
1a002a20:	02220222 0223000d 001c0223              "."...#.#...

1a002a2c <InitClkStates>:
1a002a2c:	00010100 00010909 0001090a 01010701     ................
1a002a3c:	00010902 00010906 0101090c 0001090d     ................
1a002a4c:	0001090e 0001090f 00010910 00010911     ................
1a002a5c:	00010912 00010913 00011114 00011119     ................
1a002a6c:	0001111a 0001111b                       ........

1a002a74 <lpcUarts>:
1a002a74:	40081000 06020406 00180205 40081000     ...@...........@
1a002a84:	09070509 00180706 40082000 00000000     ......... .@....
1a002a94:	00190000 400c1000 07060107 001a0602     .......@........
1a002aa4:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a002ab4:	02020302 001b0204                       ........

1a002abc <timer_sd>:
1a002abc:	40084000 00000020 0000000c 40085000     .@.@ ........P.@
1a002acc:	00000021 0000000d 400c3000 00000022     !........0.@"...
1a002adc:	0000000e 400c4000 00000023 0000000f     .....@.@#.......

1a002aec <gpioPinsInit>:
1a002aec:	02000104 00050701 05010d03 04080100     ................
1a002afc:	02020002 02000304 00000403 04070002     ................
1a002b0c:	030c0300 09050402 05040103 04030208     ................
1a002b1c:	04020305 06040504 0802000c 03000b06     ................
1a002b2c:	00090607 07060503 060f0504 03030004     ................
1a002b3c:	02000404 00050404 06040502 04060200     ................
1a002b4c:	0c050408 05040a04 0003010e 14010a00     ................
1a002b5c:	010f0000 0d000012 00001101 0010010c     ................
1a002b6c:	07070300 000f0300 01000001 00000000     ................
1a002b7c:	000a0600 08060603 06100504 04030005     ................
1a002b8c:	03000106 04090400 04010d05 010b0000     ................
1a002b9c:	0200000f 00000001 00010104 02010800     ................
1a002bac:	01090000 09010006 05040002 04010200     ................
1a002bbc:	02020105 02020504 0e00000a 01000b02     ................
1a002bcc:	000c020b 00040c01 04000200 01020001     ................
1a002bdc:	02000204 00030402 03070302 070b0300     ................
1a002bec:	0c030004 03000507 0006070d 01020e03     ................
1a002bfc:	04010504 06020006 02000504 00040405     ................
1a002c0c:	08040402 040c0504 0d050409 05040a04     ................
1a002c1c:	0005010e ffff0801 00000a0d              ............

1a002c28 <ultrasonicSensorsIrqMap>:
1a002c28:	ff020100                                ....
